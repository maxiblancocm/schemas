{
  "openapi": "3.0.0",
  "info": {
    "version": "2015-03-31",
    "x-release": "v4",
    "title": "AWS Lambda",
    "description": "The AWS Lambda Developer Guide provides additional information. For the service overview, see What is AWS Lambda, and for information about how the service works, see AWS Lambda: How it Works in the AWS Lambda Developer Guide.",
    "x-logo": {
      "url": "/logos/aws/Arch_AWS-Lambda_64.svg"
    },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "contact": {
      "name": "Mike Ralphson",
      "email": "mike.ralphson@gmail.com",
      "url": "https://github.com/mermade/aws2openapi",
      "x-twitter": "PermittedSoc"
    },
    "license": {
      "name": "Apache 2.0 License",
      "url": "http://www.apache.org/licenses/"
    },
    "x-providerName": "amazonaws.com",
    "x-serviceName": "lambda",
    "x-origin": [
      {
        "contentType": "application/json",
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/lambda-2015-03-31.normal.json",
        "converter": {
          "url": "https://github.com/mermade/aws2openapi",
          "version": "1.0.0"
        },
        "x-apisguru-driver": "external"
      }
    ],
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": ["cloud"],
    "x-preferred": true
  },
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://docs.aws.amazon.com/lambda/"
  },
  "servers": [
    {
      "url": "http://lambda.{region}.amazonaws.com",
      "variables": {
        "region": {
          "description": "The AWS region",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "us-gov-west-1",
            "us-gov-east-1",
            "ca-central-1",
            "eu-north-1",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "eu-south-1",
            "af-south-1",
            "ap-northeast-1",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-east-1",
            "ap-south-1",
            "sa-east-1",
            "me-south-1"
          ],
          "default": "us-east-1"
        }
      },
      "description": "The AWS Lambda multi-region endpoint"
    },
    {
      "url": "https://lambda.{region}.amazonaws.com",
      "variables": {
        "region": {
          "description": "The AWS region",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "us-gov-west-1",
            "us-gov-east-1",
            "ca-central-1",
            "eu-north-1",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "eu-south-1",
            "af-south-1",
            "ap-northeast-1",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-east-1",
            "ap-south-1",
            "sa-east-1",
            "me-south-1"
          ],
          "default": "us-east-1"
        }
      },
      "description": "The AWS Lambda multi-region endpoint"
    },
    {
      "url": "http://lambda.{region}.amazonaws.com.cn",
      "variables": {
        "region": {
          "description": "The AWS region",
          "enum": ["cn-north-1", "cn-northwest-1"],
          "default": "cn-north-1"
        }
      },
      "description": "The AWS Lambda endpoint for China (Beijing) and China (Ningxia)"
    },
    {
      "url": "https://lambda.{region}.amazonaws.com.cn",
      "variables": {
        "region": {
          "description": "The AWS region",
          "enum": ["cn-north-1", "cn-northwest-1"],
          "default": "cn-north-1"
        }
      },
      "description": "The AWS Lambda endpoint for China (Beijing) and China (Ningxia)"
    }
  ],
  "x-hasEquivalentPaths": true,
  "paths": {
    "/2018-10-31/layers/{LayerName}/versions/{VersionNumber}/policy": {
      "post": {
        "operationId": "AddLayerVersionPermission",
        "description": "<p>Adds permissions to the resource-based policy of a version of an <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\">AWS Lambda layer</a>. Use this action to grant layer usage permission to other accounts. You can grant permission to a single account, all AWS accounts, or all accounts in an organization.</p> <p>To revoke permission, call <a>RemoveLayerVersionPermission</a> with the statement ID that you specified when you added it.</p>",
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddLayerVersionPermissionResponse"
                }
              }
            }
          },
          "480": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          },
          "482": {
            "description": "ResourceConflictException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceConflictException"
                }
              }
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          },
          "484": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          },
          "485": {
            "description": "PolicyLengthExceededException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyLengthExceededException"
                }
              }
            }
          },
          "486": {
            "description": "PreconditionFailedException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreconditionFailedException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "LayerName",
            "in": "path",
            "required": true,
            "description": "The name or Amazon Resource Name (ARN) of the layer.",
            "schema": {
              "type": "string",
              "pattern": "(arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\\d{12}:layer:[a-zA-Z0-9-_]+)|[a-zA-Z0-9-_]+",
              "minLength": 1,
              "maxLength": 140
            }
          },
          {
            "name": "VersionNumber",
            "in": "path",
            "required": true,
            "description": "The version number.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "RevisionId",
            "in": "query",
            "required": false,
            "description": "Only update the policy if the revision ID matches the ID specified. Use this option to avoid modifying a policy that has changed since you last read it.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["StatementId", "Action", "Principal"],
                "properties": {
                  "StatementId": {
                    "description": "An identifier that distinguishes the policy from others on the same layer version.",
                    "type": "string",
                    "pattern": "([a-zA-Z0-9-_]+)",
                    "minLength": 1,
                    "maxLength": 100
                  },
                  "Action": {
                    "description": "The API action that grants access to the layer. For example, <code>lambda:GetLayerVersion</code>.",
                    "type": "string",
                    "pattern": "lambda:GetLayerVersion",
                    "maxLength": 22
                  },
                  "Principal": {
                    "description": "An account ID, or <code>*</code> to grant permission to all AWS accounts.",
                    "type": "string",
                    "pattern": "\\d{12}|\\*|arn:(aws[a-zA-Z-]*):iam::\\d{12}:root"
                  },
                  "OrganizationId": {
                    "description": "With the principal set to <code>*</code>, grant permission to all accounts in the specified organization.",
                    "type": "string",
                    "pattern": "o-[a-z0-9]{10,32}",
                    "maxLength": 34
                  }
                }
              }
            }
          }
        },
        "summary": "Add Layer Version Permission"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ],
      "get": {
        "operationId": "GetLayerVersionPolicy",
        "description": "Returns the permission policy for a version of an <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\">AWS Lambda layer</a>. For more information, see <a>AddLayerVersionPermission</a>.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLayerVersionPolicyResponse"
                }
              }
            }
          },
          "480": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          },
          "483": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "LayerName",
            "in": "path",
            "required": true,
            "description": "The name or Amazon Resource Name (ARN) of the layer.",
            "schema": {
              "type": "string",
              "pattern": "(arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\\d{12}:layer:[a-zA-Z0-9-_]+)|[a-zA-Z0-9-_]+",
              "minLength": 1,
              "maxLength": 140
            }
          },
          {
            "name": "VersionNumber",
            "in": "path",
            "required": true,
            "description": "The version number.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Get Layer Version Policy"
      }
    },
    "/2015-03-31/functions/{FunctionName}/policy": {
      "post": {
        "operationId": "AddPermission",
        "description": "<p>Grants an AWS service or another account permission to use a function. You can apply the policy at the function level, or specify a qualifier to restrict access to a single version or alias. If you use a qualifier, the invoker must use the full Amazon Resource Name (ARN) of that version or alias to invoke the function.</p> <p>To grant permission to another account, specify the account ID as the <code>Principal</code>. For AWS services, the principal is a domain-style identifier defined by the service, like <code>s3.amazonaws.com</code> or <code>sns.amazonaws.com</code>. For AWS services, you can also specify the ARN of the associated resource as the <code>SourceArn</code>. If you grant permission to a service principal without specifying the source, other accounts could potentially configure resources in their account to invoke your Lambda function.</p> <p>This action adds a statement to a resource-based permissions policy for the function. For more information about function policies, see <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html\">Lambda Function Policies</a>. </p>",
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddPermissionResponse"
                }
              }
            }
          },
          "480": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          },
          "482": {
            "description": "ResourceConflictException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceConflictException"
                }
              }
            }
          },
          "483": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          },
          "484": {
            "description": "PolicyLengthExceededException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyLengthExceededException"
                }
              }
            }
          },
          "485": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          },
          "486": {
            "description": "PreconditionFailedException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreconditionFailedException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "FunctionName",
            "in": "path",
            "required": true,
            "description": "<p>The name of the Lambda function, version, or alias.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code> (name-only), <code>my-function:v1</code> (with alias).</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "schema": {
              "type": "string",
              "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
              "minLength": 1,
              "maxLength": 140
            }
          },
          {
            "name": "Qualifier",
            "in": "query",
            "required": false,
            "description": "Specify a version or alias to add permissions to a published version of the function.",
            "schema": {
              "type": "string",
              "pattern": "(|[a-zA-Z0-9$_-]+)",
              "minLength": 1,
              "maxLength": 128
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["StatementId", "Action", "Principal"],
                "properties": {
                  "StatementId": {
                    "description": "A statement identifier that differentiates the statement from others in the same policy.",
                    "type": "string",
                    "pattern": "([a-zA-Z0-9-_]+)",
                    "minLength": 1,
                    "maxLength": 100
                  },
                  "Action": {
                    "description": "The action that the principal can use on the function. For example, <code>lambda:InvokeFunction</code> or <code>lambda:GetFunction</code>.",
                    "type": "string",
                    "pattern": "(lambda:[*]|lambda:[a-zA-Z]+|[*])"
                  },
                  "Principal": {
                    "description": "The AWS service or account that invokes the function. If you specify a service, use <code>SourceArn</code> or <code>SourceAccount</code> to limit who can invoke the function through that service.",
                    "type": "string",
                    "pattern": ".*"
                  },
                  "SourceArn": {
                    "description": "For AWS services, the ARN of the AWS resource that invokes the function. For example, an Amazon S3 bucket or Amazon SNS topic.",
                    "type": "string",
                    "pattern": "arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\\-])+:([a-z]{2}(-gov)?-[a-z]+-\\d{1})?:(\\d{12})?:(.*)"
                  },
                  "SourceAccount": {
                    "description": "For Amazon S3, the ID of the account that owns the resource. Use this together with <code>SourceArn</code> to ensure that the resource is owned by the specified account. It is possible for an Amazon S3 bucket to be deleted by its owner and recreated by another account.",
                    "type": "string",
                    "pattern": "\\d{12}",
                    "maxLength": 12
                  },
                  "EventSourceToken": {
                    "description": "For Alexa Smart Home functions, a token that must be supplied by the invoker.",
                    "type": "string",
                    "pattern": "[a-zA-Z0-9._\\-]+",
                    "minLength": 0,
                    "maxLength": 256
                  },
                  "RevisionId": {
                    "description": "Only update the policy if the revision ID matches the ID that's specified. Use this option to avoid modifying a policy that has changed since you last read it.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "summary": "Add Permission"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ],
      "get": {
        "operationId": "GetPolicy",
        "description": "Returns the <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html\">resource-based IAM policy</a> for a function, version, or alias.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPolicyResponse"
                }
              }
            }
          },
          "480": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          },
          "483": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "FunctionName",
            "in": "path",
            "required": true,
            "description": "<p>The name of the Lambda function, version, or alias.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code> (name-only), <code>my-function:v1</code> (with alias).</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "schema": {
              "type": "string",
              "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_\\.]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
              "minLength": 1,
              "maxLength": 170
            }
          },
          {
            "name": "Qualifier",
            "in": "query",
            "required": false,
            "description": "Specify a version or alias to get the policy for that resource.",
            "schema": {
              "type": "string",
              "pattern": "(|[a-zA-Z0-9$_-]+)",
              "minLength": 1,
              "maxLength": 128
            }
          }
        ],
        "summary": "Get Policy"
      }
    },
    "/2015-03-31/functions/{FunctionName}/aliases": {
      "post": {
        "operationId": "CreateAlias",
        "description": "<p>Creates an <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html\">alias</a> for a Lambda function version. Use aliases to provide clients with a function identifier that you can update to invoke a different version.</p> <p>You can also map an alias to split invocation requests between two versions. Use the <code>RoutingConfig</code> parameter to specify a second version and the percentage of invocation requests that it receives.</p>",
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AliasConfiguration"
                }
              }
            }
          },
          "480": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          },
          "482": {
            "description": "ResourceConflictException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceConflictException"
                }
              }
            }
          },
          "483": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "FunctionName",
            "in": "path",
            "required": true,
            "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "schema": {
              "type": "string",
              "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
              "minLength": 1,
              "maxLength": 140
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["Name", "FunctionVersion"],
                "properties": {
                  "Name": {
                    "description": "The name of the alias.",
                    "type": "string",
                    "pattern": "(?!^[0-9]+$)([a-zA-Z0-9-_]+)",
                    "minLength": 1,
                    "maxLength": 128
                  },
                  "FunctionVersion": {
                    "description": "The function version that the alias invokes.",
                    "type": "string",
                    "pattern": "(\\$LATEST|[0-9]+)",
                    "minLength": 1,
                    "maxLength": 1024
                  },
                  "Description": {
                    "description": "A description of the alias.",
                    "type": "string",
                    "minLength": 0,
                    "maxLength": 256
                  },
                  "RoutingConfig": {
                    "description": "The <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/lambda-traffic-shifting-using-aliases.html\">traffic-shifting</a> configuration of a Lambda function alias.",
                    "type": "object",
                    "properties": {
                      "AdditionalVersionWeights": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/AdditionalVersionWeights"
                          },
                          {
                            "description": "The second version, and the percentage of traffic that's routed to it."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Create Alias"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ],
      "get": {
        "operationId": "ListAliases",
        "description": "Returns a list of <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html\">aliases</a> for a Lambda function.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAliasesResponse"
                }
              }
            }
          },
          "480": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "FunctionName",
            "in": "path",
            "required": true,
            "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "schema": {
              "type": "string",
              "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
              "minLength": 1,
              "maxLength": 140
            }
          },
          {
            "name": "FunctionVersion",
            "in": "query",
            "required": false,
            "description": "Specify a function version to only list aliases that invoke that version.",
            "schema": {
              "type": "string",
              "pattern": "(\\$LATEST|[0-9]+)",
              "minLength": 1,
              "maxLength": 1024
            }
          },
          {
            "name": "Marker",
            "in": "query",
            "required": false,
            "description": "Specify the pagination token that's returned by a previous request to retrieve the next page of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "MaxItems",
            "in": "query",
            "required": false,
            "description": "Limit the number of aliases returned.",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "summary": "List Aliases"
      }
    },
    "/2015-03-31/event-source-mappings/": {
      "post": {
        "operationId": "CreateEventSourceMapping",
        "description": "<p>Creates a mapping between an event source and an AWS Lambda function. Lambda reads items from the event source and triggers the function.</p> <p>For details about each event source type, see the following topics.</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html\">Using AWS Lambda with Amazon DynamoDB</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/with-kinesis.html\">Using AWS Lambda with Amazon Kinesis</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html\">Using AWS Lambda with Amazon SQS</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/with-msk.html\">Using AWS Lambda with Amazon MSK</a> </p> </li> </ul> <p>The following error handling options are only available for stream sources (DynamoDB and Kinesis):</p> <ul> <li> <p> <code>BisectBatchOnFunctionError</code> - If the function returns an error, split the batch in two and retry.</p> </li> <li> <p> <code>DestinationConfig</code> - Send discarded records to an Amazon SQS queue or Amazon SNS topic.</p> </li> <li> <p> <code>MaximumRecordAgeInSeconds</code> - Discard records older than the specified age. Default -1 (infinite). Minimum 60. Maximum 604800.</p> </li> <li> <p> <code>MaximumRetryAttempts</code> - Discard records after the specified number of retries. Default -1 (infinite). Minimum 0. Maximum 10000. When infinite, failed records will be retried until the record expires.</p> </li> <li> <p> <code>ParallelizationFactor</code> - Process multiple batches from each shard concurrently.</p> </li> </ul>",
        "responses": {
          "202": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventSourceMappingConfiguration"
                }
              }
            }
          },
          "480": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          },
          "482": {
            "description": "ResourceConflictException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceConflictException"
                }
              }
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          },
          "484": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          }
        },
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["EventSourceArn", "FunctionName"],
                "properties": {
                  "EventSourceArn": {
                    "description": "<p>The Amazon Resource Name (ARN) of the event source.</p> <ul> <li> <p> <b>Amazon Kinesis</b> - The ARN of the data stream or a stream consumer.</p> </li> <li> <p> <b>Amazon DynamoDB Streams</b> - The ARN of the stream.</p> </li> <li> <p> <b>Amazon Simple Queue Service</b> - The ARN of the queue.</p> </li> <li> <p> <b>Amazon Managed Streaming for Apache Kafka</b> - The ARN of the cluster.</p> </li> </ul>",
                    "type": "string",
                    "pattern": "arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\\-])+:([a-z]{2}(-gov)?-[a-z]+-\\d{1})?:(\\d{12})?:(.*)"
                  },
                  "FunctionName": {
                    "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p> </li> <li> <p> <b>Version or Alias ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction:PROD</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it's limited to 64 characters in length.</p>",
                    "type": "string",
                    "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
                    "minLength": 1,
                    "maxLength": 140
                  },
                  "Enabled": {
                    "description": "If true, the event source mapping is active. Set to false to pause polling and invocation.",
                    "type": "boolean"
                  },
                  "BatchSize": {
                    "description": "<p>The maximum number of items to retrieve in a single batch.</p> <ul> <li> <p> <b>Amazon Kinesis</b> - Default 100. Max 10,000.</p> </li> <li> <p> <b>Amazon DynamoDB Streams</b> - Default 100. Max 1,000.</p> </li> <li> <p> <b>Amazon Simple Queue Service</b> - Default 10. Max 10.</p> </li> <li> <p> <b>Amazon Managed Streaming for Apache Kafka</b> - Default 100. Max 10,000.</p> </li> </ul>",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 10000
                  },
                  "MaximumBatchingWindowInSeconds": {
                    "description": "(Streams) The maximum amount of time to gather records before invoking the function, in seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 300
                  },
                  "ParallelizationFactor": {
                    "description": "(Streams) The number of batches to process from each shard concurrently.",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 10
                  },
                  "StartingPosition": {
                    "description": "The position in a stream from which to start reading. Required for Amazon Kinesis, Amazon DynamoDB, and Amazon MSK Streams sources. <code>AT_TIMESTAMP</code> is only supported for Amazon Kinesis streams.",
                    "type": "string",
                    "enum": ["TRIM_HORIZON", "LATEST", "AT_TIMESTAMP"]
                  },
                  "StartingPositionTimestamp": {
                    "description": "With <code>StartingPosition</code> set to <code>AT_TIMESTAMP</code>, the time from which to start reading.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "DestinationConfig": {
                    "description": "A configuration object that specifies the destination of an event after Lambda processes it.",
                    "type": "object",
                    "properties": {
                      "OnSuccess": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/OnSuccess"
                          },
                          {
                            "description": "The destination configuration for successful invocations."
                          }
                        ]
                      },
                      "OnFailure": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/OnFailure"
                          },
                          {
                            "description": "The destination configuration for failed invocations."
                          }
                        ]
                      }
                    }
                  },
                  "MaximumRecordAgeInSeconds": {
                    "description": "(Streams) Discard records older than the specified age. The default value is infinite (-1).",
                    "type": "integer",
                    "minimum": -1,
                    "maximum": 604800
                  },
                  "BisectBatchOnFunctionError": {
                    "description": "(Streams) If the function returns an error, split the batch in two and retry.",
                    "type": "boolean"
                  },
                  "MaximumRetryAttempts": {
                    "description": "(Streams) Discard records after the specified number of retries. The default value is infinite (-1). When set to infinite (-1), failed records will be retried until the record expires.",
                    "type": "integer",
                    "minimum": -1,
                    "maximum": 10000
                  },
                  "Topics": {
                    "description": " (MSK) The name of the Kafka topic. ",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Topic"
                    },
                    "minItems": 1,
                    "maxItems": 1
                  },
                  "Queues": {
                    "description": " (MQ) The name of the Amazon MQ broker destination queue to consume. ",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Queue"
                    },
                    "minItems": 1,
                    "maxItems": 1
                  },
                  "SourceAccessConfigurations": {
                    "description": "<p> (MQ) The Secrets Manager secret that stores your broker credentials. To store your secret, use the following format: <code> { \"username\": \"your username\", \"password\": \"your password\" }</code> </p> <p>To reference the secret, use the following format: <code>[ { \"Type\": \"BASIC_AUTH\", \"URI\": \"secretARN\" } ]</code> </p> <p>The value of <code>Type</code> is always <code>BASIC_AUTH</code>. To encrypt the secret, you can use customer or service managed keys. When using a customer managed KMS key, the Lambda execution role requires <code>kms:Decrypt</code> permissions.</p>",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SourceAccessConfiguration"
                    },
                    "minItems": 1,
                    "maxItems": 1
                  },
                  "TumblingWindowInSeconds": {
                    "description": "(Streams only) The duration in seconds of a processing window. The range is between 1 second up to 900 seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 900
                  },
                  "SelfManagedEventSource": {
                    "description": "The self-managed Apache Kafka cluster for your event source.",
                    "type": "object",
                    "properties": {
                      "Endpoints": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Endpoints"
                          },
                          {
                            "description": "The list of bootstrap servers for your Kafka brokers in the following format: <code>\"KAFKA_BOOTSTRAP_SERVERS\": [\"abc.xyz.com:xxxx\",\"abc2.xyz.com:xxxx\"]</code>."
                          }
                        ]
                      }
                    }
                  },
                  "FunctionResponseTypes": {
                    "description": "(Streams only) A list of current response type enums applied to the event source mapping.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/FunctionResponseType"
                    },
                    "minItems": 0,
                    "maxItems": 1
                  }
                }
              }
            }
          }
        },
        "summary": "Create Event Source Mapping"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ],
      "get": {
        "operationId": "ListEventSourceMappings",
        "description": "Lists event source mappings. Specify an <code>EventSourceArn</code> to only show event source mappings for a single event source.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListEventSourceMappingsResponse"
                }
              }
            }
          },
          "480": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "EventSourceArn",
            "in": "query",
            "required": false,
            "description": "<p>The Amazon Resource Name (ARN) of the event source.</p> <ul> <li> <p> <b>Amazon Kinesis</b> - The ARN of the data stream or a stream consumer.</p> </li> <li> <p> <b>Amazon DynamoDB Streams</b> - The ARN of the stream.</p> </li> <li> <p> <b>Amazon Simple Queue Service</b> - The ARN of the queue.</p> </li> <li> <p> <b>Amazon Managed Streaming for Apache Kafka</b> - The ARN of the cluster.</p> </li> </ul>",
            "schema": {
              "type": "string",
              "pattern": "arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\\-])+:([a-z]{2}(-gov)?-[a-z]+-\\d{1})?:(\\d{12})?:(.*)"
            }
          },
          {
            "name": "FunctionName",
            "in": "query",
            "required": false,
            "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p> </li> <li> <p> <b>Version or Alias ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction:PROD</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it's limited to 64 characters in length.</p>",
            "schema": {
              "type": "string",
              "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
              "minLength": 1,
              "maxLength": 140
            }
          },
          {
            "name": "Marker",
            "in": "query",
            "required": false,
            "description": "A pagination token returned by a previous call.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "MaxItems",
            "in": "query",
            "required": false,
            "description": "The maximum number of event source mappings to return.",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "summary": "List Event Source Mappings"
      }
    },
    "/2015-03-31/functions": {
      "post": {
        "operationId": "CreateFunction",
        "description": "<p>Creates a Lambda function. To create a function, you need a <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/deployment-package-v2.html\">deployment package</a> and an <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html#lambda-intro-execution-role\">execution role</a>. The deployment package contains your function code. The execution role grants the function permission to use AWS services, such as Amazon CloudWatch Logs for log streaming and AWS X-Ray for request tracing.</p> <p>When you create a function, Lambda provisions an instance of the function and its supporting resources. If your function connects to a VPC, this process can take a minute or so. During this time, you can't invoke or modify the function. The <code>State</code>, <code>StateReason</code>, and <code>StateReasonCode</code> fields in the response from <a>GetFunctionConfiguration</a> indicate when the function is ready to invoke. For more information, see <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/functions-states.html\">Function States</a>.</p> <p>A function has an unpublished version, and can have published versions and aliases. The unpublished version changes when you update your function's code and configuration. A published version is a snapshot of your function code and configuration that can't be changed. An alias is a named resource that maps to a version, and can be changed to map to a different version. Use the <code>Publish</code> parameter to create version <code>1</code> of your function from its initial configuration.</p> <p>The other parameters let you configure version-specific and function-level settings. You can modify version-specific settings later with <a>UpdateFunctionConfiguration</a>. Function-level settings apply to both the unpublished and published versions of the function, and include tags (<a>TagResource</a>) and per-function concurrency limits (<a>PutFunctionConcurrency</a>).</p> <p>If another account or an AWS service invokes your function, use <a>AddPermission</a> to grant permission by creating a resource-based IAM policy. You can grant permissions at the function level, on a version, or on an alias.</p> <p>To invoke your function directly, use <a>Invoke</a>. To invoke your function in response to events in other AWS services, create an event source mapping (<a>CreateEventSourceMapping</a>), or configure a function trigger in the other service. For more information, see <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/lambda-invocation.html\">Invoking Functions</a>.</p>",
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunctionConfiguration"
                }
              }
            }
          },
          "480": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          },
          "483": {
            "description": "ResourceConflictException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceConflictException"
                }
              }
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          },
          "485": {
            "description": "CodeStorageExceededException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CodeStorageExceededException"
                }
              }
            }
          },
          "486": {
            "description": "CodeVerificationFailedException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CodeVerificationFailedException"
                }
              }
            }
          },
          "487": {
            "description": "InvalidCodeSignatureException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidCodeSignatureException"
                }
              }
            }
          },
          "488": {
            "description": "CodeSigningConfigNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CodeSigningConfigNotFoundException"
                }
              }
            }
          }
        },
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["FunctionName", "Runtime", "Role", "Handler", "Code"],
                "properties": {
                  "FunctionName": {
                    "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
                    "type": "string",
                    "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
                    "minLength": 1,
                    "maxLength": 140
                  },
                  "Runtime": {
                    "description": "The identifier of the function's <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html\">runtime</a>.",
                    "type": "string",
                    "enum": [
                      "nodejs",
                      "nodejs4.3",
                      "nodejs6.10",
                      "nodejs8.10",
                      "nodejs10.x",
                      "nodejs12.x",
                      "java8",
                      "java8.al2",
                      "java11",
                      "python2.7",
                      "python3.6",
                      "python3.7",
                      "python3.8",
                      "dotnetcore1.0",
                      "dotnetcore2.0",
                      "dotnetcore2.1",
                      "dotnetcore3.1",
                      "nodejs4.3-edge",
                      "go1.x",
                      "ruby2.5",
                      "ruby2.7",
                      "provided",
                      "provided.al2",
                      "provided",
                      "provided.al2"
                    ]
                  },
                  "Role": {
                    "description": "The Amazon Resource Name (ARN) of the function's execution role.",
                    "type": "string",
                    "pattern": "arn:(aws[a-zA-Z-]*)?:iam::\\d{12}:role/?[a-zA-Z_0-9+=,.@\\-_/]+"
                  },
                  "Handler": {
                    "description": "The name of the method within your code that Lambda calls to execute your function. The format includes the file name. It can also include namespaces and other qualifiers, depending on the runtime. For more information, see <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/programming-model-v2.html\">Programming Model</a>.",
                    "type": "string",
                    "pattern": "[^\\s]+",
                    "maxLength": 128
                  },
                  "Code": {
                    "description": "The code for the Lambda function. You can specify either an object in Amazon S3, or upload a deployment package directly.",
                    "type": "object",
                    "properties": {
                      "ZipFile": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Blob"
                          },
                          {
                            "description": "The base64-encoded contents of the deployment package. AWS SDK and AWS CLI clients handle the encoding for you."
                          }
                        ]
                      },
                      "S3Bucket": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/S3Bucket"
                          },
                          {
                            "description": "An Amazon S3 bucket in the same AWS Region as your function. The bucket can be in a different AWS account."
                          }
                        ]
                      },
                      "S3Key": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/S3Key"
                          },
                          {
                            "description": "The Amazon S3 key of the deployment package."
                          }
                        ]
                      },
                      "S3ObjectVersion": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/S3ObjectVersion"
                          },
                          {
                            "description": "For versioned objects, the version of the deployment package object to use."
                          }
                        ]
                      },
                      "ImageUri": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/String"
                          },
                          {
                            "description": "URI of a <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/lambda-images.html\">container image</a> in the Amazon ECR registry."
                          }
                        ]
                      }
                    }
                  },
                  "Description": {
                    "description": "A description of the function.",
                    "type": "string",
                    "minLength": 0,
                    "maxLength": 256
                  },
                  "Timeout": {
                    "description": "The amount of time that Lambda allows a function to run before stopping it. The default is 3 seconds. The maximum allowed value is 900 seconds.",
                    "type": "integer",
                    "minimum": 1
                  },
                  "MemorySize": {
                    "description": "The amount of memory that your function has access to. Increasing the function's memory also increases its CPU allocation. The default value is 128 MB. The value must be a multiple of 64 MB.",
                    "type": "integer",
                    "minimum": 128,
                    "maximum": 3008
                  },
                  "Publish": {
                    "description": "Set to true to publish the first version of the function during creation.",
                    "type": "boolean"
                  },
                  "VpcConfig": {
                    "description": "The VPC security groups and subnets that are attached to a Lambda function. For more information, see <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html\">VPC Settings</a>.",
                    "type": "object",
                    "properties": {
                      "SubnetIds": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/SubnetIds"
                          },
                          {
                            "description": "A list of VPC subnet IDs."
                          }
                        ]
                      },
                      "SecurityGroupIds": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/SecurityGroupIds"
                          },
                          {
                            "description": "A list of VPC security groups IDs."
                          }
                        ]
                      }
                    }
                  },
                  "DeadLetterConfig": {
                    "description": "The <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#dlq\">dead-letter queue</a> for failed asynchronous invocations.",
                    "type": "object",
                    "properties": {
                      "TargetArn": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/ResourceArn"
                          },
                          {
                            "description": "The Amazon Resource Name (ARN) of an Amazon SQS queue or Amazon SNS topic."
                          }
                        ]
                      }
                    }
                  },
                  "Environment": {
                    "description": "A function's environment variable settings.",
                    "type": "object",
                    "properties": {
                      "Variables": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/EnvironmentVariables"
                          },
                          {
                            "description": "Environment variable key-value pairs."
                          }
                        ]
                      }
                    }
                  },
                  "KMSKeyArn": {
                    "description": "The ARN of the AWS Key Management Service (AWS KMS) key that's used to encrypt your function's environment variables. If it's not provided, AWS Lambda uses a default service key.",
                    "type": "string",
                    "pattern": "(arn:(aws[a-zA-Z-]*)?:[a-z0-9-.]+:.*)|()"
                  },
                  "TracingConfig": {
                    "description": "The function's AWS X-Ray tracing configuration. To sample and record incoming requests, set <code>Mode</code> to <code>Active</code>.",
                    "type": "object",
                    "properties": {
                      "Mode": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/TracingMode"
                          },
                          {
                            "description": "The tracing mode."
                          }
                        ]
                      }
                    }
                  },
                  "Tags": {
                    "description": "A list of <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/tagging.html\">tags</a> to apply to the function.",
                    "type": "object",
                    "additionalProperties": {
                      "$ref": "#/components/schemas/TagValue"
                    }
                  },
                  "Layers": {
                    "description": "A list of <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\">function layers</a> to add to the function's execution environment. Specify each layer by its ARN, including the version.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LayerVersionArn"
                    }
                  },
                  "FileSystemConfigs": {
                    "description": "Connection settings for an Amazon EFS file system.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/FileSystemConfig"
                    },
                    "maxItems": 1
                  },
                  "CodeSigningConfigArn": {
                    "description": "To enable code signing for this function, specify the ARN of a code-signing configuration. A code-signing configuration includes set set of signing profiles, which define the trusted publishers for this function.",
                    "type": "string",
                    "pattern": "arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\\d{1}:\\d{12}:code-signing-config:csc-[a-z0-9]{17}",
                    "maxLength": 200
                  },
                  "PackageType": {
                    "description": "The type of deployment package. Set to <code>Image</code> for container image and set <code>Zip</code> for ZIP archive.",
                    "type": "string",
                    "enum": ["Zip", "Image"]
                  },
                  "ImageConfig": {
                    "description": "Configuration values that override the container image Dockerfile settings. See <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/images-create.html#images-parms\">Container settings</a>. ",
                    "type": "object",
                    "properties": {
                      "EntryPoint": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/StringList"
                          },
                          {
                            "description": "Specifies the entry point to their application, which is typically the location of the runtime executable."
                          }
                        ]
                      },
                      "Command": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/StringList"
                          },
                          {
                            "description": "Specifies parameters that you want to pass in with ENTRYPOINT. "
                          }
                        ]
                      },
                      "WorkingDirectory": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/WorkingDirectory"
                          },
                          {
                            "description": "Specifies the working directory."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Create Function"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/2015-03-31/functions/{FunctionName}/aliases/{Name}": {
      "delete": {
        "operationId": "DeleteAlias",
        "description": "Deletes a Lambda function <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html\">alias</a>.",
        "responses": {
          "204": {
            "description": "Success"
          },
          "480": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          },
          "482": {
            "description": "ResourceConflictException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceConflictException"
                }
              }
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "FunctionName",
            "in": "path",
            "required": true,
            "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "schema": {
              "type": "string",
              "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
              "minLength": 1,
              "maxLength": 140
            }
          },
          {
            "name": "Name",
            "in": "path",
            "required": true,
            "description": "The name of the alias.",
            "schema": {
              "type": "string",
              "pattern": "(?!^[0-9]+$)([a-zA-Z0-9-_]+)",
              "minLength": 1,
              "maxLength": 128
            }
          }
        ],
        "summary": "Delete Alias"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ],
      "get": {
        "operationId": "GetAlias",
        "description": "Returns details about a Lambda function <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html\">alias</a>.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AliasConfiguration"
                }
              }
            }
          },
          "480": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "FunctionName",
            "in": "path",
            "required": true,
            "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "schema": {
              "type": "string",
              "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
              "minLength": 1,
              "maxLength": 140
            }
          },
          {
            "name": "Name",
            "in": "path",
            "required": true,
            "description": "The name of the alias.",
            "schema": {
              "type": "string",
              "pattern": "(?!^[0-9]+$)([a-zA-Z0-9-_]+)",
              "minLength": 1,
              "maxLength": 128
            }
          }
        ],
        "summary": "Get Alias"
      },
      "put": {
        "operationId": "UpdateAlias",
        "description": "Updates the configuration of a Lambda function <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html\">alias</a>.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AliasConfiguration"
                }
              }
            }
          },
          "480": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          },
          "484": {
            "description": "PreconditionFailedException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreconditionFailedException"
                }
              }
            }
          },
          "485": {
            "description": "ResourceConflictException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceConflictException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "FunctionName",
            "in": "path",
            "required": true,
            "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "schema": {
              "type": "string",
              "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
              "minLength": 1,
              "maxLength": 140
            }
          },
          {
            "name": "Name",
            "in": "path",
            "required": true,
            "description": "The name of the alias.",
            "schema": {
              "type": "string",
              "pattern": "(?!^[0-9]+$)([a-zA-Z0-9-_]+)",
              "minLength": 1,
              "maxLength": 128
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "FunctionVersion": {
                    "description": "The function version that the alias invokes.",
                    "type": "string",
                    "pattern": "(\\$LATEST|[0-9]+)",
                    "minLength": 1,
                    "maxLength": 1024
                  },
                  "Description": {
                    "description": "A description of the alias.",
                    "type": "string",
                    "minLength": 0,
                    "maxLength": 256
                  },
                  "RoutingConfig": {
                    "description": "The <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/lambda-traffic-shifting-using-aliases.html\">traffic-shifting</a> configuration of a Lambda function alias.",
                    "type": "object",
                    "properties": {
                      "AdditionalVersionWeights": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/AdditionalVersionWeights"
                          },
                          {
                            "description": "The second version, and the percentage of traffic that's routed to it."
                          }
                        ]
                      }
                    }
                  },
                  "RevisionId": {
                    "description": "Only update the alias if the revision ID matches the ID that's specified. Use this option to avoid modifying an alias that has changed since you last read it.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "summary": "Update Alias"
      }
    },
    "/2015-03-31/event-source-mappings/{UUID}": {
      "delete": {
        "operationId": "DeleteEventSourceMapping",
        "description": "<p>Deletes an <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/intro-invocation-modes.html\">event source mapping</a>. You can get the identifier of a mapping from the output of <a>ListEventSourceMappings</a>.</p> <p>When you delete an event source mapping, it enters a <code>Deleting</code> state and might not be completely deleted for several seconds.</p>",
        "responses": {
          "202": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventSourceMappingConfiguration"
                }
              }
            }
          },
          "480": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          },
          "484": {
            "description": "ResourceInUseException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInUseException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "UUID",
            "in": "path",
            "required": true,
            "description": "The identifier of the event source mapping.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Delete Event Source Mapping"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ],
      "get": {
        "operationId": "GetEventSourceMapping",
        "description": "Returns details about an event source mapping. You can get the identifier of a mapping from the output of <a>ListEventSourceMappings</a>.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventSourceMappingConfiguration"
                }
              }
            }
          },
          "480": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "UUID",
            "in": "path",
            "required": true,
            "description": "The identifier of the event source mapping.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Get Event Source Mapping"
      },
      "put": {
        "operationId": "UpdateEventSourceMapping",
        "description": "<p>Updates an event source mapping. You can change the function that AWS Lambda invokes, or pause invocation and resume later from the same location.</p> <p>The following error handling options are only available for stream sources (DynamoDB and Kinesis):</p> <ul> <li> <p> <code>BisectBatchOnFunctionError</code> - If the function returns an error, split the batch in two and retry.</p> </li> <li> <p> <code>DestinationConfig</code> - Send discarded records to an Amazon SQS queue or Amazon SNS topic.</p> </li> <li> <p> <code>MaximumRecordAgeInSeconds</code> - Discard records older than the specified age. Default -1 (infinite). Minimum 60. Maximum 604800.</p> </li> <li> <p> <code>MaximumRetryAttempts</code> - Discard records after the specified number of retries. Default -1 (infinite). Minimum 0. Maximum 10000. When infinite, failed records will be retried until the record expires.</p> </li> <li> <p> <code>ParallelizationFactor</code> - Process multiple batches from each shard concurrently.</p> </li> </ul>",
        "responses": {
          "202": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventSourceMappingConfiguration"
                }
              }
            }
          },
          "480": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          },
          "484": {
            "description": "ResourceConflictException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceConflictException"
                }
              }
            }
          },
          "485": {
            "description": "ResourceInUseException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceInUseException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "UUID",
            "in": "path",
            "required": true,
            "description": "The identifier of the event source mapping.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "FunctionName": {
                    "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p> </li> <li> <p> <b>Version or Alias ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction:PROD</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it's limited to 64 characters in length.</p>",
                    "type": "string",
                    "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
                    "minLength": 1,
                    "maxLength": 140
                  },
                  "Enabled": {
                    "description": "If true, the event source mapping is active. Set to false to pause polling and invocation.",
                    "type": "boolean"
                  },
                  "BatchSize": {
                    "description": "<p>The maximum number of items to retrieve in a single batch.</p> <ul> <li> <p> <b>Amazon Kinesis</b> - Default 100. Max 10,000.</p> </li> <li> <p> <b>Amazon DynamoDB Streams</b> - Default 100. Max 1,000.</p> </li> <li> <p> <b>Amazon Simple Queue Service</b> - Default 10. Max 10.</p> </li> <li> <p> <b>Amazon Managed Streaming for Apache Kafka</b> - Default 100. Max 10,000.</p> </li> </ul>",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 10000
                  },
                  "MaximumBatchingWindowInSeconds": {
                    "description": "(Streams) The maximum amount of time to gather records before invoking the function, in seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 300
                  },
                  "DestinationConfig": {
                    "description": "A configuration object that specifies the destination of an event after Lambda processes it.",
                    "type": "object",
                    "properties": {
                      "OnSuccess": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/OnSuccess"
                          },
                          {
                            "description": "The destination configuration for successful invocations."
                          }
                        ]
                      },
                      "OnFailure": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/OnFailure"
                          },
                          {
                            "description": "The destination configuration for failed invocations."
                          }
                        ]
                      }
                    }
                  },
                  "MaximumRecordAgeInSeconds": {
                    "description": "(Streams) Discard records older than the specified age. The default value is infinite (-1).",
                    "type": "integer",
                    "minimum": -1,
                    "maximum": 604800
                  },
                  "BisectBatchOnFunctionError": {
                    "description": "(Streams) If the function returns an error, split the batch in two and retry.",
                    "type": "boolean"
                  },
                  "MaximumRetryAttempts": {
                    "description": "(Streams) Discard records after the specified number of retries. The default value is infinite (-1). When set to infinite (-1), failed records will be retried until the record expires.",
                    "type": "integer",
                    "minimum": -1,
                    "maximum": 10000
                  },
                  "ParallelizationFactor": {
                    "description": "(Streams) The number of batches to process from each shard concurrently.",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 10
                  },
                  "SourceAccessConfigurations": {
                    "description": "<p> (MQ) The Secrets Manager secret that stores your broker credentials. To store your secret, use the following format: <code> { \"username\": \"your username\", \"password\": \"your password\" }</code> </p> <p>To reference the secret, use the following format: <code>[ { \"Type\": \"BASIC_AUTH\", \"URI\": \"secretARN\" } ]</code> </p> <p>The value of <code>Type</code> is always <code>BASIC_AUTH</code>. To encrypt the secret, you can use customer or service managed keys. When using a customer managed KMS key, the Lambda execution role requires <code>kms:Decrypt</code> permissions.</p>",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SourceAccessConfiguration"
                    },
                    "minItems": 1,
                    "maxItems": 1
                  },
                  "TumblingWindowInSeconds": {
                    "description": "(Streams only) The duration in seconds of a processing window. The range is between 1 second up to 900 seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 900
                  },
                  "FunctionResponseTypes": {
                    "description": "(Streams only) A list of current response type enums applied to the event source mapping.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/FunctionResponseType"
                    },
                    "minItems": 0,
                    "maxItems": 1
                  }
                }
              }
            }
          }
        },
        "summary": "Update Event Source Mapping"
      }
    },
    "/2015-03-31/functions/{FunctionName}": {
      "delete": {
        "operationId": "DeleteFunction",
        "description": "<p>Deletes a Lambda function. To delete a specific function version, use the <code>Qualifier</code> parameter. Otherwise, all versions and aliases are deleted.</p> <p>To delete Lambda event source mappings that invoke a function, use <a>DeleteEventSourceMapping</a>. For AWS services and resources that invoke your function directly, delete the trigger in the service where you originally configured it.</p>",
        "responses": {
          "204": {
            "description": "Success"
          },
          "480": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          },
          "483": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          },
          "484": {
            "description": "ResourceConflictException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceConflictException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "FunctionName",
            "in": "path",
            "required": true,
            "description": "<p>The name of the Lambda function or version.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code> (name-only), <code>my-function:1</code> (with version).</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "schema": {
              "type": "string",
              "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
              "minLength": 1,
              "maxLength": 140
            }
          },
          {
            "name": "Qualifier",
            "in": "query",
            "required": false,
            "description": "Specify a version to delete. You can't delete a version that's referenced by an alias.",
            "schema": {
              "type": "string",
              "pattern": "(|[a-zA-Z0-9$_-]+)",
              "minLength": 1,
              "maxLength": 128
            }
          }
        ],
        "summary": "Delete Function"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ],
      "get": {
        "operationId": "GetFunction",
        "description": "Returns information about the function or function version, with a link to download the deployment package that's valid for 10 minutes. If you specify a function version, only details that are specific to that version are returned.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFunctionResponse"
                }
              }
            }
          },
          "480": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          },
          "483": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "FunctionName",
            "in": "path",
            "required": true,
            "description": "<p>The name of the Lambda function, version, or alias.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code> (name-only), <code>my-function:v1</code> (with alias).</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "schema": {
              "type": "string",
              "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_\\.]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
              "minLength": 1,
              "maxLength": 170
            }
          },
          {
            "name": "Qualifier",
            "in": "query",
            "required": false,
            "description": "Specify a version or alias to get details about a published version of the function.",
            "schema": {
              "type": "string",
              "pattern": "(|[a-zA-Z0-9$_-]+)",
              "minLength": 1,
              "maxLength": 128
            }
          }
        ],
        "summary": "Get Function"
      }
    },
    "/2017-10-31/functions/{FunctionName}/concurrency": {
      "delete": {
        "operationId": "DeleteFunctionConcurrency",
        "description": "Removes a concurrent execution limit from a function.",
        "responses": {
          "204": {
            "description": "Success"
          },
          "480": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          },
          "483": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          },
          "484": {
            "description": "ResourceConflictException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceConflictException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "FunctionName",
            "in": "path",
            "required": true,
            "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "schema": {
              "type": "string",
              "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
              "minLength": 1,
              "maxLength": 140
            }
          }
        ],
        "summary": "Delete Function Concurrency"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ],
      "put": {
        "operationId": "PutFunctionConcurrency",
        "description": "<p>Sets the maximum number of simultaneous executions for a function, and reserves capacity for that concurrency level.</p> <p>Concurrency settings apply to the function as a whole, including all published versions and the unpublished version. Reserving concurrency both ensures that your function has capacity to process the specified number of events simultaneously, and prevents it from scaling beyond that level. Use <a>GetFunction</a> to see the current setting for a function.</p> <p>Use <a>GetAccountSettings</a> to see your Regional concurrency limit. You can reserve concurrency for as many functions as you like, as long as you leave at least 100 simultaneous executions unreserved for functions that aren't configured with a per-function limit. For more information, see <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/concurrent-executions.html\">Managing Concurrency</a>.</p>",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Concurrency"
                }
              }
            }
          },
          "480": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          },
          "484": {
            "description": "ResourceConflictException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceConflictException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "FunctionName",
            "in": "path",
            "required": true,
            "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "schema": {
              "type": "string",
              "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
              "minLength": 1,
              "maxLength": 140
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["ReservedConcurrentExecutions"],
                "properties": {
                  "ReservedConcurrentExecutions": {
                    "description": "The number of simultaneous executions to reserve for the function.",
                    "type": "integer",
                    "minimum": 0
                  }
                }
              }
            }
          }
        },
        "summary": "Put Function Concurrency"
      }
    },
    "/2019-09-25/functions/{FunctionName}/event-invoke-config": {
      "delete": {
        "operationId": "DeleteFunctionEventInvokeConfig",
        "description": "<p>Deletes the configuration for asynchronous invocation for a function, version, or alias.</p> <p>To configure options for asynchronous invocation, use <a>PutFunctionEventInvokeConfig</a>.</p>",
        "responses": {
          "204": {
            "description": "Success"
          },
          "480": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          },
          "484": {
            "description": "ResourceConflictException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceConflictException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "FunctionName",
            "in": "path",
            "required": true,
            "description": "<p>The name of the Lambda function, version, or alias.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code> (name-only), <code>my-function:v1</code> (with alias).</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "schema": {
              "type": "string",
              "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
              "minLength": 1,
              "maxLength": 140
            }
          },
          {
            "name": "Qualifier",
            "in": "query",
            "required": false,
            "description": "A version number or alias name.",
            "schema": {
              "type": "string",
              "pattern": "(|[a-zA-Z0-9$_-]+)",
              "minLength": 1,
              "maxLength": 128
            }
          }
        ],
        "summary": "Delete Function Event Invoke Config"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ],
      "get": {
        "operationId": "GetFunctionEventInvokeConfig",
        "description": "<p>Retrieves the configuration for asynchronous invocation for a function, version, or alias.</p> <p>To configure options for asynchronous invocation, use <a>PutFunctionEventInvokeConfig</a>.</p>",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunctionEventInvokeConfig"
                }
              }
            }
          },
          "480": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "FunctionName",
            "in": "path",
            "required": true,
            "description": "<p>The name of the Lambda function, version, or alias.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code> (name-only), <code>my-function:v1</code> (with alias).</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "schema": {
              "type": "string",
              "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
              "minLength": 1,
              "maxLength": 140
            }
          },
          {
            "name": "Qualifier",
            "in": "query",
            "required": false,
            "description": "A version number or alias name.",
            "schema": {
              "type": "string",
              "pattern": "(|[a-zA-Z0-9$_-]+)",
              "minLength": 1,
              "maxLength": 128
            }
          }
        ],
        "summary": "Get Function Event Invoke Config"
      },
      "put": {
        "operationId": "PutFunctionEventInvokeConfig",
        "description": "<p>Configures options for <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html\">asynchronous invocation</a> on a function, version, or alias. If a configuration already exists for a function, version, or alias, this operation overwrites it. If you exclude any settings, they are removed. To set one option without affecting existing settings for other options, use <a>UpdateFunctionEventInvokeConfig</a>.</p> <p>By default, Lambda retries an asynchronous invocation twice if the function returns an error. It retains events in a queue for up to six hours. When an event fails all processing attempts or stays in the asynchronous invocation queue for too long, Lambda discards it. To retain discarded events, configure a dead-letter queue with <a>UpdateFunctionConfiguration</a>.</p> <p>To send an invocation record to a queue, topic, function, or event bus, specify a <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#invocation-async-destinations\">destination</a>. You can configure separate destinations for successful invocations (on-success) and events that fail all processing attempts (on-failure). You can configure destinations in addition to or instead of a dead-letter queue.</p>",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunctionEventInvokeConfig"
                }
              }
            }
          },
          "480": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          },
          "484": {
            "description": "ResourceConflictException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceConflictException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "FunctionName",
            "in": "path",
            "required": true,
            "description": "<p>The name of the Lambda function, version, or alias.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code> (name-only), <code>my-function:v1</code> (with alias).</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "schema": {
              "type": "string",
              "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
              "minLength": 1,
              "maxLength": 140
            }
          },
          {
            "name": "Qualifier",
            "in": "query",
            "required": false,
            "description": "A version number or alias name.",
            "schema": {
              "type": "string",
              "pattern": "(|[a-zA-Z0-9$_-]+)",
              "minLength": 1,
              "maxLength": 128
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "MaximumRetryAttempts": {
                    "description": "The maximum number of times to retry when the function returns an error.",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 2
                  },
                  "MaximumEventAgeInSeconds": {
                    "description": "The maximum age of a request that Lambda sends to a function for processing.",
                    "type": "integer",
                    "minimum": 60,
                    "maximum": 21600
                  },
                  "DestinationConfig": {
                    "description": "A configuration object that specifies the destination of an event after Lambda processes it.",
                    "type": "object",
                    "properties": {
                      "OnSuccess": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/OnSuccess"
                          },
                          {
                            "description": "The destination configuration for successful invocations."
                          }
                        ]
                      },
                      "OnFailure": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/OnFailure"
                          },
                          {
                            "description": "The destination configuration for failed invocations."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Put Function Event Invoke Config"
      },
      "post": {
        "operationId": "UpdateFunctionEventInvokeConfig",
        "description": "<p>Updates the configuration for asynchronous invocation for a function, version, or alias.</p> <p>To configure options for asynchronous invocation, use <a>PutFunctionEventInvokeConfig</a>.</p>",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunctionEventInvokeConfig"
                }
              }
            }
          },
          "480": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          },
          "484": {
            "description": "ResourceConflictException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceConflictException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "FunctionName",
            "in": "path",
            "required": true,
            "description": "<p>The name of the Lambda function, version, or alias.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code> (name-only), <code>my-function:v1</code> (with alias).</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "schema": {
              "type": "string",
              "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
              "minLength": 1,
              "maxLength": 140
            }
          },
          {
            "name": "Qualifier",
            "in": "query",
            "required": false,
            "description": "A version number or alias name.",
            "schema": {
              "type": "string",
              "pattern": "(|[a-zA-Z0-9$_-]+)",
              "minLength": 1,
              "maxLength": 128
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "MaximumRetryAttempts": {
                    "description": "The maximum number of times to retry when the function returns an error.",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 2
                  },
                  "MaximumEventAgeInSeconds": {
                    "description": "The maximum age of a request that Lambda sends to a function for processing.",
                    "type": "integer",
                    "minimum": 60,
                    "maximum": 21600
                  },
                  "DestinationConfig": {
                    "description": "A configuration object that specifies the destination of an event after Lambda processes it.",
                    "type": "object",
                    "properties": {
                      "OnSuccess": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/OnSuccess"
                          },
                          {
                            "description": "The destination configuration for successful invocations."
                          }
                        ]
                      },
                      "OnFailure": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/OnFailure"
                          },
                          {
                            "description": "The destination configuration for failed invocations."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Update Function Event Invoke Config"
      }
    },
    "/2018-10-31/layers/{LayerName}/versions/{VersionNumber}": {
      "delete": {
        "operationId": "DeleteLayerVersion",
        "description": "Deletes a version of an <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\">AWS Lambda layer</a>. Deleted versions can no longer be viewed or added to functions. To avoid breaking functions, a copy of the version remains in Lambda until no functions refer to it.",
        "responses": {
          "204": {
            "description": "Success"
          },
          "480": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "481": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "LayerName",
            "in": "path",
            "required": true,
            "description": "The name or Amazon Resource Name (ARN) of the layer.",
            "schema": {
              "type": "string",
              "pattern": "(arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\\d{12}:layer:[a-zA-Z0-9-_]+)|[a-zA-Z0-9-_]+",
              "minLength": 1,
              "maxLength": 140
            }
          },
          {
            "name": "VersionNumber",
            "in": "path",
            "required": true,
            "description": "The version number.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Delete Layer Version"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ],
      "get": {
        "operationId": "GetLayerVersion",
        "description": "Returns information about a version of an <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\">AWS Lambda layer</a>, with a link to download the layer archive that's valid for 10 minutes.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLayerVersionResponse"
                }
              }
            }
          },
          "480": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "LayerName",
            "in": "path",
            "required": true,
            "description": "The name or Amazon Resource Name (ARN) of the layer.",
            "schema": {
              "type": "string",
              "pattern": "(arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\\d{12}:layer:[a-zA-Z0-9-_]+)|[a-zA-Z0-9-_]+",
              "minLength": 1,
              "maxLength": 140
            }
          },
          {
            "name": "VersionNumber",
            "in": "path",
            "required": true,
            "description": "The version number.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Get Layer Version"
      }
    },
    "/2019-09-30/functions/{FunctionName}/provisioned-concurrency#Qualifier": {
      "delete": {
        "operationId": "DeleteProvisionedConcurrencyConfig",
        "description": "Deletes the provisioned concurrency configuration for a function.",
        "responses": {
          "204": {
            "description": "Success"
          },
          "480": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          },
          "481": {
            "description": "ResourceConflictException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceConflictException"
                }
              }
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          },
          "484": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "FunctionName",
            "in": "path",
            "required": true,
            "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "schema": {
              "type": "string",
              "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
              "minLength": 1,
              "maxLength": 140
            }
          },
          {
            "name": "Qualifier",
            "in": "query",
            "required": true,
            "description": "The version number or alias name.",
            "schema": {
              "type": "string",
              "pattern": "(|[a-zA-Z0-9$_-]+)",
              "minLength": 1,
              "maxLength": 128
            }
          }
        ],
        "summary": "Delete Provisioned Concurrency Config"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ],
      "get": {
        "operationId": "GetProvisionedConcurrencyConfig",
        "description": "Retrieves the provisioned concurrency configuration for a function's alias or version.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetProvisionedConcurrencyConfigResponse"
                }
              }
            }
          },
          "480": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          },
          "483": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "484": {
            "description": "ProvisionedConcurrencyConfigNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProvisionedConcurrencyConfigNotFoundException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "FunctionName",
            "in": "path",
            "required": true,
            "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "schema": {
              "type": "string",
              "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
              "minLength": 1,
              "maxLength": 140
            }
          },
          {
            "name": "Qualifier",
            "in": "query",
            "required": true,
            "description": "The version number or alias name.",
            "schema": {
              "type": "string",
              "pattern": "(|[a-zA-Z0-9$_-]+)",
              "minLength": 1,
              "maxLength": 128
            }
          }
        ],
        "summary": "Get Provisioned Concurrency Config"
      },
      "put": {
        "operationId": "PutProvisionedConcurrencyConfig",
        "description": "Adds a provisioned concurrency configuration to a function's alias or version.",
        "responses": {
          "202": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PutProvisionedConcurrencyConfigResponse"
                }
              }
            }
          },
          "480": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          },
          "482": {
            "description": "ResourceConflictException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceConflictException"
                }
              }
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          },
          "484": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "FunctionName",
            "in": "path",
            "required": true,
            "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "schema": {
              "type": "string",
              "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
              "minLength": 1,
              "maxLength": 140
            }
          },
          {
            "name": "Qualifier",
            "in": "query",
            "required": true,
            "description": "The version number or alias name.",
            "schema": {
              "type": "string",
              "pattern": "(|[a-zA-Z0-9$_-]+)",
              "minLength": 1,
              "maxLength": 128
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["ProvisionedConcurrentExecutions"],
                "properties": {
                  "ProvisionedConcurrentExecutions": {
                    "description": "The amount of provisioned concurrency to allocate for the version or alias.",
                    "type": "integer",
                    "minimum": 1
                  }
                }
              }
            }
          }
        },
        "summary": "Put Provisioned Concurrency Config"
      }
    },
    "/2016-08-19/account-settings/": {
      "get": {
        "operationId": "GetAccountSettings",
        "description": "Retrieves details about your account's <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/limits.html\">limits</a> and usage in an AWS Region.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAccountSettingsResponse"
                }
              }
            }
          },
          "480": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          },
          "481": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          }
        },
        "parameters": [],
        "summary": "Get Account Settings"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/2019-09-30/functions/{FunctionName}/concurrency": {
      "get": {
        "operationId": "GetFunctionConcurrency",
        "description": "Returns details about the reserved concurrency configuration for a function. To set a concurrency limit for a function, use <a>PutFunctionConcurrency</a>.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFunctionConcurrencyResponse"
                }
              }
            }
          },
          "480": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          },
          "483": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "FunctionName",
            "in": "path",
            "required": true,
            "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "schema": {
              "type": "string",
              "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
              "minLength": 1,
              "maxLength": 140
            }
          }
        ],
        "summary": "Get Function Concurrency"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/2015-03-31/functions/{FunctionName}/configuration": {
      "get": {
        "operationId": "GetFunctionConfiguration",
        "description": "<p>Returns the version-specific settings of a Lambda function or version. The output includes only options that can vary between versions of a function. To modify these settings, use <a>UpdateFunctionConfiguration</a>.</p> <p>To get all of a function's details, including function-level settings, use <a>GetFunction</a>.</p>",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunctionConfiguration"
                }
              }
            }
          },
          "480": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          },
          "483": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "FunctionName",
            "in": "path",
            "required": true,
            "description": "<p>The name of the Lambda function, version, or alias.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code> (name-only), <code>my-function:v1</code> (with alias).</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "schema": {
              "type": "string",
              "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_\\.]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
              "minLength": 1,
              "maxLength": 170
            }
          },
          {
            "name": "Qualifier",
            "in": "query",
            "required": false,
            "description": "Specify a version or alias to get details about a published version of the function.",
            "schema": {
              "type": "string",
              "pattern": "(|[a-zA-Z0-9$_-]+)",
              "minLength": 1,
              "maxLength": 128
            }
          }
        ],
        "summary": "Get Function Configuration"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ],
      "put": {
        "operationId": "UpdateFunctionConfiguration",
        "description": "<p>Modify the version-specific settings of a Lambda function.</p> <p>When you update a function, Lambda provisions an instance of the function and its supporting resources. If your function connects to a VPC, this process can take a minute. During this time, you can't modify the function, but you can still invoke it. The <code>LastUpdateStatus</code>, <code>LastUpdateStatusReason</code>, and <code>LastUpdateStatusReasonCode</code> fields in the response from <a>GetFunctionConfiguration</a> indicate when the update is complete and the function is processing events with the new configuration. For more information, see <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/functions-states.html\">Function States</a>.</p> <p>These settings can vary between versions of a function and are locked when you publish a version. You can't modify the configuration of a published version, only the unpublished version.</p> <p>To configure function concurrency, use <a>PutFunctionConcurrency</a>. To grant invoke permissions to an account or AWS service, use <a>AddPermission</a>.</p>",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunctionConfiguration"
                }
              }
            }
          },
          "480": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          },
          "484": {
            "description": "ResourceConflictException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceConflictException"
                }
              }
            }
          },
          "485": {
            "description": "PreconditionFailedException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreconditionFailedException"
                }
              }
            }
          },
          "486": {
            "description": "CodeVerificationFailedException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CodeVerificationFailedException"
                }
              }
            }
          },
          "487": {
            "description": "InvalidCodeSignatureException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidCodeSignatureException"
                }
              }
            }
          },
          "488": {
            "description": "CodeSigningConfigNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CodeSigningConfigNotFoundException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "FunctionName",
            "in": "path",
            "required": true,
            "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "schema": {
              "type": "string",
              "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
              "minLength": 1,
              "maxLength": 140
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Role": {
                    "description": "The Amazon Resource Name (ARN) of the function's execution role.",
                    "type": "string",
                    "pattern": "arn:(aws[a-zA-Z-]*)?:iam::\\d{12}:role/?[a-zA-Z_0-9+=,.@\\-_/]+"
                  },
                  "Handler": {
                    "description": "The name of the method within your code that Lambda calls to execute your function. The format includes the file name. It can also include namespaces and other qualifiers, depending on the runtime. For more information, see <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/programming-model-v2.html\">Programming Model</a>.",
                    "type": "string",
                    "pattern": "[^\\s]+",
                    "maxLength": 128
                  },
                  "Description": {
                    "description": "A description of the function.",
                    "type": "string",
                    "minLength": 0,
                    "maxLength": 256
                  },
                  "Timeout": {
                    "description": "The amount of time that Lambda allows a function to run before stopping it. The default is 3 seconds. The maximum allowed value is 900 seconds.",
                    "type": "integer",
                    "minimum": 1
                  },
                  "MemorySize": {
                    "description": "The amount of memory that your function has access to. Increasing the function's memory also increases its CPU allocation. The default value is 128 MB. The value must be a multiple of 64 MB.",
                    "type": "integer",
                    "minimum": 128,
                    "maximum": 3008
                  },
                  "VpcConfig": {
                    "description": "The VPC security groups and subnets that are attached to a Lambda function. For more information, see <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html\">VPC Settings</a>.",
                    "type": "object",
                    "properties": {
                      "SubnetIds": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/SubnetIds"
                          },
                          {
                            "description": "A list of VPC subnet IDs."
                          }
                        ]
                      },
                      "SecurityGroupIds": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/SecurityGroupIds"
                          },
                          {
                            "description": "A list of VPC security groups IDs."
                          }
                        ]
                      }
                    }
                  },
                  "Environment": {
                    "description": "A function's environment variable settings.",
                    "type": "object",
                    "properties": {
                      "Variables": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/EnvironmentVariables"
                          },
                          {
                            "description": "Environment variable key-value pairs."
                          }
                        ]
                      }
                    }
                  },
                  "Runtime": {
                    "description": "The identifier of the function's <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html\">runtime</a>.",
                    "type": "string",
                    "enum": [
                      "nodejs",
                      "nodejs4.3",
                      "nodejs6.10",
                      "nodejs8.10",
                      "nodejs10.x",
                      "nodejs12.x",
                      "java8",
                      "java8.al2",
                      "java11",
                      "python2.7",
                      "python3.6",
                      "python3.7",
                      "python3.8",
                      "dotnetcore1.0",
                      "dotnetcore2.0",
                      "dotnetcore2.1",
                      "dotnetcore3.1",
                      "nodejs4.3-edge",
                      "go1.x",
                      "ruby2.5",
                      "ruby2.7",
                      "provided",
                      "provided.al2",
                      "provided",
                      "provided.al2"
                    ]
                  },
                  "DeadLetterConfig": {
                    "description": "The <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#dlq\">dead-letter queue</a> for failed asynchronous invocations.",
                    "type": "object",
                    "properties": {
                      "TargetArn": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/ResourceArn"
                          },
                          {
                            "description": "The Amazon Resource Name (ARN) of an Amazon SQS queue or Amazon SNS topic."
                          }
                        ]
                      }
                    }
                  },
                  "KMSKeyArn": {
                    "description": "The ARN of the AWS Key Management Service (AWS KMS) key that's used to encrypt your function's environment variables. If it's not provided, AWS Lambda uses a default service key.",
                    "type": "string",
                    "pattern": "(arn:(aws[a-zA-Z-]*)?:[a-z0-9-.]+:.*)|()"
                  },
                  "TracingConfig": {
                    "description": "The function's AWS X-Ray tracing configuration. To sample and record incoming requests, set <code>Mode</code> to <code>Active</code>.",
                    "type": "object",
                    "properties": {
                      "Mode": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/TracingMode"
                          },
                          {
                            "description": "The tracing mode."
                          }
                        ]
                      }
                    }
                  },
                  "RevisionId": {
                    "description": "Only update the function if the revision ID matches the ID that's specified. Use this option to avoid modifying a function that has changed since you last read it.",
                    "type": "string"
                  },
                  "Layers": {
                    "description": "A list of <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\">function layers</a> to add to the function's execution environment. Specify each layer by its ARN, including the version.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LayerVersionArn"
                    }
                  },
                  "FileSystemConfigs": {
                    "description": "Connection settings for an Amazon EFS file system.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/FileSystemConfig"
                    },
                    "maxItems": 1
                  },
                  "ImageConfig": {
                    "description": "Configuration values that override the container image Dockerfile settings. See <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/images-create.html#images-parms\">Container settings</a>. ",
                    "type": "object",
                    "properties": {
                      "EntryPoint": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/StringList"
                          },
                          {
                            "description": "Specifies the entry point to their application, which is typically the location of the runtime executable."
                          }
                        ]
                      },
                      "Command": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/StringList"
                          },
                          {
                            "description": "Specifies parameters that you want to pass in with ENTRYPOINT. "
                          }
                        ]
                      },
                      "WorkingDirectory": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/WorkingDirectory"
                          },
                          {
                            "description": "Specifies the working directory."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Update Function Configuration"
      }
    },
    "/2018-10-31/layers#find=LayerVersion&Arn": {
      "get": {
        "operationId": "GetLayerVersionByArn",
        "description": "Returns information about a version of an <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\">AWS Lambda layer</a>, with a link to download the layer archive that's valid for 10 minutes.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLayerVersionResponse"
                }
              }
            }
          },
          "480": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          },
          "483": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Arn",
            "in": "query",
            "required": true,
            "description": "The ARN of the layer version.",
            "schema": {
              "type": "string",
              "pattern": "arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\\d{12}:layer:[a-zA-Z0-9-_]+:[0-9]+",
              "minLength": 1,
              "maxLength": 140
            }
          },
          {
            "name": "find",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["LayerVersion"]
            }
          }
        ],
        "summary": "Get Layer Version By Arn"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/2015-03-31/functions/{FunctionName}/invocations": {
      "post": {
        "operationId": "Invoke",
        "description": "<p>Invokes a Lambda function. You can invoke a function synchronously (and wait for the response), or asynchronously. To invoke a function asynchronously, set <code>InvocationType</code> to <code>Event</code>.</p> <p>For <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/invocation-sync.html\">synchronous invocation</a>, details about the function response, including errors, are included in the response body and headers. For either invocation type, you can find more information in the <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/monitoring-functions.html\">execution log</a> and <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/lambda-x-ray.html\">trace</a>.</p> <p>When an error occurs, your function may be invoked multiple times. Retry behavior varies by error type, client, event source, and invocation type. For example, if you invoke a function asynchronously and it returns an error, Lambda executes the function up to two more times. For more information, see <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/retries-on-errors.html\">Retry Behavior</a>.</p> <p>For <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html\">asynchronous invocation</a>, Lambda adds events to a queue before sending them to your function. If your function does not have enough capacity to keep up with the queue, events may be lost. Occasionally, your function may receive the same event multiple times, even if no error occurs. To retain events that were not processed, configure your function with a <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#dlq\">dead-letter queue</a>.</p> <p>The status code in the API response doesn't reflect function errors. Error codes are reserved for errors that prevent your function from executing, such as permissions errors, <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/limits.html\">limit errors</a>, or issues with your function's code and configuration. For example, Lambda returns <code>TooManyRequestsException</code> if executing the function would cause you to exceed a concurrency limit at either the account level (<code>ConcurrentInvocationLimitExceeded</code>) or function level (<code>ReservedFunctionConcurrentInvocationLimitExceeded</code>).</p> <p>For functions with a long timeout, your client might be disconnected during synchronous invocation while it waits for a response. Configure your HTTP client, SDK, firewall, proxy, or operating system to allow for long connections with timeout or keep-alive settings.</p> <p>This operation requires permission for the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/list_awslambda.html\">lambda:InvokeFunction</a> action.</p>",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvocationResponse"
                }
              }
            }
          },
          "480": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          },
          "482": {
            "description": "InvalidRequestContentException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidRequestContentException"
                }
              }
            }
          },
          "483": {
            "description": "RequestTooLargeException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestTooLargeException"
                }
              }
            }
          },
          "484": {
            "description": "UnsupportedMediaTypeException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnsupportedMediaTypeException"
                }
              }
            }
          },
          "485": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          },
          "486": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          },
          "487": {
            "description": "EC2UnexpectedException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EC2UnexpectedException"
                }
              }
            }
          },
          "488": {
            "description": "SubnetIPAddressLimitReachedException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubnetIPAddressLimitReachedException"
                }
              }
            }
          },
          "489": {
            "description": "ENILimitReachedException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ENILimitReachedException"
                }
              }
            }
          },
          "490": {
            "description": "EFSMountConnectivityException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EFSMountConnectivityException"
                }
              }
            }
          },
          "491": {
            "description": "EFSMountFailureException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EFSMountFailureException"
                }
              }
            }
          },
          "492": {
            "description": "EFSMountTimeoutException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EFSMountTimeoutException"
                }
              }
            }
          },
          "493": {
            "description": "EFSIOException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EFSIOException"
                }
              }
            }
          },
          "494": {
            "description": "EC2ThrottledException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EC2ThrottledException"
                }
              }
            }
          },
          "495": {
            "description": "EC2AccessDeniedException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EC2AccessDeniedException"
                }
              }
            }
          },
          "496": {
            "description": "InvalidSubnetIDException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidSubnetIDException"
                }
              }
            }
          },
          "497": {
            "description": "InvalidSecurityGroupIDException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidSecurityGroupIDException"
                }
              }
            }
          },
          "498": {
            "description": "InvalidZipFileException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidZipFileException"
                }
              }
            }
          },
          "499": {
            "description": "KMSDisabledException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KMSDisabledException"
                }
              }
            }
          },
          "500": {
            "description": "KMSInvalidStateException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KMSInvalidStateException"
                }
              }
            }
          },
          "501": {
            "description": "KMSAccessDeniedException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KMSAccessDeniedException"
                }
              }
            }
          },
          "502": {
            "description": "KMSNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KMSNotFoundException"
                }
              }
            }
          },
          "503": {
            "description": "InvalidRuntimeException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidRuntimeException"
                }
              }
            }
          },
          "504": {
            "description": "ResourceConflictException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceConflictException"
                }
              }
            }
          },
          "505": {
            "description": "ResourceNotReadyException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotReadyException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "FunctionName",
            "in": "path",
            "required": true,
            "description": "<p>The name of the Lambda function, version, or alias.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code> (name-only), <code>my-function:v1</code> (with alias).</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "schema": {
              "type": "string",
              "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_\\.]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
              "minLength": 1,
              "maxLength": 170
            }
          },
          {
            "name": "X-Amz-Invocation-Type",
            "in": "header",
            "required": false,
            "description": "<p>Choose from the following options.</p> <ul> <li> <p> <code>RequestResponse</code> (default) - Invoke the function synchronously. Keep the connection open until the function returns a response or times out. The API response includes the function response and additional data.</p> </li> <li> <p> <code>Event</code> - Invoke the function asynchronously. Send events that fail multiple times to the function's dead-letter queue (if it's configured). The API response only includes a status code.</p> </li> <li> <p> <code>DryRun</code> - Validate parameter values and verify that the user or role has permission to invoke the function.</p> </li> </ul>",
            "schema": {
              "type": "string",
              "enum": ["Event", "RequestResponse", "DryRun"]
            }
          },
          {
            "name": "X-Amz-Log-Type",
            "in": "header",
            "required": false,
            "description": "Set to <code>Tail</code> to include the execution log in the response.",
            "schema": {
              "type": "string",
              "enum": ["None", "Tail"]
            }
          },
          {
            "name": "X-Amz-Client-Context",
            "in": "header",
            "required": false,
            "description": "Up to 3583 bytes of base64-encoded data about the invoking client to pass to the function in the context object.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Qualifier",
            "in": "query",
            "required": false,
            "description": "Specify a version or alias to invoke a published version of the function.",
            "schema": {
              "type": "string",
              "pattern": "(|[a-zA-Z0-9$_-]+)",
              "minLength": 1,
              "maxLength": 128
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Payload": {
                    "description": "The JSON that you want to provide to your Lambda function as input.",
                    "type": "string",
                    "format": "password"
                  }
                }
              }
            }
          }
        },
        "summary": "Invoke"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/2014-11-13/functions/{FunctionName}/invoke-async/": {
      "post": {
        "deprecated": true,
        "operationId": "InvokeAsync",
        "description": "<important> <p>For asynchronous function invocation, use <a>Invoke</a>.</p> </important> <p>Invokes a function asynchronously.</p>",
        "responses": {
          "202": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvokeAsyncResponse"
                }
              }
            }
          },
          "480": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          },
          "482": {
            "description": "InvalidRequestContentException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidRequestContentException"
                }
              }
            }
          },
          "483": {
            "description": "InvalidRuntimeException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidRuntimeException"
                }
              }
            }
          },
          "484": {
            "description": "ResourceConflictException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceConflictException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "FunctionName",
            "in": "path",
            "required": true,
            "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "schema": {
              "type": "string",
              "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_\\.]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
              "minLength": 1,
              "maxLength": 170
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["InvokeArgs"],
                "properties": {
                  "InvokeArgs": {
                    "description": "The JSON that you want to provide to your Lambda function as input.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "summary": "Invoke Async"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/2019-09-25/functions/{FunctionName}/event-invoke-config/list": {
      "get": {
        "operationId": "ListFunctionEventInvokeConfigs",
        "description": "<p>Retrieves a list of configurations for asynchronous invocation for a function.</p> <p>To configure options for asynchronous invocation, use <a>PutFunctionEventInvokeConfig</a>.</p>",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListFunctionEventInvokeConfigsResponse"
                }
              }
            }
          },
          "480": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          },
          "483": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "FunctionName",
            "in": "path",
            "required": true,
            "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "schema": {
              "type": "string",
              "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
              "minLength": 1,
              "maxLength": 140
            }
          },
          {
            "name": "Marker",
            "in": "query",
            "required": false,
            "description": "Specify the pagination token that's returned by a previous request to retrieve the next page of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "MaxItems",
            "in": "query",
            "required": false,
            "description": "The maximum number of configurations to return.",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50
            }
          }
        ],
        "summary": "List Function Event Invoke Configs"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/2015-03-31/functions/": {
      "get": {
        "operationId": "ListFunctions",
        "description": "<p>Returns a list of Lambda functions, with the version-specific configuration of each. Lambda returns up to 50 functions per call.</p> <p>Set <code>FunctionVersion</code> to <code>ALL</code> to include all published versions of each function in addition to the unpublished version. To get more information about a function or version, use <a>GetFunction</a>.</p>",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListFunctionsResponse"
                }
              }
            }
          },
          "480": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "481": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "MasterRegion",
            "in": "query",
            "required": false,
            "description": "For Lambda@Edge functions, the AWS Region of the master function. For example, <code>us-east-1</code> filters the list of functions to only include Lambda@Edge functions replicated from a master function in US East (N. Virginia). If specified, you must set <code>FunctionVersion</code> to <code>ALL</code>.",
            "schema": {
              "type": "string",
              "pattern": "ALL|[a-z]{2}(-gov)?-[a-z]+-\\d{1}"
            }
          },
          {
            "name": "FunctionVersion",
            "in": "query",
            "required": false,
            "description": "Set to <code>ALL</code> to include entries for all published versions of each function.",
            "schema": {
              "type": "string",
              "enum": ["ALL"]
            }
          },
          {
            "name": "Marker",
            "in": "query",
            "required": false,
            "description": "Specify the pagination token that's returned by a previous request to retrieve the next page of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "MaxItems",
            "in": "query",
            "required": false,
            "description": "The maximum number of functions to return.",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "summary": "List Functions"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/2018-10-31/layers/{LayerName}/versions": {
      "get": {
        "operationId": "ListLayerVersions",
        "description": "Lists the versions of an <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\">AWS Lambda layer</a>. Versions that have been deleted aren't listed. Specify a <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html\">runtime identifier</a> to list only versions that indicate that they're compatible with that runtime.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListLayerVersionsResponse"
                }
              }
            }
          },
          "480": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "CompatibleRuntime",
            "in": "query",
            "required": false,
            "description": "A runtime identifier. For example, <code>go1.x</code>.",
            "schema": {
              "type": "string",
              "enum": [
                "nodejs",
                "nodejs4.3",
                "nodejs6.10",
                "nodejs8.10",
                "nodejs10.x",
                "nodejs12.x",
                "java8",
                "java8.al2",
                "java11",
                "python2.7",
                "python3.6",
                "python3.7",
                "python3.8",
                "dotnetcore1.0",
                "dotnetcore2.0",
                "dotnetcore2.1",
                "dotnetcore3.1",
                "nodejs4.3-edge",
                "go1.x",
                "ruby2.5",
                "ruby2.7",
                "provided",
                "provided.al2",
                "provided",
                "provided.al2"
              ]
            }
          },
          {
            "name": "LayerName",
            "in": "path",
            "required": true,
            "description": "The name or Amazon Resource Name (ARN) of the layer.",
            "schema": {
              "type": "string",
              "pattern": "(arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\\d{12}:layer:[a-zA-Z0-9-_]+)|[a-zA-Z0-9-_]+",
              "minLength": 1,
              "maxLength": 140
            }
          },
          {
            "name": "Marker",
            "in": "query",
            "required": false,
            "description": "A pagination token returned by a previous call.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "MaxItems",
            "in": "query",
            "required": false,
            "description": "The maximum number of versions to return.",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50
            }
          }
        ],
        "summary": "List Layer Versions"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "operationId": "PublishLayerVersion",
        "description": "<p>Creates an <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\">AWS Lambda layer</a> from a ZIP archive. Each time you call <code>PublishLayerVersion</code> with the same layer name, a new version is created.</p> <p>Add layers to your function with <a>CreateFunction</a> or <a>UpdateFunctionConfiguration</a>.</p>",
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublishLayerVersionResponse"
                }
              }
            }
          },
          "480": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          },
          "483": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          },
          "484": {
            "description": "CodeStorageExceededException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CodeStorageExceededException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "LayerName",
            "in": "path",
            "required": true,
            "description": "The name or Amazon Resource Name (ARN) of the layer.",
            "schema": {
              "type": "string",
              "pattern": "(arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\\d{12}:layer:[a-zA-Z0-9-_]+)|[a-zA-Z0-9-_]+",
              "minLength": 1,
              "maxLength": 140
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["Content"],
                "properties": {
                  "Description": {
                    "description": "The description of the version.",
                    "type": "string",
                    "minLength": 0,
                    "maxLength": 256
                  },
                  "Content": {
                    "description": "A ZIP archive that contains the contents of an <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\">AWS Lambda layer</a>. You can specify either an Amazon S3 location, or upload a layer archive directly.",
                    "type": "object",
                    "properties": {
                      "S3Bucket": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/S3Bucket"
                          },
                          {
                            "description": "The Amazon S3 bucket of the layer archive."
                          }
                        ]
                      },
                      "S3Key": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/S3Key"
                          },
                          {
                            "description": "The Amazon S3 key of the layer archive."
                          }
                        ]
                      },
                      "S3ObjectVersion": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/S3ObjectVersion"
                          },
                          {
                            "description": "For versioned objects, the version of the layer archive object to use."
                          }
                        ]
                      },
                      "ZipFile": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Blob"
                          },
                          {
                            "description": "The base64-encoded contents of the layer archive. AWS SDK and AWS CLI clients handle the encoding for you."
                          }
                        ]
                      }
                    }
                  },
                  "CompatibleRuntimes": {
                    "description": "A list of compatible <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html\">function runtimes</a>. Used for filtering with <a>ListLayers</a> and <a>ListLayerVersions</a>.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Runtime"
                    },
                    "maxItems": 5
                  },
                  "LicenseInfo": {
                    "description": "<p>The layer's software license. It can be any of the following:</p> <ul> <li> <p>An <a href=\"https://spdx.org/licenses/\">SPDX license identifier</a>. For example, <code>MIT</code>.</p> </li> <li> <p>The URL of a license hosted on the internet. For example, <code>https://opensource.org/licenses/MIT</code>.</p> </li> <li> <p>The full text of the license.</p> </li> </ul>",
                    "type": "string",
                    "maxLength": 512
                  }
                }
              }
            }
          }
        },
        "summary": "Publish Layer Version"
      }
    },
    "/2018-10-31/layers": {
      "get": {
        "operationId": "ListLayers",
        "description": "Lists <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\">AWS Lambda layers</a> and shows information about the latest version of each. Specify a <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html\">runtime identifier</a> to list only layers that indicate that they're compatible with that runtime.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListLayersResponse"
                }
              }
            }
          },
          "480": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "CompatibleRuntime",
            "in": "query",
            "required": false,
            "description": "A runtime identifier. For example, <code>go1.x</code>.",
            "schema": {
              "type": "string",
              "enum": [
                "nodejs",
                "nodejs4.3",
                "nodejs6.10",
                "nodejs8.10",
                "nodejs10.x",
                "nodejs12.x",
                "java8",
                "java8.al2",
                "java11",
                "python2.7",
                "python3.6",
                "python3.7",
                "python3.8",
                "dotnetcore1.0",
                "dotnetcore2.0",
                "dotnetcore2.1",
                "dotnetcore3.1",
                "nodejs4.3-edge",
                "go1.x",
                "ruby2.5",
                "ruby2.7",
                "provided",
                "provided.al2",
                "provided",
                "provided.al2"
              ]
            }
          },
          {
            "name": "Marker",
            "in": "query",
            "required": false,
            "description": "A pagination token returned by a previous call.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "MaxItems",
            "in": "query",
            "required": false,
            "description": "The maximum number of layers to return.",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50
            }
          }
        ],
        "summary": "List Layers"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/2019-09-30/functions/{FunctionName}/provisioned-concurrency#List=ALL": {
      "get": {
        "operationId": "ListProvisionedConcurrencyConfigs",
        "description": "Retrieves a list of provisioned concurrency configurations for a function.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListProvisionedConcurrencyConfigsResponse"
                }
              }
            }
          },
          "480": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          },
          "482": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          },
          "483": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "FunctionName",
            "in": "path",
            "required": true,
            "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "schema": {
              "type": "string",
              "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
              "minLength": 1,
              "maxLength": 140
            }
          },
          {
            "name": "Marker",
            "in": "query",
            "required": false,
            "description": "Specify the pagination token that's returned by a previous request to retrieve the next page of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "MaxItems",
            "in": "query",
            "required": false,
            "description": "Specify a number to limit the number of configurations returned.",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50
            }
          },
          {
            "name": "List",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["ALL"]
            }
          }
        ],
        "summary": "List Provisioned Concurrency Configs"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/2017-03-31/tags/{ARN}": {
      "get": {
        "operationId": "ListTags",
        "description": "Returns a function's <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/tagging.html\">tags</a>. You can also view tags with <a>GetFunction</a>.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListTagsResponse"
                }
              }
            }
          },
          "480": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "ARN",
            "in": "path",
            "required": true,
            "description": "The function's Amazon Resource Name (ARN).",
            "schema": {
              "type": "string",
              "pattern": "arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}(-gov)?-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9-_]+(:(\\$LATEST|[a-zA-Z0-9-_]+))?"
            }
          }
        ],
        "summary": "List Tags"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "operationId": "TagResource",
        "description": "Adds <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/tagging.html\">tags</a> to a function.",
        "responses": {
          "204": {
            "description": "Success"
          },
          "480": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          },
          "484": {
            "description": "ResourceConflictException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceConflictException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "ARN",
            "in": "path",
            "required": true,
            "description": "The function's Amazon Resource Name (ARN).",
            "schema": {
              "type": "string",
              "pattern": "arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}(-gov)?-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9-_]+(:(\\$LATEST|[a-zA-Z0-9-_]+))?"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["Tags"],
                "properties": {
                  "Tags": {
                    "description": "A list of tags to apply to the function.",
                    "type": "object",
                    "additionalProperties": {
                      "$ref": "#/components/schemas/TagValue"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Tag Resource"
      }
    },
    "/2015-03-31/functions/{FunctionName}/versions": {
      "get": {
        "operationId": "ListVersionsByFunction",
        "description": "Returns a list of <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html\">versions</a>, with the version-specific configuration of each. Lambda returns up to 50 versions per call.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListVersionsByFunctionResponse"
                }
              }
            }
          },
          "480": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "FunctionName",
            "in": "path",
            "required": true,
            "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "schema": {
              "type": "string",
              "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_\\.]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
              "minLength": 1,
              "maxLength": 170
            }
          },
          {
            "name": "Marker",
            "in": "query",
            "required": false,
            "description": "Specify the pagination token that's returned by a previous request to retrieve the next page of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "MaxItems",
            "in": "query",
            "required": false,
            "description": "The maximum number of versions to return.",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "summary": "List Versions By Function"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "operationId": "PublishVersion",
        "description": "<p>Creates a <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html\">version</a> from the current code and configuration of a function. Use versions to create a snapshot of your function code and configuration that doesn't change.</p> <p>AWS Lambda doesn't publish a version if the function's configuration and code haven't changed since the last version. Use <a>UpdateFunctionCode</a> or <a>UpdateFunctionConfiguration</a> to update the function before publishing a version.</p> <p>Clients can invoke versions directly or with an alias. To create an alias, use <a>CreateAlias</a>.</p>",
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunctionConfiguration"
                }
              }
            }
          },
          "480": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          },
          "484": {
            "description": "CodeStorageExceededException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CodeStorageExceededException"
                }
              }
            }
          },
          "485": {
            "description": "PreconditionFailedException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreconditionFailedException"
                }
              }
            }
          },
          "486": {
            "description": "ResourceConflictException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceConflictException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "FunctionName",
            "in": "path",
            "required": true,
            "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "schema": {
              "type": "string",
              "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
              "minLength": 1,
              "maxLength": 140
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "CodeSha256": {
                    "description": "Only publish a version if the hash value matches the value that's specified. Use this option to avoid publishing a version if the function code has changed since you last updated it. You can get the hash for the version that you uploaded from the output of <a>UpdateFunctionCode</a>.",
                    "type": "string"
                  },
                  "Description": {
                    "description": "A description for the version to override the description in the function configuration.",
                    "type": "string",
                    "minLength": 0,
                    "maxLength": 256
                  },
                  "RevisionId": {
                    "description": "Only update the function if the revision ID matches the ID that's specified. Use this option to avoid publishing a version if the function configuration has changed since you last updated it.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "summary": "Publish Version"
      }
    },
    "/2018-10-31/layers/{LayerName}/versions/{VersionNumber}/policy/{StatementId}": {
      "delete": {
        "operationId": "RemoveLayerVersionPermission",
        "description": "Removes a statement from the permissions policy for a version of an <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\">AWS Lambda layer</a>. For more information, see <a>AddLayerVersionPermission</a>.",
        "responses": {
          "204": {
            "description": "Success"
          },
          "480": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          },
          "484": {
            "description": "PreconditionFailedException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreconditionFailedException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "LayerName",
            "in": "path",
            "required": true,
            "description": "The name or Amazon Resource Name (ARN) of the layer.",
            "schema": {
              "type": "string",
              "pattern": "(arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\\d{12}:layer:[a-zA-Z0-9-_]+)|[a-zA-Z0-9-_]+",
              "minLength": 1,
              "maxLength": 140
            }
          },
          {
            "name": "VersionNumber",
            "in": "path",
            "required": true,
            "description": "The version number.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "StatementId",
            "in": "path",
            "required": true,
            "description": "The identifier that was specified when the statement was added.",
            "schema": {
              "type": "string",
              "pattern": "([a-zA-Z0-9-_]+)",
              "minLength": 1,
              "maxLength": 100
            }
          },
          {
            "name": "RevisionId",
            "in": "query",
            "required": false,
            "description": "Only update the policy if the revision ID matches the ID specified. Use this option to avoid modifying a policy that has changed since you last read it.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Remove Layer Version Permission"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/2015-03-31/functions/{FunctionName}/policy/{StatementId}": {
      "delete": {
        "operationId": "RemovePermission",
        "description": "Revokes function-use permission from an AWS service or another account. You can get the ID of the statement from the output of <a>GetPolicy</a>.",
        "responses": {
          "204": {
            "description": "Success"
          },
          "480": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          },
          "484": {
            "description": "PreconditionFailedException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreconditionFailedException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "FunctionName",
            "in": "path",
            "required": true,
            "description": "<p>The name of the Lambda function, version, or alias.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code> (name-only), <code>my-function:v1</code> (with alias).</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "schema": {
              "type": "string",
              "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
              "minLength": 1,
              "maxLength": 140
            }
          },
          {
            "name": "StatementId",
            "in": "path",
            "required": true,
            "description": "Statement ID of the permission to remove.",
            "schema": {
              "type": "string",
              "pattern": "([a-zA-Z0-9-_.]+)",
              "minLength": 1,
              "maxLength": 100
            }
          },
          {
            "name": "Qualifier",
            "in": "query",
            "required": false,
            "description": "Specify a version or alias to remove permissions from a published version of the function.",
            "schema": {
              "type": "string",
              "pattern": "(|[a-zA-Z0-9$_-]+)",
              "minLength": 1,
              "maxLength": 128
            }
          },
          {
            "name": "RevisionId",
            "in": "query",
            "required": false,
            "description": "Only update the policy if the revision ID matches the ID that's specified. Use this option to avoid modifying a policy that has changed since you last read it.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Remove Permission"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/2017-03-31/tags/{ARN}#tagKeys": {
      "delete": {
        "operationId": "UntagResource",
        "description": "Removes <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/tagging.html\">tags</a> from a function.",
        "responses": {
          "204": {
            "description": "Success"
          },
          "480": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          },
          "484": {
            "description": "ResourceConflictException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceConflictException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "ARN",
            "in": "path",
            "required": true,
            "description": "The function's Amazon Resource Name (ARN).",
            "schema": {
              "type": "string",
              "pattern": "arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}(-gov)?-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9-_]+(:(\\$LATEST|[a-zA-Z0-9-_]+))?"
            }
          },
          {
            "name": "tagKeys",
            "in": "query",
            "required": true,
            "description": "A list of tag keys to remove from the function.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TagKey"
              }
            }
          }
        ],
        "summary": "Untag Resource"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/2015-03-31/functions/{FunctionName}/code": {
      "put": {
        "operationId": "UpdateFunctionCode",
        "description": "<p>Updates a Lambda function's code.</p> <p>The function's code is locked when you publish a version. You can't modify the code of a published version, only the unpublished version.</p>",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunctionConfiguration"
                }
              }
            }
          },
          "480": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          },
          "482": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          },
          "484": {
            "description": "CodeStorageExceededException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CodeStorageExceededException"
                }
              }
            }
          },
          "485": {
            "description": "PreconditionFailedException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreconditionFailedException"
                }
              }
            }
          },
          "486": {
            "description": "ResourceConflictException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceConflictException"
                }
              }
            }
          },
          "487": {
            "description": "CodeVerificationFailedException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CodeVerificationFailedException"
                }
              }
            }
          },
          "488": {
            "description": "InvalidCodeSignatureException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidCodeSignatureException"
                }
              }
            }
          },
          "489": {
            "description": "CodeSigningConfigNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CodeSigningConfigNotFoundException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "FunctionName",
            "in": "path",
            "required": true,
            "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "schema": {
              "type": "string",
              "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
              "minLength": 1,
              "maxLength": 140
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ZipFile": {
                    "description": "The base64-encoded contents of the deployment package. AWS SDK and AWS CLI clients handle the encoding for you.",
                    "type": "string",
                    "format": "password"
                  },
                  "S3Bucket": {
                    "description": "An Amazon S3 bucket in the same AWS Region as your function. The bucket can be in a different AWS account.",
                    "type": "string",
                    "pattern": "^[0-9A-Za-z\\.\\-_]*(?<!\\.)$",
                    "minLength": 3,
                    "maxLength": 63
                  },
                  "S3Key": {
                    "description": "The Amazon S3 key of the deployment package.",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 1024
                  },
                  "S3ObjectVersion": {
                    "description": "For versioned objects, the version of the deployment package object to use.",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 1024
                  },
                  "Publish": {
                    "description": "Set to true to publish a new version of the function after updating the code. This has the same effect as calling <a>PublishVersion</a> separately.",
                    "type": "boolean"
                  },
                  "DryRun": {
                    "description": "Set to true to validate the request parameters and access permissions without modifying the function code.",
                    "type": "boolean"
                  },
                  "RevisionId": {
                    "description": "Only update the function if the revision ID matches the ID that's specified. Use this option to avoid modifying a function that has changed since you last read it.",
                    "type": "string"
                  },
                  "ImageUri": {
                    "description": "URI of a container image in the Amazon ECR registry.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "summary": "Update Function Code"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/2020-04-22/code-signing-configs/": {
      "post": {
        "operationId": "CreateCodeSigningConfig",
        "description": "Creates a code signing configuration. A <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-trustedcode.html\">code signing configuration</a> defines a list of allowed signing profiles and defines the code-signing validation policy (action to be taken if deployment validation checks fail). ",
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCodeSigningConfigResponse"
                }
              }
            }
          },
          "480": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          }
        },
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["AllowedPublishers"],
                "properties": {
                  "Description": {
                    "description": "Descriptive name for this code signing configuration.",
                    "type": "string",
                    "minLength": 0,
                    "maxLength": 256
                  },
                  "AllowedPublishers": {
                    "description": "List of signing profiles that can sign a code package. ",
                    "type": "object",
                    "properties": {
                      "SigningProfileVersionArns": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/SigningProfileVersionArns"
                          },
                          {
                            "description": "The Amazon Resource Name (ARN) for each of the signing profiles. A signing profile defines a trusted user who can sign a code package. "
                          }
                        ]
                      }
                    }
                  },
                  "CodeSigningPolicies": {
                    "description": "Code signing configuration policies specifies the validation failure action for signature mismatch or expiry.",
                    "type": "object",
                    "properties": {
                      "UntrustedArtifactOnDeployment": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/CodeSigningPolicy"
                          },
                          {
                            "description": "<p>Code signing configuration policy for deployment validation failure. If you set the policy to <code>Enforce</code>, Lambda blocks the deployment request if code-signing validation checks fail. If you set the policy to <code>Warn</code>, Lambda allows the deployment and creates a CloudWatch log. </p> <p>Default value: <code>Warn</code> </p>"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Create Code Signing Config"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ],
      "get": {
        "operationId": "ListCodeSigningConfigs",
        "description": "Returns a list of <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuring-codesigning.html\">code signing configurations</a> for the specified function. A request returns up to 10,000 configurations per call. You can use the <code>MaxItems</code> parameter to return fewer configurations per call. ",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListCodeSigningConfigsResponse"
                }
              }
            }
          },
          "480": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Marker",
            "in": "query",
            "required": false,
            "description": "Specify the pagination token that's returned by a previous request to retrieve the next page of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "MaxItems",
            "in": "query",
            "required": false,
            "description": "Maximum number of items to return.",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "summary": "List Code Signing Configs"
      }
    },
    "/2020-04-22/code-signing-configs/{CodeSigningConfigArn}": {
      "delete": {
        "operationId": "DeleteCodeSigningConfig",
        "description": "Deletes the code signing configuration. You can delete the code signing configuration only if no function is using it. ",
        "responses": {
          "204": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteCodeSigningConfigResponse"
                }
              }
            }
          },
          "480": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          },
          "483": {
            "description": "ResourceConflictException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceConflictException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "CodeSigningConfigArn",
            "in": "path",
            "required": true,
            "description": "The The Amazon Resource Name (ARN) of the code signing configuration.",
            "schema": {
              "type": "string",
              "pattern": "arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\\d{1}:\\d{12}:code-signing-config:csc-[a-z0-9]{17}",
              "maxLength": 200
            }
          }
        ],
        "summary": "Delete Code Signing Config"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ],
      "get": {
        "operationId": "GetCodeSigningConfig",
        "description": "Returns information about the specified code signing configuration.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCodeSigningConfigResponse"
                }
              }
            }
          },
          "480": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "CodeSigningConfigArn",
            "in": "path",
            "required": true,
            "description": "The The Amazon Resource Name (ARN) of the code signing configuration. ",
            "schema": {
              "type": "string",
              "pattern": "arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\\d{1}:\\d{12}:code-signing-config:csc-[a-z0-9]{17}",
              "maxLength": 200
            }
          }
        ],
        "summary": "Get Code Signing Config"
      },
      "put": {
        "operationId": "UpdateCodeSigningConfig",
        "description": "Update the code signing configuration. Changes to the code signing configuration take effect the next time a user tries to deploy a code package to the function. ",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateCodeSigningConfigResponse"
                }
              }
            }
          },
          "480": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "CodeSigningConfigArn",
            "in": "path",
            "required": true,
            "description": "The The Amazon Resource Name (ARN) of the code signing configuration.",
            "schema": {
              "type": "string",
              "pattern": "arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\\d{1}:\\d{12}:code-signing-config:csc-[a-z0-9]{17}",
              "maxLength": 200
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Description": {
                    "description": "Descriptive name for this code signing configuration.",
                    "type": "string",
                    "minLength": 0,
                    "maxLength": 256
                  },
                  "AllowedPublishers": {
                    "description": "List of signing profiles that can sign a code package. ",
                    "type": "object",
                    "properties": {
                      "SigningProfileVersionArns": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/SigningProfileVersionArns"
                          },
                          {
                            "description": "The Amazon Resource Name (ARN) for each of the signing profiles. A signing profile defines a trusted user who can sign a code package. "
                          }
                        ]
                      }
                    }
                  },
                  "CodeSigningPolicies": {
                    "description": "Code signing configuration policies specifies the validation failure action for signature mismatch or expiry.",
                    "type": "object",
                    "properties": {
                      "UntrustedArtifactOnDeployment": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/CodeSigningPolicy"
                          },
                          {
                            "description": "<p>Code signing configuration policy for deployment validation failure. If you set the policy to <code>Enforce</code>, Lambda blocks the deployment request if code-signing validation checks fail. If you set the policy to <code>Warn</code>, Lambda allows the deployment and creates a CloudWatch log. </p> <p>Default value: <code>Warn</code> </p>"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Update Code Signing Config"
      }
    },
    "/2020-06-30/functions/{FunctionName}/code-signing-config": {
      "delete": {
        "operationId": "DeleteFunctionCodeSigningConfig",
        "description": "Removes the code signing configuration from the function.",
        "responses": {
          "204": {
            "description": "Success"
          },
          "480": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          },
          "481": {
            "description": "CodeSigningConfigNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CodeSigningConfigNotFoundException"
                }
              }
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          },
          "483": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "484": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          },
          "485": {
            "description": "ResourceConflictException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceConflictException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "FunctionName",
            "in": "path",
            "required": true,
            "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "schema": {
              "type": "string",
              "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
              "minLength": 1,
              "maxLength": 140
            }
          }
        ],
        "summary": "Delete Function Code Signing Config"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ],
      "get": {
        "operationId": "GetFunctionCodeSigningConfig",
        "description": "Returns the code signing configuration for the specified function.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFunctionCodeSigningConfigResponse"
                }
              }
            }
          },
          "480": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          },
          "481": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          },
          "482": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "FunctionName",
            "in": "path",
            "required": true,
            "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "schema": {
              "type": "string",
              "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
              "minLength": 1,
              "maxLength": 140
            }
          }
        ],
        "summary": "Get Function Code Signing Config"
      },
      "put": {
        "operationId": "PutFunctionCodeSigningConfig",
        "description": "Update the code signing configuration for the function. Changes to the code signing configuration take effect the next time a user tries to deploy a code package to the function. ",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PutFunctionCodeSigningConfigResponse"
                }
              }
            }
          },
          "480": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          },
          "483": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          },
          "484": {
            "description": "ResourceConflictException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceConflictException"
                }
              }
            }
          },
          "485": {
            "description": "CodeSigningConfigNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CodeSigningConfigNotFoundException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "FunctionName",
            "in": "path",
            "required": true,
            "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>",
            "schema": {
              "type": "string",
              "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
              "minLength": 1,
              "maxLength": 140
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["CodeSigningConfigArn"],
                "properties": {
                  "CodeSigningConfigArn": {
                    "description": "The The Amazon Resource Name (ARN) of the code signing configuration.",
                    "type": "string",
                    "pattern": "arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\\d{1}:\\d{12}:code-signing-config:csc-[a-z0-9]{17}",
                    "maxLength": 200
                  }
                }
              }
            }
          }
        },
        "summary": "Put Function Code Signing Config"
      }
    },
    "/2020-04-22/code-signing-configs/{CodeSigningConfigArn}/functions": {
      "get": {
        "operationId": "ListFunctionsByCodeSigningConfig",
        "description": "List the functions that use the specified code signing configuration. You can use this method prior to deleting a code signing configuration, to verify that no functions are using it.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListFunctionsByCodeSigningConfigResponse"
                }
              }
            }
          },
          "480": {
            "description": "ServiceException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceException"
                }
              }
            }
          },
          "481": {
            "description": "InvalidParameterValueException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidParameterValueException"
                }
              }
            }
          },
          "482": {
            "description": "ResourceNotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "CodeSigningConfigArn",
            "in": "path",
            "required": true,
            "description": "The The Amazon Resource Name (ARN) of the code signing configuration.",
            "schema": {
              "type": "string",
              "pattern": "arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\\d{1}:\\d{12}:code-signing-config:csc-[a-z0-9]{17}",
              "maxLength": 200
            }
          },
          {
            "name": "Marker",
            "in": "query",
            "required": false,
            "description": "Specify the pagination token that's returned by a previous request to retrieve the next page of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "MaxItems",
            "in": "query",
            "required": false,
            "description": "Maximum number of items to return.",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            }
          }
        ],
        "summary": "List Functions By Code Signing Config"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ]
    }
  },
  "components": {
    "parameters": {
      "X-Amz-Content-Sha256": {
        "name": "X-Amz-Content-Sha256",
        "in": "header",
        "schema": {
          "type": "string"
        },
        "required": false,
        "x-ignore": true
      },
      "X-Amz-Date": {
        "name": "X-Amz-Date",
        "in": "header",
        "schema": {
          "type": "string"
        },
        "required": false,
        "x-ignore": true
      },
      "X-Amz-Algorithm": {
        "name": "X-Amz-Algorithm",
        "in": "header",
        "schema": {
          "type": "string"
        },
        "required": false,
        "x-ignore": true
      },
      "X-Amz-Credential": {
        "name": "X-Amz-Credential",
        "in": "header",
        "schema": {
          "type": "string"
        },
        "required": false,
        "x-ignore": true
      },
      "X-Amz-Security-Token": {
        "name": "X-Amz-Security-Token",
        "in": "header",
        "schema": {
          "type": "string"
        },
        "required": false,
        "x-ignore": true
      },
      "X-Amz-Signature": {
        "name": "X-Amz-Signature",
        "in": "header",
        "schema": {
          "type": "string"
        },
        "required": false,
        "x-ignore": true
      },
      "X-Amz-SignedHeaders": {
        "name": "X-Amz-SignedHeaders",
        "in": "header",
        "schema": {
          "type": "string"
        },
        "required": false,
        "x-ignore": true
      }
    },
    "securitySchemes": {
      "hmac": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header",
        "description": "Amazon Signature authorization v4",
        "x-amazon-apigateway-authtype": "awsSigv4"
      }
    },
    "schemas": {
      "AddLayerVersionPermissionResponse": {
        "type": "object",
        "example": {
          "RevisionId": "35d87451-f796-4a3f-a618-95a3671b0a0c",
          "Statement": "{\"Sid\":\"xaccount\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::223456789012:root\"},\"Action\":\"lambda:GetLayerVersion\",\"Resource\":\"arn:aws:lambda:us-east-2:123456789012:layer:my-layer:1\"}"
        },
        "properties": {
          "Statement": {
            "allOf": [
              {
                "$ref": "#/components/schemas/String"
              },
              {
                "description": "The permission statement."
              }
            ]
          },
          "RevisionId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/String"
              },
              {
                "description": "A unique identifier for the current revision of the policy."
              }
            ]
          }
        }
      },
      "ServiceException": {},
      "ResourceNotFoundException": {},
      "ResourceConflictException": {},
      "TooManyRequestsException": {},
      "InvalidParameterValueException": {},
      "PolicyLengthExceededException": {},
      "PreconditionFailedException": {},
      "AddPermissionResponse": {
        "type": "object",
        "example": {
          "Statement": "{\"Sid\":\"xaccount\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::223456789012:root\"},\"Action\":\"lambda:InvokeFunction\",\"Resource\":\"arn:aws:lambda:us-east-2:123456789012:function:my-function\"}"
        },
        "properties": {
          "Statement": {
            "allOf": [
              {
                "$ref": "#/components/schemas/String"
              },
              {
                "description": "The permission statement that's added to the function policy."
              }
            ]
          }
        }
      },
      "AliasConfiguration": {
        "type": "object",
        "example": {
          "AliasArn": "arn:aws:lambda:us-west-2:123456789012:function:my-function:BLUE",
          "Description": "Production environment BLUE.",
          "FunctionVersion": "2",
          "Name": "BLUE",
          "RevisionId": "594f41fb-xmpl-4c20-95c7-6ca5f2a92c93",
          "RoutingConfig": {
            "AdditionalVersionWeights": {
              "1": 0.7
            }
          }
        },
        "properties": {
          "AliasArn": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FunctionArn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of the alias."
              }
            ]
          },
          "Name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Alias"
              },
              {
                "description": "The name of the alias."
              }
            ]
          },
          "FunctionVersion": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Version"
              },
              {
                "description": "The function version that the alias invokes."
              }
            ]
          },
          "Description": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Description"
              },
              {
                "description": "A description of the alias."
              }
            ]
          },
          "RoutingConfig": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AliasRoutingConfiguration"
              },
              {
                "description": "The <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/lambda-traffic-shifting-using-aliases.html\">routing configuration</a> of the alias."
              }
            ]
          },
          "RevisionId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/String"
              },
              {
                "description": "A unique identifier that changes when you update the alias."
              }
            ]
          }
        },
        "description": "Provides configuration information about a Lambda function <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html\">alias</a>."
      },
      "AdditionalVersionWeights": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/Weight"
        }
      },
      "EventSourceMappingConfiguration": {
        "type": "object",
        "example": {
          "BatchSize": 123,
          "EventSourceArn": "arn:aws:s3:::examplebucket/*",
          "FunctionArn": "arn:aws:lambda:us-west-2:123456789012:function:myFunction",
          "LastModified": "2016-11-21T19:49:20.006+0000",
          "LastProcessingResult": "",
          "State": "",
          "StateTransitionReason": "",
          "UUID": "1234xCy789012"
        },
        "properties": {
          "UUID": {
            "allOf": [
              {
                "$ref": "#/components/schemas/String"
              },
              {
                "description": "The identifier of the event source mapping."
              }
            ]
          },
          "BatchSize": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BatchSize"
              },
              {
                "description": "The maximum number of items to retrieve in a single batch."
              }
            ]
          },
          "MaximumBatchingWindowInSeconds": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MaximumBatchingWindowInSeconds"
              },
              {
                "description": "(Streams) The maximum amount of time to gather records before invoking the function, in seconds."
              }
            ]
          },
          "ParallelizationFactor": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ParallelizationFactor"
              },
              {
                "description": "(Streams) The number of batches to process from each shard concurrently."
              }
            ]
          },
          "EventSourceArn": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Arn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of the event source."
              }
            ]
          },
          "FunctionArn": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FunctionArn"
              },
              {
                "description": "The ARN of the Lambda function."
              }
            ]
          },
          "LastModified": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Date"
              },
              {
                "description": "The date that the event source mapping was last updated, or its state changed."
              }
            ]
          },
          "LastProcessingResult": {
            "allOf": [
              {
                "$ref": "#/components/schemas/String"
              },
              {
                "description": "The result of the last AWS Lambda invocation of your Lambda function."
              }
            ]
          },
          "State": {
            "allOf": [
              {
                "$ref": "#/components/schemas/String"
              },
              {
                "description": "The state of the event source mapping. It can be one of the following: <code>Creating</code>, <code>Enabling</code>, <code>Enabled</code>, <code>Disabling</code>, <code>Disabled</code>, <code>Updating</code>, or <code>Deleting</code>."
              }
            ]
          },
          "StateTransitionReason": {
            "allOf": [
              {
                "$ref": "#/components/schemas/String"
              },
              {
                "description": "Indicates whether the last change to the event source mapping was made by a user, or by the Lambda service."
              }
            ]
          },
          "DestinationConfig": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DestinationConfig"
              },
              {
                "description": "(Streams) An Amazon SQS queue or Amazon SNS topic destination for discarded records."
              }
            ]
          },
          "Topics": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Topics"
              },
              {
                "description": " (MSK) The name of the Kafka topic. "
              }
            ]
          },
          "MaximumRecordAgeInSeconds": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MaximumRecordAgeInSeconds"
              },
              {
                "description": "(Streams) The maximum age of a record that Lambda sends to a function for processing."
              }
            ]
          },
          "BisectBatchOnFunctionError": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BisectBatchOnFunctionError"
              },
              {
                "description": "(Streams) If the function returns an error, split the batch in two and retry."
              }
            ]
          },
          "MaximumRetryAttempts": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MaximumRetryAttemptsEventSourceMapping"
              },
              {
                "description": "(Streams) The maximum number of times to retry when the function returns an error."
              }
            ]
          },
          "Queues": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Queues"
              },
              {
                "description": " (MQ) The name of the Amazon MQ broker destination queue to consume. "
              }
            ]
          },
          "SourceAccessConfigurations": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SourceAccessConfigurations"
              },
              {
                "description": "<p> (MQ) The Secrets Manager secret that stores your broker credentials. To store your secret, use the following format: <code> { \"username\": \"your username\", \"password\": \"your password\" }</code> </p> <p>To reference the secret, use the following format: <code>[ { \"Type\": \"BASIC_AUTH\", \"URI\": \"secretARN\" } ]</code> </p> <p>The value of <code>Type</code> is always <code>BASIC_AUTH</code>. To encrypt the secret, you can use customer or service managed keys. When using a customer managed KMS key, the Lambda execution role requires <code>kms:Decrypt</code> permissions.</p>"
              }
            ]
          },
          "StartingPosition": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EventSourcePosition"
              },
              {
                "description": "The position in a stream from which to start reading. Required for Amazon Kinesis, Amazon DynamoDB, and Amazon MSK Streams sources. <code>AT_TIMESTAMP</code> is only supported for Amazon Kinesis streams."
              }
            ]
          },
          "StartingPositionTimestamp": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Date"
              },
              {
                "description": "With <code>StartingPosition</code> set to <code>AT_TIMESTAMP</code>, the time from which to start reading."
              }
            ]
          },
          "SelfManagedEventSource": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SelfManagedEventSource"
              },
              {
                "description": "The self-managed Apache Kafka cluster for your event source."
              }
            ]
          },
          "TumblingWindowInSeconds": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TumblingWindowInSeconds"
              },
              {
                "description": "(Streams only) The duration in seconds of a processing window. The range is 1–900 seconds."
              }
            ]
          },
          "FunctionResponseTypes": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FunctionResponseTypeList"
              },
              {
                "description": "(Streams only) A list of current response type enums applied to the event source mapping."
              }
            ]
          }
        },
        "description": "A mapping between an AWS resource and an AWS Lambda function. See <a>CreateEventSourceMapping</a> for details."
      },
      "OnSuccess": {
        "type": "object",
        "properties": {
          "Destination": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DestinationArn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of the destination resource."
              }
            ]
          }
        },
        "description": "A destination for events that were processed successfully."
      },
      "OnFailure": {
        "type": "object",
        "properties": {
          "Destination": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DestinationArn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of the destination resource."
              }
            ]
          }
        },
        "description": "A destination for events that failed processing."
      },
      "Topic": {
        "type": "string",
        "pattern": "^[^.]([a-zA-Z0-9\\-_.]+)",
        "minLength": 1,
        "maxLength": 249
      },
      "FunctionConfiguration": {
        "type": "object",
        "example": {
          "CodeSha256": "PFn4S+er27qk+UuZSTKEQfNKG/XNn7QJs90mJgq6oH8=",
          "CodeSize": 308,
          "Description": "",
          "FunctionArn": "arn:aws:lambda:us-east-2:123456789012:function:my-function",
          "FunctionName": "my-function",
          "Handler": "index.handler",
          "LastModified": "2019-08-14T22:26:11.234+0000",
          "MemorySize": 256,
          "RevisionId": "873282ed-xmpl-4dc8-a069-d0c647e470c6",
          "Role": "arn:aws:iam::123456789012:role/lambda-role",
          "Runtime": "nodejs12.x",
          "Timeout": 3,
          "TracingConfig": {
            "Mode": "PassThrough"
          },
          "Version": "$LATEST"
        },
        "properties": {
          "FunctionName": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NamespacedFunctionName"
              },
              {
                "description": "The name of the function."
              }
            ]
          },
          "FunctionArn": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NameSpacedFunctionArn"
              },
              {
                "description": "The function's Amazon Resource Name (ARN)."
              }
            ]
          },
          "Runtime": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Runtime"
              },
              {
                "description": "The runtime environment for the Lambda function."
              }
            ]
          },
          "Role": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RoleArn"
              },
              {
                "description": "The function's execution role."
              }
            ]
          },
          "Handler": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Handler"
              },
              {
                "description": "The function that Lambda calls to begin executing your function."
              }
            ]
          },
          "CodeSize": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Long"
              },
              {
                "description": "The size of the function's deployment package, in bytes."
              }
            ]
          },
          "Description": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Description"
              },
              {
                "description": "The function's description."
              }
            ]
          },
          "Timeout": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Timeout"
              },
              {
                "description": "The amount of time in seconds that Lambda allows a function to run before stopping it."
              }
            ]
          },
          "MemorySize": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MemorySize"
              },
              {
                "description": "The memory that's allocated to the function."
              }
            ]
          },
          "LastModified": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Timestamp"
              },
              {
                "description": "The date and time that the function was last updated, in <a href=\"https://www.w3.org/TR/NOTE-datetime\">ISO-8601 format</a> (YYYY-MM-DDThh:mm:ss.sTZD)."
              }
            ]
          },
          "CodeSha256": {
            "allOf": [
              {
                "$ref": "#/components/schemas/String"
              },
              {
                "description": "The SHA256 hash of the function's deployment package."
              }
            ]
          },
          "Version": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Version"
              },
              {
                "description": "The version of the Lambda function."
              }
            ]
          },
          "VpcConfig": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VpcConfigResponse"
              },
              {
                "description": "The function's networking configuration."
              }
            ]
          },
          "DeadLetterConfig": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeadLetterConfig"
              },
              {
                "description": "The function's dead letter queue."
              }
            ]
          },
          "Environment": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EnvironmentResponse"
              },
              {
                "description": "The function's environment variables."
              }
            ]
          },
          "KMSKeyArn": {
            "allOf": [
              {
                "$ref": "#/components/schemas/KMSKeyArn"
              },
              {
                "description": "The KMS key that's used to encrypt the function's environment variables. This key is only returned if you've configured a customer managed CMK."
              }
            ]
          },
          "TracingConfig": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TracingConfigResponse"
              },
              {
                "description": "The function's AWS X-Ray tracing configuration."
              }
            ]
          },
          "MasterArn": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FunctionArn"
              },
              {
                "description": "For Lambda@Edge functions, the ARN of the master function."
              }
            ]
          },
          "RevisionId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/String"
              },
              {
                "description": "The latest updated revision of the function or alias."
              }
            ]
          },
          "Layers": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LayersReferenceList"
              },
              {
                "description": "The function's <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\"> layers</a>."
              }
            ]
          },
          "State": {
            "allOf": [
              {
                "$ref": "#/components/schemas/State"
              },
              {
                "description": "The current state of the function. When the state is <code>Inactive</code>, you can reactivate the function by invoking it."
              }
            ]
          },
          "StateReason": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StateReason"
              },
              {
                "description": "The reason for the function's current state."
              }
            ]
          },
          "StateReasonCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StateReasonCode"
              },
              {
                "description": "The reason code for the function's current state. When the code is <code>Creating</code>, you can't invoke or modify the function."
              }
            ]
          },
          "LastUpdateStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LastUpdateStatus"
              },
              {
                "description": "The status of the last update that was performed on the function. This is first set to <code>Successful</code> after function creation completes."
              }
            ]
          },
          "LastUpdateStatusReason": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LastUpdateStatusReason"
              },
              {
                "description": "The reason for the last update that was performed on the function."
              }
            ]
          },
          "LastUpdateStatusReasonCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LastUpdateStatusReasonCode"
              },
              {
                "description": "The reason code for the last update that was performed on the function."
              }
            ]
          },
          "FileSystemConfigs": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FileSystemConfigList"
              },
              {
                "description": "Connection settings for an Amazon EFS file system."
              }
            ]
          },
          "SigningProfileVersionArn": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Arn"
              },
              {
                "description": "The ARN of the signing profile version."
              }
            ]
          },
          "SigningJobArn": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Arn"
              },
              {
                "description": "The ARN of the signing job."
              }
            ]
          },
          "PackageType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PackageType"
              },
              {
                "description": "The type of deployment package. Set to <code>Image</code> for container image and set <code>Zip</code> for .zip file archive."
              }
            ]
          },
          "ImageConfigResponse": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ImageConfigResponse"
              },
              {
                "description": "The function's image configuration values."
              }
            ]
          }
        },
        "description": "Details about a function's configuration."
      },
      "Blob": {
        "type": "string",
        "format": "password"
      },
      "S3Bucket": {
        "type": "string",
        "pattern": "^[0-9A-Za-z\\.\\-_]*(?<!\\.)$",
        "minLength": 3,
        "maxLength": 63
      },
      "S3Key": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1024
      },
      "S3ObjectVersion": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1024
      },
      "SubnetIds": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/SubnetId"
        },
        "maxItems": 16
      },
      "SecurityGroupIds": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/SecurityGroupId"
        },
        "maxItems": 5
      },
      "ResourceArn": {
        "type": "string",
        "pattern": "(arn:(aws[a-zA-Z-]*)?:[a-z0-9-.]+:.*)|()"
      },
      "EnvironmentVariables": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/EnvironmentVariableValue"
        }
      },
      "TracingMode": {
        "type": "string",
        "enum": ["Active", "PassThrough"]
      },
      "TagValue": {
        "type": "string"
      },
      "LayerVersionArn": {
        "type": "string",
        "pattern": "arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\\d{12}:layer:[a-zA-Z0-9-_]+:[0-9]+",
        "minLength": 1,
        "maxLength": 140
      },
      "FileSystemConfig": {
        "type": "object",
        "required": ["Arn", "LocalMountPath"],
        "properties": {
          "Arn": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FileSystemArn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of the Amazon EFS access point that provides access to the file system."
              }
            ]
          },
          "LocalMountPath": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LocalMountPath"
              },
              {
                "description": "The path where the function can access the file system, starting with <code>/mnt/</code>."
              }
            ]
          }
        },
        "description": "Details about the connection between a Lambda function and an Amazon EFS file system."
      },
      "CodeStorageExceededException": {},
      "ResourceInUseException": {},
      "GetAccountSettingsResponse": {
        "type": "object",
        "example": {
          "AccountLimit": {
            "CodeSizeUnzipped": 262144000,
            "CodeSizeZipped": 52428800,
            "ConcurrentExecutions": 1000,
            "TotalCodeSize": 80530636800,
            "UnreservedConcurrentExecutions": 1000
          },
          "AccountUsage": {
            "FunctionCount": 4,
            "TotalCodeSize": 9426
          }
        },
        "properties": {
          "AccountLimit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountLimit"
              },
              {
                "description": "Limits that are related to concurrency and code storage."
              }
            ]
          },
          "AccountUsage": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountUsage"
              },
              {
                "description": "The number of functions and amount of storage in use."
              }
            ]
          }
        }
      },
      "GetFunctionResponse": {
        "type": "object",
        "example": {
          "Code": {
            "Location": "https://awslambda-us-west-2-tasks.s3.us-west-2.amazonaws.com/snapshots/123456789012/my-function-e7d9d1ed-xmpl-4f79-904a-4b87f2681f30?versionId=sH3TQwBOaUy...",
            "RepositoryType": "S3"
          },
          "Configuration": {
            "CodeSha256": "YFgDgEKG3ugvF1+pX64gV6tu9qNuIYNUdgJm8nCxsm4=",
            "CodeSize": 5797206,
            "Description": "Process image objects from Amazon S3.",
            "Environment": {
              "Variables": {
                "BUCKET": "my-bucket-1xpuxmplzrlbh",
                "PREFIX": "inbound"
              }
            },
            "FunctionArn": "arn:aws:lambda:us-west-2:123456789012:function:my-function",
            "FunctionName": "my-function",
            "Handler": "index.handler",
            "KMSKeyArn": "arn:aws:kms:us-west-2:123456789012:key/b0844d6c-xmpl-4463-97a4-d49f50839966",
            "LastModified": "2020-04-10T19:06:32.563+0000",
            "LastUpdateStatus": "Successful",
            "MemorySize": 256,
            "RevisionId": "b75dcd81-xmpl-48a8-a75a-93ba8b5b9727",
            "Role": "arn:aws:iam::123456789012:role/lambda-role",
            "Runtime": "nodejs12.x",
            "State": "Active",
            "Timeout": 15,
            "TracingConfig": {
              "Mode": "Active"
            },
            "Version": "$LATEST"
          },
          "Tags": {
            "DEPARTMENT": "Assets"
          }
        },
        "properties": {
          "Configuration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FunctionConfiguration"
              },
              {
                "description": "The configuration of the function or version."
              }
            ]
          },
          "Code": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FunctionCodeLocation"
              },
              {
                "description": "The deployment package of the function or version."
              }
            ]
          },
          "Tags": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Tags"
              },
              {
                "description": "The function's <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/tagging.html\">tags</a>."
              }
            ]
          },
          "Concurrency": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Concurrency"
              },
              {
                "description": "The function's <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/concurrent-executions.html\">reserved concurrency</a>."
              }
            ]
          }
        }
      },
      "GetFunctionConcurrencyResponse": {
        "type": "object",
        "example": {
          "ReservedConcurrentExecutions": 250
        },
        "properties": {
          "ReservedConcurrentExecutions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReservedConcurrentExecutions"
              },
              {
                "description": "The number of simultaneous executions that are reserved for the function."
              }
            ]
          }
        }
      },
      "FunctionEventInvokeConfig": {
        "type": "object",
        "example": {
          "DestinationConfig": {
            "OnFailure": {
              "Destination": "arn:aws:sqs:us-east-2:123456789012:destination"
            },
            "OnSuccess": {}
          },
          "FunctionArn": "arn:aws:lambda:us-east-2:123456789012:function:my-function:$LATEST",
          "LastModified": 1573687896.493,
          "MaximumEventAgeInSeconds": 3600,
          "MaximumRetryAttempts": 0
        },
        "properties": {
          "LastModified": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Date"
              },
              {
                "description": "The date and time that the configuration was last updated."
              }
            ]
          },
          "FunctionArn": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FunctionArn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of the function."
              }
            ]
          },
          "MaximumRetryAttempts": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MaximumRetryAttempts"
              },
              {
                "description": "The maximum number of times to retry when the function returns an error."
              }
            ]
          },
          "MaximumEventAgeInSeconds": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MaximumEventAgeInSeconds"
              },
              {
                "description": "The maximum age of a request that Lambda sends to a function for processing."
              }
            ]
          },
          "DestinationConfig": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DestinationConfig"
              },
              {
                "description": "<p>A destination for events after they have been sent to a function for processing.</p> <p class=\"title\"> <b>Destinations</b> </p> <ul> <li> <p> <b>Function</b> - The Amazon Resource Name (ARN) of a Lambda function.</p> </li> <li> <p> <b>Queue</b> - The ARN of an SQS queue.</p> </li> <li> <p> <b>Topic</b> - The ARN of an SNS topic.</p> </li> <li> <p> <b>Event Bus</b> - The ARN of an Amazon EventBridge event bus.</p> </li> </ul>"
              }
            ]
          }
        }
      },
      "GetLayerVersionResponse": {
        "type": "object",
        "example": {
          "CompatibleRuntimes": ["python3.8"],
          "Content": {
            "CodeSha256": "6x+xmpl/M3BnQUk7gS9sGmfeFsR/npojXoA3fZUv4eU=",
            "CodeSize": 9529009,
            "Location": "https://awslambda-us-east-2-layers.s3.us-east-2.amazonaws.com/snapshots/123456789012/blank-python-lib-e5212378-xmpl-44ee-8398-9d8ec5113949?versionId=WbZnvf..."
          },
          "CreatedDate": "2020-03-31T00:35:18.949+0000",
          "Description": "Dependencies for the blank-python sample app.",
          "LayerArn": "arn:aws:lambda:us-east-2:123456789012:layer:blank-python-lib",
          "LayerVersionArn": "arn:aws:lambda:us-east-2:123456789012:layer:blank-python-lib:3",
          "Version": 3
        },
        "properties": {
          "Content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LayerVersionContentOutput"
              },
              {
                "description": "Details about the layer version."
              }
            ]
          },
          "LayerArn": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LayerArn"
              },
              {
                "description": "The ARN of the layer."
              }
            ]
          },
          "LayerVersionArn": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LayerVersionArn"
              },
              {
                "description": "The ARN of the layer version."
              }
            ]
          },
          "Description": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Description"
              },
              {
                "description": "The description of the version."
              }
            ]
          },
          "CreatedDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Timestamp"
              },
              {
                "description": "The date that the layer version was created, in <a href=\"https://www.w3.org/TR/NOTE-datetime\">ISO-8601 format</a> (YYYY-MM-DDThh:mm:ss.sTZD)."
              }
            ]
          },
          "Version": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LayerVersionNumber"
              },
              {
                "description": "The version number."
              }
            ]
          },
          "CompatibleRuntimes": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CompatibleRuntimes"
              },
              {
                "description": "The layer's compatible runtimes."
              }
            ]
          },
          "LicenseInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LicenseInfo"
              },
              {
                "description": "The layer's software license."
              }
            ]
          }
        }
      },
      "GetLayerVersionPolicyResponse": {
        "type": "object",
        "properties": {
          "Policy": {
            "allOf": [
              {
                "$ref": "#/components/schemas/String"
              },
              {
                "description": "The policy document."
              }
            ]
          },
          "RevisionId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/String"
              },
              {
                "description": "A unique identifier for the current revision of the policy."
              }
            ]
          }
        }
      },
      "GetPolicyResponse": {
        "type": "object",
        "example": {
          "Policy": "{\"Version\":\"2012-10-17\",\"Id\":\"default\",\"Statement\":[{\"Sid\":\"xaccount\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::123456789012:root\"},\"Action\":\"lambda:InvokeFunction\",\"Resource\":\"arn:aws:lambda:us-east-2:123456789012:function:my-function:1\"}]}",
          "RevisionId": "4843f2f6-7c59-4fda-b484-afd0bc0e22b8"
        },
        "properties": {
          "Policy": {
            "allOf": [
              {
                "$ref": "#/components/schemas/String"
              },
              {
                "description": "The resource-based policy."
              }
            ]
          },
          "RevisionId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/String"
              },
              {
                "description": "A unique identifier for the current revision of the policy."
              }
            ]
          }
        }
      },
      "GetProvisionedConcurrencyConfigResponse": {
        "type": "object",
        "example": {
          "AllocatedProvisionedConcurrentExecutions": 100,
          "AvailableProvisionedConcurrentExecutions": 100,
          "LastModified": "2019-12-31T20:28:49+0000",
          "RequestedProvisionedConcurrentExecutions": 100,
          "Status": "READY"
        },
        "properties": {
          "RequestedProvisionedConcurrentExecutions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PositiveInteger"
              },
              {
                "description": "The amount of provisioned concurrency requested."
              }
            ]
          },
          "AvailableProvisionedConcurrentExecutions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NonNegativeInteger"
              },
              {
                "description": "The amount of provisioned concurrency available."
              }
            ]
          },
          "AllocatedProvisionedConcurrentExecutions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NonNegativeInteger"
              },
              {
                "description": "The amount of provisioned concurrency allocated."
              }
            ]
          },
          "Status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProvisionedConcurrencyStatusEnum"
              },
              {
                "description": "The status of the allocation process."
              }
            ]
          },
          "StatusReason": {
            "allOf": [
              {
                "$ref": "#/components/schemas/String"
              },
              {
                "description": "For failed allocations, the reason that provisioned concurrency could not be allocated."
              }
            ]
          },
          "LastModified": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Timestamp"
              },
              {
                "description": "The date and time that a user last updated the configuration, in <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\">ISO 8601 format</a>."
              }
            ]
          }
        }
      },
      "ProvisionedConcurrencyConfigNotFoundException": {},
      "InvocationResponse": {
        "type": "object",
        "example": {
          "Payload": "",
          "StatusCode": 202
        },
        "properties": {
          "StatusCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Integer"
              },
              {
                "description": "The HTTP status code is in the 200 range for a successful request. For the <code>RequestResponse</code> invocation type, this status code is 200. For the <code>Event</code> invocation type, this status code is 202. For the <code>DryRun</code> invocation type, the status code is 204."
              }
            ]
          },
          "Payload": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Blob"
              },
              {
                "description": "The response from the function, or an error object."
              }
            ]
          }
        }
      },
      "InvalidRequestContentException": {},
      "RequestTooLargeException": {},
      "UnsupportedMediaTypeException": {},
      "EC2UnexpectedException": {},
      "SubnetIPAddressLimitReachedException": {},
      "ENILimitReachedException": {},
      "EFSMountConnectivityException": {},
      "EFSMountFailureException": {},
      "EFSMountTimeoutException": {},
      "EFSIOException": {},
      "EC2ThrottledException": {},
      "EC2AccessDeniedException": {},
      "InvalidSubnetIDException": {},
      "InvalidSecurityGroupIDException": {},
      "InvalidZipFileException": {},
      "KMSDisabledException": {},
      "KMSInvalidStateException": {},
      "KMSAccessDeniedException": {},
      "KMSNotFoundException": {},
      "InvalidRuntimeException": {},
      "ResourceNotReadyException": {},
      "InvokeAsyncResponse": {
        "type": "object",
        "deprecated": true,
        "example": {
          "Status": 202
        },
        "properties": {
          "Status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HttpStatus"
              },
              {
                "description": "The status code."
              }
            ]
          }
        },
        "description": "A success response (<code>202 Accepted</code>) indicates that the request is queued for invocation. "
      },
      "ListAliasesResponse": {
        "type": "object",
        "example": {
          "Aliases": [
            {
              "AliasArn": "arn:aws:lambda:us-west-2:123456789012:function:my-function:BETA",
              "Description": "Production environment BLUE.",
              "FunctionVersion": "2",
              "Name": "BLUE",
              "RevisionId": "a410117f-xmpl-494e-8035-7e204bb7933b",
              "RoutingConfig": {
                "AdditionalVersionWeights": {
                  "1": 0.7
                }
              }
            },
            {
              "AliasArn": "arn:aws:lambda:us-west-2:123456789012:function:my-function:LIVE",
              "Description": "Production environment GREEN.",
              "FunctionVersion": "1",
              "Name": "GREEN",
              "RevisionId": "21d40116-xmpl-40ba-9360-3ea284da1bb5"
            }
          ]
        },
        "properties": {
          "NextMarker": {
            "allOf": [
              {
                "$ref": "#/components/schemas/String"
              },
              {
                "description": "The pagination token that's included if more results are available."
              }
            ]
          },
          "Aliases": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AliasList"
              },
              {
                "description": "A list of aliases."
              }
            ]
          }
        }
      },
      "ListEventSourceMappingsResponse": {
        "type": "object",
        "example": {
          "EventSourceMappings": [
            {
              "BatchSize": 5,
              "EventSourceArn": "arn:aws:sqs:us-west-2:123456789012:mySQSqueue",
              "FunctionArn": "arn:aws:lambda:us-west-2:123456789012:function:my-function",
              "LastModified": 1569284520.333,
              "State": "Enabled",
              "StateTransitionReason": "USER_INITIATED",
              "UUID": "a1b2c3d4-5678-90ab-cdef-11111EXAMPLE"
            }
          ]
        },
        "properties": {
          "NextMarker": {
            "allOf": [
              {
                "$ref": "#/components/schemas/String"
              },
              {
                "description": "A pagination token that's returned when the response doesn't contain all event source mappings."
              }
            ]
          },
          "EventSourceMappings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EventSourceMappingsList"
              },
              {
                "description": "A list of event source mappings."
              }
            ]
          }
        }
      },
      "ListFunctionEventInvokeConfigsResponse": {
        "type": "object",
        "example": {
          "FunctionEventInvokeConfigs": [
            {
              "FunctionArn": "arn:aws:lambda:us-east-2:123456789012:function:my-function:GREEN",
              "LastModified": 1577824406.719,
              "MaximumEventAgeInSeconds": 1800,
              "MaximumRetryAttempts": 2
            },
            {
              "FunctionArn": "arn:aws:lambda:us-east-2:123456789012:function:my-function:BLUE",
              "LastModified": 1577824396.653,
              "MaximumEventAgeInSeconds": 3600,
              "MaximumRetryAttempts": 0
            }
          ]
        },
        "properties": {
          "FunctionEventInvokeConfigs": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FunctionEventInvokeConfigList"
              },
              {
                "description": "A list of configurations."
              }
            ]
          },
          "NextMarker": {
            "allOf": [
              {
                "$ref": "#/components/schemas/String"
              },
              {
                "description": "The pagination token that's included if more results are available."
              }
            ]
          }
        }
      },
      "ListFunctionsResponse": {
        "type": "object",
        "example": {
          "Functions": [
            {
              "CodeSha256": "dBG9m8SGdmlEjw/JYXlhhvCrAv5TxvXsbL/RMr0fT/I=",
              "CodeSize": 294,
              "Description": "",
              "FunctionArn": "arn:aws:lambda:us-west-2:123456789012:function:helloworld",
              "FunctionName": "helloworld",
              "Handler": "helloworld.handler",
              "LastModified": "2019-09-23T18:32:33.857+0000",
              "MemorySize": 128,
              "RevisionId": "1718e831-badf-4253-9518-d0644210af7b",
              "Role": "arn:aws:iam::123456789012:role/service-role/MyTestFunction-role-zgur6bf4",
              "Runtime": "nodejs10.x",
              "Timeout": 3,
              "TracingConfig": {
                "Mode": "PassThrough"
              },
              "Version": "$LATEST"
            },
            {
              "CodeSha256": "sU0cJ2/hOZevwV/lTxCuQqK3gDZP3i8gUoqUUVRmY6E=",
              "CodeSize": 266,
              "Description": "",
              "FunctionArn": "arn:aws:lambda:us-west-2:123456789012:function:my-function",
              "FunctionName": "my-function",
              "Handler": "index.handler",
              "LastModified": "2019-10-01T16:47:28.490+0000",
              "MemorySize": 256,
              "RevisionId": "93017fc9-59cb-41dc-901b-4845ce4bf668",
              "Role": "arn:aws:iam::123456789012:role/service-role/helloWorldPython-role-uy3l9qyq",
              "Runtime": "nodejs10.x",
              "Timeout": 3,
              "TracingConfig": {
                "Mode": "PassThrough"
              },
              "Version": "$LATEST",
              "VpcConfig": {
                "SecurityGroupIds": [],
                "SubnetIds": [],
                "VpcId": ""
              }
            }
          ],
          "NextMarker": ""
        },
        "properties": {
          "NextMarker": {
            "allOf": [
              {
                "$ref": "#/components/schemas/String"
              },
              {
                "description": "The pagination token that's included if more results are available."
              }
            ]
          },
          "Functions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FunctionList"
              },
              {
                "description": "A list of Lambda functions."
              }
            ]
          }
        },
        "description": "A list of Lambda functions."
      },
      "ListLayerVersionsResponse": {
        "type": "object",
        "example": {
          "LayerVersions": [
            {
              "CompatibleRuntimes": ["java8"],
              "CreatedDate": "2020-03-18T23:38:42.284+0000",
              "Description": "Dependencies for the blank-java sample app.",
              "LayerVersionArn": "arn:aws:lambda:us-east-2:123456789012:layer:blank-java-lib:7",
              "Version": 7
            },
            {
              "CompatibleRuntimes": ["java8"],
              "CreatedDate": "2020-03-17T07:24:21.960+0000",
              "Description": "Dependencies for the blank-java sample app.",
              "LayerVersionArn": "arn:aws:lambda:us-east-2:123456789012:layer:blank-java-lib:6",
              "Version": 6
            }
          ]
        },
        "properties": {
          "NextMarker": {
            "allOf": [
              {
                "$ref": "#/components/schemas/String"
              },
              {
                "description": "A pagination token returned when the response doesn't contain all versions."
              }
            ]
          },
          "LayerVersions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LayerVersionsList"
              },
              {
                "description": "A list of versions."
              }
            ]
          }
        }
      },
      "ListLayersResponse": {
        "type": "object",
        "example": {
          "Layers": [
            {
              "LatestMatchingVersion": {
                "CompatibleRuntimes": ["python3.6", "python3.7"],
                "CreatedDate": "2018-11-15T00:37:46.592+0000",
                "Description": "My layer",
                "LayerVersionArn": "arn:aws:lambda:us-east-2:123456789012:layer:my-layer:2",
                "Version": 2
              },
              "LayerArn": "arn:aws:lambda:us-east-2:123456789012:layer:my-layer",
              "LayerName": "my-layer"
            }
          ]
        },
        "properties": {
          "NextMarker": {
            "allOf": [
              {
                "$ref": "#/components/schemas/String"
              },
              {
                "description": "A pagination token returned when the response doesn't contain all layers."
              }
            ]
          },
          "Layers": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LayersList"
              },
              {
                "description": "A list of function layers."
              }
            ]
          }
        }
      },
      "ListProvisionedConcurrencyConfigsResponse": {
        "type": "object",
        "example": {
          "ProvisionedConcurrencyConfigs": [
            {
              "AllocatedProvisionedConcurrentExecutions": 100,
              "AvailableProvisionedConcurrentExecutions": 100,
              "FunctionArn": "arn:aws:lambda:us-east-2:123456789012:function:my-function:GREEN",
              "LastModified": "2019-12-31T20:29:00+0000",
              "RequestedProvisionedConcurrentExecutions": 100,
              "Status": "READY"
            },
            {
              "AllocatedProvisionedConcurrentExecutions": 100,
              "AvailableProvisionedConcurrentExecutions": 100,
              "FunctionArn": "arn:aws:lambda:us-east-2:123456789012:function:my-function:BLUE",
              "LastModified": "2019-12-31T20:28:49+0000",
              "RequestedProvisionedConcurrentExecutions": 100,
              "Status": "READY"
            }
          ]
        },
        "properties": {
          "ProvisionedConcurrencyConfigs": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProvisionedConcurrencyConfigList"
              },
              {
                "description": "A list of provisioned concurrency configurations."
              }
            ]
          },
          "NextMarker": {
            "allOf": [
              {
                "$ref": "#/components/schemas/String"
              },
              {
                "description": "The pagination token that's included if more results are available."
              }
            ]
          }
        }
      },
      "ListTagsResponse": {
        "type": "object",
        "example": {
          "Tags": {
            "Category": "Web Tools",
            "Department": "Sales"
          }
        },
        "properties": {
          "Tags": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Tags"
              },
              {
                "description": "The function's tags."
              }
            ]
          }
        }
      },
      "ListVersionsByFunctionResponse": {
        "type": "object",
        "example": {
          "Versions": [
            {
              "CodeSha256": "YFgDgEKG3ugvF1+pX64gV6tu9qNuIYNUdgJm8nCxsm4=",
              "CodeSize": 5797206,
              "Description": "Process image objects from Amazon S3.",
              "Environment": {
                "Variables": {
                  "BUCKET": "my-bucket-1xpuxmplzrlbh",
                  "PREFIX": "inbound"
                }
              },
              "FunctionArn": "arn:aws:lambda:us-west-2:123456789012:function:my-function",
              "FunctionName": "my-function",
              "Handler": "index.handler",
              "KMSKeyArn": "arn:aws:kms:us-west-2:123456789012:key/b0844d6c-xmpl-4463-97a4-d49f50839966",
              "LastModified": "2020-04-10T19:06:32.563+0000",
              "MemorySize": 256,
              "RevisionId": "850ca006-2d98-4ff4-86db-8766e9d32fe9",
              "Role": "arn:aws:iam::123456789012:role/lambda-role",
              "Runtime": "nodejs12.x",
              "Timeout": 15,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Version": "$LATEST"
            },
            {
              "CodeSha256": "YFgDgEKG3ugvF1+pX64gV6tu9qNuIYNUdgJm8nCxsm4=",
              "CodeSize": 5797206,
              "Description": "Process image objects from Amazon S3.",
              "Environment": {
                "Variables": {
                  "BUCKET": "my-bucket-1xpuxmplzrlbh",
                  "PREFIX": "inbound"
                }
              },
              "FunctionArn": "arn:aws:lambda:us-west-2:123456789012:function:my-function",
              "FunctionName": "my-function",
              "Handler": "index.handler",
              "KMSKeyArn": "arn:aws:kms:us-west-2:123456789012:key/b0844d6c-xmpl-4463-97a4-d49f50839966",
              "LastModified": "2020-04-10T19:06:32.563+0000",
              "MemorySize": 256,
              "RevisionId": "b75dcd81-xmpl-48a8-a75a-93ba8b5b9727",
              "Role": "arn:aws:iam::123456789012:role/lambda-role",
              "Runtime": "nodejs12.x",
              "Timeout": 5,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Version": "1"
            }
          ]
        },
        "properties": {
          "NextMarker": {
            "allOf": [
              {
                "$ref": "#/components/schemas/String"
              },
              {
                "description": "The pagination token that's included if more results are available."
              }
            ]
          },
          "Versions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FunctionList"
              },
              {
                "description": "A list of Lambda function versions."
              }
            ]
          }
        }
      },
      "PublishLayerVersionResponse": {
        "type": "object",
        "example": {
          "CompatibleRuntimes": ["python3.6", "python3.7"],
          "Content": {
            "CodeSha256": "tv9jJO+rPbXUUXuRKi7CwHzKtLDkDRJLB3cC3Z/ouXo=",
            "CodeSize": 169,
            "Location": "https://awslambda-us-west-2-layers.s3.us-west-2.amazonaws.com/snapshots/123456789012/my-layer-4aaa2fbb-ff77-4b0a-ad92-5b78a716a96a?versionId=27iWyA73cCAYqyH..."
          },
          "CreatedDate": "2018-11-14T23:03:52.894+0000",
          "Description": "My Python layer",
          "LayerArn": "arn:aws:lambda:us-west-2:123456789012:layer:my-layer",
          "LayerVersionArn": "arn:aws:lambda:us-west-2:123456789012:layer:my-layer:1",
          "LicenseInfo": "MIT",
          "Version": 1
        },
        "properties": {
          "Content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LayerVersionContentOutput"
              },
              {
                "description": "Details about the layer version."
              }
            ]
          },
          "LayerArn": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LayerArn"
              },
              {
                "description": "The ARN of the layer."
              }
            ]
          },
          "LayerVersionArn": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LayerVersionArn"
              },
              {
                "description": "The ARN of the layer version."
              }
            ]
          },
          "Description": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Description"
              },
              {
                "description": "The description of the version."
              }
            ]
          },
          "CreatedDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Timestamp"
              },
              {
                "description": "The date that the layer version was created, in <a href=\"https://www.w3.org/TR/NOTE-datetime\">ISO-8601 format</a> (YYYY-MM-DDThh:mm:ss.sTZD)."
              }
            ]
          },
          "Version": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LayerVersionNumber"
              },
              {
                "description": "The version number."
              }
            ]
          },
          "CompatibleRuntimes": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CompatibleRuntimes"
              },
              {
                "description": "The layer's compatible runtimes."
              }
            ]
          },
          "LicenseInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LicenseInfo"
              },
              {
                "description": "The layer's software license."
              }
            ]
          }
        }
      },
      "Runtime": {
        "type": "string",
        "enum": [
          "nodejs",
          "nodejs4.3",
          "nodejs6.10",
          "nodejs8.10",
          "nodejs10.x",
          "nodejs12.x",
          "java8",
          "java8.al2",
          "java11",
          "python2.7",
          "python3.6",
          "python3.7",
          "python3.8",
          "dotnetcore1.0",
          "dotnetcore2.0",
          "dotnetcore2.1",
          "dotnetcore3.1",
          "nodejs4.3-edge",
          "go1.x",
          "ruby2.5",
          "ruby2.7",
          "provided",
          "provided.al2",
          "provided",
          "provided.al2"
        ]
      },
      "Concurrency": {
        "type": "object",
        "example": {
          "ReservedConcurrentExecutions": 100
        },
        "properties": {
          "ReservedConcurrentExecutions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReservedConcurrentExecutions"
              },
              {
                "description": "The number of concurrent executions that are reserved for this function. For more information, see <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/concurrent-executions.html\">Managing Concurrency</a>."
              }
            ]
          }
        }
      },
      "PutProvisionedConcurrencyConfigResponse": {
        "type": "object",
        "example": {
          "AllocatedProvisionedConcurrentExecutions": 0,
          "LastModified": "2019-11-21T19:32:12+0000",
          "RequestedProvisionedConcurrentExecutions": 100,
          "Status": "IN_PROGRESS"
        },
        "properties": {
          "RequestedProvisionedConcurrentExecutions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PositiveInteger"
              },
              {
                "description": "The amount of provisioned concurrency requested."
              }
            ]
          },
          "AvailableProvisionedConcurrentExecutions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NonNegativeInteger"
              },
              {
                "description": "The amount of provisioned concurrency available."
              }
            ]
          },
          "AllocatedProvisionedConcurrentExecutions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NonNegativeInteger"
              },
              {
                "description": "The amount of provisioned concurrency allocated."
              }
            ]
          },
          "Status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProvisionedConcurrencyStatusEnum"
              },
              {
                "description": "The status of the allocation process."
              }
            ]
          },
          "StatusReason": {
            "allOf": [
              {
                "$ref": "#/components/schemas/String"
              },
              {
                "description": "For failed allocations, the reason that provisioned concurrency could not be allocated."
              }
            ]
          },
          "LastModified": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Timestamp"
              },
              {
                "description": "The date and time that a user last updated the configuration, in <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\">ISO 8601 format</a>."
              }
            ]
          }
        }
      },
      "TagKey": {
        "type": "string"
      },
      "Long": {
        "type": "integer"
      },
      "Integer": {
        "type": "integer"
      },
      "UnreservedConcurrentExecutions": {
        "type": "integer",
        "minimum": 0
      },
      "AccountLimit": {
        "type": "object",
        "properties": {
          "TotalCodeSize": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Long"
              },
              {
                "description": "The amount of storage space that you can use for all deployment packages and layer archives."
              }
            ]
          },
          "CodeSizeUnzipped": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Long"
              },
              {
                "description": "The maximum size of a function's deployment package and layers when they're extracted."
              }
            ]
          },
          "CodeSizeZipped": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Long"
              },
              {
                "description": "The maximum size of a deployment package when it's uploaded directly to AWS Lambda. Use Amazon S3 for larger files."
              }
            ]
          },
          "ConcurrentExecutions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Integer"
              },
              {
                "description": "The maximum number of simultaneous function executions."
              }
            ]
          },
          "UnreservedConcurrentExecutions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UnreservedConcurrentExecutions"
              },
              {
                "description": "The maximum number of simultaneous function executions, minus the capacity that's reserved for individual functions with <a>PutFunctionConcurrency</a>."
              }
            ]
          }
        },
        "description": "Limits that are related to concurrency and storage. All file and storage sizes are in bytes."
      },
      "AccountUsage": {
        "type": "object",
        "properties": {
          "TotalCodeSize": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Long"
              },
              {
                "description": "The amount of storage space, in bytes, that's being used by deployment packages and layer archives."
              }
            ]
          },
          "FunctionCount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Long"
              },
              {
                "description": "The number of Lambda functions."
              }
            ]
          }
        },
        "description": "The number of functions and amount of storage in use."
      },
      "LayerName": {
        "type": "string",
        "pattern": "(arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\\d{12}:layer:[a-zA-Z0-9-_]+)|[a-zA-Z0-9-_]+",
        "minLength": 1,
        "maxLength": 140
      },
      "LayerVersionNumber": {
        "type": "integer"
      },
      "String": {
        "type": "string"
      },
      "FunctionName": {
        "type": "string",
        "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
        "minLength": 1,
        "maxLength": 140
      },
      "Arn": {
        "type": "string",
        "pattern": "arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\\-])+:([a-z]{2}(-gov)?-[a-z]+-\\d{1})?:(\\d{12})?:(.*)"
      },
      "Weight": {
        "type": "number",
        "format": "double",
        "minimum": 0,
        "maximum": 1
      },
      "Alias": {
        "type": "string",
        "pattern": "(?!^[0-9]+$)([a-zA-Z0-9-_]+)",
        "minLength": 1,
        "maxLength": 128
      },
      "FunctionArn": {
        "type": "string",
        "pattern": "arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}(-gov)?-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9-_]+(:(\\$LATEST|[a-zA-Z0-9-_]+))?"
      },
      "Version": {
        "type": "string",
        "pattern": "(\\$LATEST|[0-9]+)",
        "minLength": 1,
        "maxLength": 1024
      },
      "Description": {
        "type": "string",
        "minLength": 0,
        "maxLength": 256
      },
      "AliasRoutingConfiguration": {
        "type": "object",
        "properties": {
          "AdditionalVersionWeights": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AdditionalVersionWeights"
              },
              {
                "description": "The second version, and the percentage of traffic that's routed to it."
              }
            ]
          }
        },
        "description": "The <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/lambda-traffic-shifting-using-aliases.html\">traffic-shifting</a> configuration of a Lambda function alias."
      },
      "AliasList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/AliasConfiguration"
        }
      },
      "BatchSize": {
        "type": "integer",
        "minimum": 1,
        "maximum": 10000
      },
      "BisectBatchOnFunctionError": {
        "type": "boolean"
      },
      "CompatibleRuntimes": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Runtime"
        },
        "maxItems": 5
      },
      "ReservedConcurrentExecutions": {
        "type": "integer",
        "minimum": 0
      },
      "MaximumBatchingWindowInSeconds": {
        "type": "integer",
        "minimum": 0,
        "maximum": 300
      },
      "ParallelizationFactor": {
        "type": "integer",
        "minimum": 1,
        "maximum": 10
      },
      "EventSourcePosition": {
        "type": "string",
        "enum": ["TRIM_HORIZON", "LATEST", "AT_TIMESTAMP"]
      },
      "Date": {
        "type": "string",
        "format": "date-time"
      },
      "DestinationConfig": {
        "type": "object",
        "properties": {
          "OnSuccess": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OnSuccess"
              },
              {
                "description": "The destination configuration for successful invocations."
              }
            ]
          },
          "OnFailure": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OnFailure"
              },
              {
                "description": "The destination configuration for failed invocations."
              }
            ]
          }
        },
        "description": "A configuration object that specifies the destination of an event after Lambda processes it."
      },
      "MaximumRecordAgeInSeconds": {
        "type": "integer",
        "minimum": -1,
        "maximum": 604800
      },
      "MaximumRetryAttemptsEventSourceMapping": {
        "type": "integer",
        "minimum": -1,
        "maximum": 10000
      },
      "Topics": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Topic"
        },
        "minItems": 1,
        "maxItems": 1
      },
      "RoleArn": {
        "type": "string",
        "pattern": "arn:(aws[a-zA-Z-]*)?:iam::\\d{12}:role/?[a-zA-Z_0-9+=,.@\\-_/]+"
      },
      "Handler": {
        "type": "string",
        "pattern": "[^\\s]+",
        "maxLength": 128
      },
      "Timeout": {
        "type": "integer",
        "minimum": 1
      },
      "MemorySize": {
        "type": "integer",
        "minimum": 128,
        "maximum": 3008
      },
      "DeadLetterConfig": {
        "type": "object",
        "properties": {
          "TargetArn": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceArn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of an Amazon SQS queue or Amazon SNS topic."
              }
            ]
          }
        },
        "description": "The <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#dlq\">dead-letter queue</a> for failed asynchronous invocations."
      },
      "KMSKeyArn": {
        "type": "string",
        "pattern": "(arn:(aws[a-zA-Z-]*)?:[a-z0-9-.]+:.*)|()"
      },
      "Tags": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/TagValue"
        }
      },
      "FileSystemConfigList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/FileSystemConfig"
        },
        "maxItems": 1
      },
      "DestinationArn": {
        "type": "string",
        "pattern": "^$|arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\\-])+:([a-z]{2}(-gov)?-[a-z]+-\\d{1})?:(\\d{12})?:(.*)",
        "minLength": 0,
        "maxLength": 350
      },
      "SensitiveString": {
        "type": "string",
        "format": "password"
      },
      "EnvironmentError": {
        "type": "object",
        "properties": {
          "ErrorCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/String"
              },
              {
                "description": "The error code."
              }
            ]
          },
          "Message": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SensitiveString"
              },
              {
                "description": "The error message."
              }
            ]
          }
        },
        "description": "Error messages for environment variables that couldn't be applied."
      },
      "EnvironmentResponse": {
        "type": "object",
        "properties": {
          "Variables": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EnvironmentVariables"
              },
              {
                "description": "Environment variable key-value pairs."
              }
            ]
          },
          "Error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EnvironmentError"
              },
              {
                "description": "Error messages for environment variables that couldn't be applied."
              }
            ]
          }
        },
        "description": "The results of an operation to update or read environment variables. If the operation is successful, the response contains the environment variables. If it failed, the response contains details about the error."
      },
      "EnvironmentVariableValue": {
        "type": "string",
        "format": "password"
      },
      "EventSourceMappingsList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/EventSourceMappingConfiguration"
        }
      },
      "FileSystemArn": {
        "type": "string",
        "pattern": "arn:aws[a-zA-Z-]*:elasticfilesystem:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\\d{1}:\\d{12}:access-point/fsap-[a-f0-9]{17}",
        "maxLength": 200
      },
      "LocalMountPath": {
        "type": "string",
        "pattern": "^/mnt/[a-zA-Z0-9-_.]+$",
        "maxLength": 160
      },
      "FunctionCodeLocation": {
        "type": "object",
        "properties": {
          "RepositoryType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/String"
              },
              {
                "description": "The service that's hosting the file."
              }
            ]
          },
          "Location": {
            "allOf": [
              {
                "$ref": "#/components/schemas/String"
              },
              {
                "description": "A presigned URL that you can use to download the deployment package."
              }
            ]
          },
          "ImageUri": {
            "allOf": [
              {
                "$ref": "#/components/schemas/String"
              },
              {
                "description": "URI of a container image in the Amazon ECR registry."
              }
            ]
          },
          "ResolvedImageUri": {
            "allOf": [
              {
                "$ref": "#/components/schemas/String"
              },
              {
                "description": "The resolved URI for the image."
              }
            ]
          }
        },
        "description": "Details about a function's deployment package."
      },
      "NamespacedFunctionName": {
        "type": "string",
        "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_\\.]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
        "minLength": 1,
        "maxLength": 170
      },
      "NameSpacedFunctionArn": {
        "type": "string",
        "pattern": "arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}(-gov)?-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9-_\\.]+(:(\\$LATEST|[a-zA-Z0-9-_]+))?"
      },
      "Timestamp": {
        "type": "string"
      },
      "VpcConfigResponse": {
        "type": "object",
        "properties": {
          "SubnetIds": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SubnetIds"
              },
              {
                "description": "A list of VPC subnet IDs."
              }
            ]
          },
          "SecurityGroupIds": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SecurityGroupIds"
              },
              {
                "description": "A list of VPC security groups IDs."
              }
            ]
          },
          "VpcId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VpcId"
              },
              {
                "description": "The ID of the VPC."
              }
            ]
          }
        },
        "description": "The VPC security groups and subnets that are attached to a Lambda function."
      },
      "TracingConfigResponse": {
        "type": "object",
        "properties": {
          "Mode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TracingMode"
              },
              {
                "description": "The tracing mode."
              }
            ]
          }
        },
        "description": "The function's AWS X-Ray tracing configuration."
      },
      "LayersReferenceList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Layer"
        }
      },
      "State": {
        "type": "string",
        "enum": ["Pending", "Active", "Inactive", "Failed"]
      },
      "StateReason": {
        "type": "string"
      },
      "StateReasonCode": {
        "type": "string",
        "enum": [
          "Idle",
          "Creating",
          "Restoring",
          "EniLimitExceeded",
          "InsufficientRolePermissions",
          "InvalidConfiguration",
          "InternalError",
          "SubnetOutOfIPAddresses",
          "InvalidSubnet",
          "InvalidSecurityGroup",
          "ImageDeleted",
          "ImageAccessDenied",
          "InvalidImage"
        ]
      },
      "LastUpdateStatus": {
        "type": "string",
        "enum": ["Successful", "Failed", "InProgress"]
      },
      "LastUpdateStatusReason": {
        "type": "string"
      },
      "LastUpdateStatusReasonCode": {
        "type": "string",
        "enum": [
          "EniLimitExceeded",
          "InsufficientRolePermissions",
          "InvalidConfiguration",
          "InternalError",
          "SubnetOutOfIPAddresses",
          "InvalidSubnet",
          "InvalidSecurityGroup",
          "ImageDeleted",
          "ImageAccessDenied",
          "InvalidImage"
        ]
      },
      "MaximumRetryAttempts": {
        "type": "integer",
        "minimum": 0,
        "maximum": 2
      },
      "MaximumEventAgeInSeconds": {
        "type": "integer",
        "minimum": 60,
        "maximum": 21600
      },
      "FunctionEventInvokeConfigList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/FunctionEventInvokeConfig"
        }
      },
      "FunctionList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/FunctionConfiguration"
        }
      },
      "LayerVersionContentOutput": {
        "type": "object",
        "properties": {
          "Location": {
            "allOf": [
              {
                "$ref": "#/components/schemas/String"
              },
              {
                "description": "A link to the layer archive in Amazon S3 that is valid for 10 minutes."
              }
            ]
          },
          "CodeSha256": {
            "allOf": [
              {
                "$ref": "#/components/schemas/String"
              },
              {
                "description": "The SHA-256 hash of the layer archive."
              }
            ]
          },
          "CodeSize": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Long"
              },
              {
                "description": "The size of the layer archive in bytes."
              }
            ]
          },
          "SigningProfileVersionArn": {
            "allOf": [
              {
                "$ref": "#/components/schemas/String"
              },
              {
                "description": "The Amazon Resource Name (ARN) for a signing profile version."
              }
            ]
          },
          "SigningJobArn": {
            "allOf": [
              {
                "$ref": "#/components/schemas/String"
              },
              {
                "description": "The Amazon Resource Name (ARN) of a signing job."
              }
            ]
          }
        },
        "description": "Details about a version of an <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\">AWS Lambda layer</a>."
      },
      "LayerArn": {
        "type": "string",
        "pattern": "arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\\d{12}:layer:[a-zA-Z0-9-_]+",
        "minLength": 1,
        "maxLength": 140
      },
      "LicenseInfo": {
        "type": "string",
        "maxLength": 512
      },
      "PositiveInteger": {
        "type": "integer",
        "minimum": 1
      },
      "NonNegativeInteger": {
        "type": "integer",
        "minimum": 0
      },
      "ProvisionedConcurrencyStatusEnum": {
        "type": "string",
        "enum": ["IN_PROGRESS", "READY", "FAILED"]
      },
      "HttpStatus": {
        "type": "integer"
      },
      "Layer": {
        "type": "object",
        "properties": {
          "Arn": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LayerVersionArn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of the function layer."
              }
            ]
          },
          "CodeSize": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Long"
              },
              {
                "description": "The size of the layer archive in bytes."
              }
            ]
          },
          "SigningProfileVersionArn": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Arn"
              },
              {
                "description": "The Amazon Resource Name (ARN) for a signing profile version."
              }
            ]
          },
          "SigningJobArn": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Arn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of a signing job."
              }
            ]
          }
        },
        "description": "An <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\">AWS Lambda layer</a>."
      },
      "LayerVersionsListItem": {
        "type": "object",
        "properties": {
          "LayerVersionArn": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LayerVersionArn"
              },
              {
                "description": "The ARN of the layer version."
              }
            ]
          },
          "Version": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LayerVersionNumber"
              },
              {
                "description": "The version number."
              }
            ]
          },
          "Description": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Description"
              },
              {
                "description": "The description of the version."
              }
            ]
          },
          "CreatedDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Timestamp"
              },
              {
                "description": "The date that the version was created, in ISO 8601 format. For example, <code>2018-11-27T15:10:45.123+0000</code>."
              }
            ]
          },
          "CompatibleRuntimes": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CompatibleRuntimes"
              },
              {
                "description": "The layer's compatible runtimes."
              }
            ]
          },
          "LicenseInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LicenseInfo"
              },
              {
                "description": "The layer's open-source license."
              }
            ]
          }
        },
        "description": "Details about a version of an <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\">AWS Lambda layer</a>."
      },
      "LayerVersionsList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/LayerVersionsListItem"
        }
      },
      "LayersListItem": {
        "type": "object",
        "properties": {
          "LayerName": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LayerName"
              },
              {
                "description": "The name of the layer."
              }
            ]
          },
          "LayerArn": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LayerArn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of the function layer."
              }
            ]
          },
          "LatestMatchingVersion": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LayerVersionsListItem"
              },
              {
                "description": "The newest version of the layer."
              }
            ]
          }
        },
        "description": "Details about an <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\">AWS Lambda layer</a>."
      },
      "LayersList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/LayersListItem"
        }
      },
      "ProvisionedConcurrencyConfigList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ProvisionedConcurrencyConfigListItem"
        }
      },
      "ProvisionedConcurrencyConfigListItem": {
        "type": "object",
        "properties": {
          "FunctionArn": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FunctionArn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of the alias or version."
              }
            ]
          },
          "RequestedProvisionedConcurrentExecutions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PositiveInteger"
              },
              {
                "description": "The amount of provisioned concurrency requested."
              }
            ]
          },
          "AvailableProvisionedConcurrentExecutions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NonNegativeInteger"
              },
              {
                "description": "The amount of provisioned concurrency available."
              }
            ]
          },
          "AllocatedProvisionedConcurrentExecutions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NonNegativeInteger"
              },
              {
                "description": "The amount of provisioned concurrency allocated."
              }
            ]
          },
          "Status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProvisionedConcurrencyStatusEnum"
              },
              {
                "description": "The status of the allocation process."
              }
            ]
          },
          "StatusReason": {
            "allOf": [
              {
                "$ref": "#/components/schemas/String"
              },
              {
                "description": "For failed allocations, the reason that provisioned concurrency could not be allocated."
              }
            ]
          },
          "LastModified": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Timestamp"
              },
              {
                "description": "The date and time that a user last updated the configuration, in <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\">ISO 8601 format</a>."
              }
            ]
          }
        },
        "description": "Details about the provisioned concurrency configuration for a function alias or version."
      },
      "SecurityGroupId": {
        "type": "string"
      },
      "SubnetId": {
        "type": "string"
      },
      "VpcId": {
        "type": "string"
      },
      "Queue": {
        "type": "string",
        "pattern": "[\\s\\S]*",
        "minLength": 1,
        "maxLength": 1000
      },
      "SourceAccessConfiguration": {
        "type": "object",
        "properties": {
          "Type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SourceAccessType"
              },
              {
                "description": "<p>To reference the secret, use the following format: <code>[ { \"Type\": \"BASIC_AUTH\", \"URI\": \"secretARN\" } ]</code> </p> <p>The value of <code>Type</code> is always <code>BASIC_AUTH</code>. To encrypt the secret, you can use customer or service managed keys. When using a customer managed KMS key, the Lambda execution role requires <code>kms:Decrypt</code> permissions.</p>"
              }
            ]
          },
          "URI": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Arn"
              },
              {
                "description": "<p>To reference the secret, use the following format: <code>[ { \"Type\": \"BASIC_AUTH\", \"URI\": \"secretARN\" } ]</code> </p> <p>The value of <code>Type</code> is always <code>BASIC_AUTH</code>. To encrypt the secret, you can use customer or service managed keys. When using a customer managed KMS key, the Lambda execution role requires <code>kms:Decrypt</code> permissions.</p>"
              }
            ]
          }
        },
        "description": " (MQ) The Secrets Manager secret that stores your broker credentials. To store your secret, use the following format: <code> { \"username\": \"your username\", \"password\": \"your password\" }</code> "
      },
      "Queues": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Queue"
        },
        "minItems": 1,
        "maxItems": 1
      },
      "SourceAccessConfigurations": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/SourceAccessConfiguration"
        },
        "minItems": 1,
        "maxItems": 1
      },
      "SourceAccessType": {
        "type": "string",
        "enum": [
          "BASIC_AUTH",
          "VPC_SUBNET",
          "VPC_SECURITY_GROUP",
          "SASL_SCRAM_512_AUTH",
          "SASL_SCRAM_256_AUTH",
          "VIRTUAL_HOST"
        ]
      },
      "CreateCodeSigningConfigResponse": {
        "type": "object",
        "required": ["CodeSigningConfig"],
        "properties": {
          "CodeSigningConfig": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CodeSigningConfig"
              },
              {
                "description": "The code signing configuration."
              }
            ]
          }
        }
      },
      "SigningProfileVersionArns": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Arn"
        },
        "minItems": 1,
        "maxItems": 20
      },
      "CodeSigningPolicy": {
        "type": "string",
        "enum": ["Warn", "Enforce"]
      },
      "CodeVerificationFailedException": {},
      "InvalidCodeSignatureException": {},
      "CodeSigningConfigNotFoundException": {},
      "DeleteCodeSigningConfigResponse": {
        "type": "object",
        "properties": {}
      },
      "GetCodeSigningConfigResponse": {
        "type": "object",
        "required": ["CodeSigningConfig"],
        "properties": {
          "CodeSigningConfig": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CodeSigningConfig"
              },
              {
                "description": "The code signing configuration"
              }
            ]
          }
        }
      },
      "GetFunctionCodeSigningConfigResponse": {
        "type": "object",
        "required": ["CodeSigningConfigArn", "FunctionName"],
        "properties": {
          "CodeSigningConfigArn": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CodeSigningConfigArn"
              },
              {
                "description": "The The Amazon Resource Name (ARN) of the code signing configuration."
              }
            ]
          },
          "FunctionName": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FunctionName"
              },
              {
                "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>"
              }
            ]
          }
        }
      },
      "ListCodeSigningConfigsResponse": {
        "type": "object",
        "properties": {
          "NextMarker": {
            "allOf": [
              {
                "$ref": "#/components/schemas/String"
              },
              {
                "description": "The pagination token that's included if more results are available."
              }
            ]
          },
          "CodeSigningConfigs": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CodeSigningConfigList"
              },
              {
                "description": "The code signing configurations"
              }
            ]
          }
        }
      },
      "ListFunctionsByCodeSigningConfigResponse": {
        "type": "object",
        "properties": {
          "NextMarker": {
            "allOf": [
              {
                "$ref": "#/components/schemas/String"
              },
              {
                "description": "The pagination token that's included if more results are available."
              }
            ]
          },
          "FunctionArns": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FunctionArnList"
              },
              {
                "description": "The function ARNs. "
              }
            ]
          }
        }
      },
      "PutFunctionCodeSigningConfigResponse": {
        "type": "object",
        "required": ["CodeSigningConfigArn", "FunctionName"],
        "properties": {
          "CodeSigningConfigArn": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CodeSigningConfigArn"
              },
              {
                "description": "The The Amazon Resource Name (ARN) of the code signing configuration."
              }
            ]
          },
          "FunctionName": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FunctionName"
              },
              {
                "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>"
              }
            ]
          }
        }
      },
      "UpdateCodeSigningConfigResponse": {
        "type": "object",
        "required": ["CodeSigningConfig"],
        "properties": {
          "CodeSigningConfig": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CodeSigningConfig"
              },
              {
                "description": "The code signing configuration"
              }
            ]
          }
        }
      },
      "AllowedPublishers": {
        "type": "object",
        "required": ["SigningProfileVersionArns"],
        "properties": {
          "SigningProfileVersionArns": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SigningProfileVersionArns"
              },
              {
                "description": "The Amazon Resource Name (ARN) for each of the signing profiles. A signing profile defines a trusted user who can sign a code package. "
              }
            ]
          }
        },
        "description": "List of signing profiles that can sign a code package. "
      },
      "CodeSigningConfigId": {
        "type": "string",
        "pattern": "csc-[a-zA-Z0-9-_\\.]{17}"
      },
      "CodeSigningConfigArn": {
        "type": "string",
        "pattern": "arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\\d{1}:\\d{12}:code-signing-config:csc-[a-z0-9]{17}",
        "maxLength": 200
      },
      "CodeSigningPolicies": {
        "type": "object",
        "properties": {
          "UntrustedArtifactOnDeployment": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CodeSigningPolicy"
              },
              {
                "description": "<p>Code signing configuration policy for deployment validation failure. If you set the policy to <code>Enforce</code>, Lambda blocks the deployment request if code-signing validation checks fail. If you set the policy to <code>Warn</code>, Lambda allows the deployment and creates a CloudWatch log. </p> <p>Default value: <code>Warn</code> </p>"
              }
            ]
          }
        },
        "description": "Code signing configuration policies specifies the validation failure action for signature mismatch or expiry."
      },
      "CodeSigningConfig": {
        "type": "object",
        "required": [
          "CodeSigningConfigId",
          "CodeSigningConfigArn",
          "AllowedPublishers",
          "CodeSigningPolicies",
          "LastModified"
        ],
        "properties": {
          "CodeSigningConfigId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CodeSigningConfigId"
              },
              {
                "description": "Unique identifer for the Code signing configuration."
              }
            ]
          },
          "CodeSigningConfigArn": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CodeSigningConfigArn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of the Code signing configuration."
              }
            ]
          },
          "Description": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Description"
              },
              {
                "description": "Code signing configuration description."
              }
            ]
          },
          "AllowedPublishers": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AllowedPublishers"
              },
              {
                "description": "List of allowed publishers."
              }
            ]
          },
          "CodeSigningPolicies": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CodeSigningPolicies"
              },
              {
                "description": "The code signing policy controls the validation failure action for signature mismatch or expiry."
              }
            ]
          },
          "LastModified": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Timestamp"
              },
              {
                "description": "The date and time that the Code signing configuration was last modified, in ISO-8601 format (YYYY-MM-DDThh:mm:ss.sTZD). "
              }
            ]
          }
        },
        "description": "Details about a Code signing configuration. "
      },
      "CodeSigningConfigList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/CodeSigningConfig"
        }
      },
      "FunctionArnList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/FunctionArn"
        }
      },
      "Endpoints": {
        "type": "object",
        "minProperties": 1,
        "maxProperties": 2,
        "additionalProperties": {
          "$ref": "#/components/schemas/EndpointLists"
        }
      },
      "FunctionResponseType": {
        "type": "string",
        "enum": ["ReportBatchItemFailures"]
      },
      "StringList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/String"
        },
        "maxItems": 1500
      },
      "WorkingDirectory": {
        "type": "string",
        "maxLength": 1000
      },
      "TumblingWindowInSeconds": {
        "type": "integer",
        "minimum": 0,
        "maximum": 900
      },
      "SelfManagedEventSource": {
        "type": "object",
        "properties": {
          "Endpoints": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Endpoints"
              },
              {
                "description": "The list of bootstrap servers for your Kafka brokers in the following format: <code>\"KAFKA_BOOTSTRAP_SERVERS\": [\"abc.xyz.com:xxxx\",\"abc2.xyz.com:xxxx\"]</code>."
              }
            ]
          }
        },
        "description": "The self-managed Apache Kafka cluster for your event source."
      },
      "FunctionResponseTypeList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/FunctionResponseType"
        },
        "minItems": 0,
        "maxItems": 1
      },
      "PackageType": {
        "type": "string",
        "enum": ["Zip", "Image"]
      },
      "ImageConfig": {
        "type": "object",
        "properties": {
          "EntryPoint": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StringList"
              },
              {
                "description": "Specifies the entry point to their application, which is typically the location of the runtime executable."
              }
            ]
          },
          "Command": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StringList"
              },
              {
                "description": "Specifies parameters that you want to pass in with ENTRYPOINT. "
              }
            ]
          },
          "WorkingDirectory": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WorkingDirectory"
              },
              {
                "description": "Specifies the working directory."
              }
            ]
          }
        },
        "description": "Configuration values that override the container image Dockerfile settings. See <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/images-create.html#images-parms\">Container settings</a>. "
      },
      "Endpoint": {
        "type": "string",
        "pattern": "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9]):[0-9]{1,5}",
        "minLength": 1,
        "maxLength": 300
      },
      "EndpointLists": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Endpoint"
        },
        "minItems": 1,
        "maxItems": 10
      },
      "ImageConfigResponse": {
        "type": "object",
        "properties": {
          "ImageConfig": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ImageConfig"
              },
              {
                "description": "Configuration values that override the container image Dockerfile."
              }
            ]
          },
          "Error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ImageConfigError"
              },
              {
                "description": "Error response to GetFunctionConfiguration."
              }
            ]
          }
        },
        "description": "Response to GetFunctionConfiguration request."
      },
      "ImageConfigError": {
        "type": "object",
        "properties": {
          "ErrorCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/String"
              },
              {
                "description": "Error code."
              }
            ]
          },
          "Message": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SensitiveString"
              },
              {
                "description": "Error message."
              }
            ]
          }
        },
        "description": "Error response to GetFunctionConfiguration."
      }
    }
  },
  "security": [
    {
      "hmac": []
    }
  ],
  "x-metadata": {
    "apiVersion": "2015-03-31",
    "endpointPrefix": "lambda",
    "protocol": "rest-json",
    "serviceFullName": "AWS Lambda",
    "serviceId": "Lambda",
    "signatureVersion": "v4",
    "uid": "lambda-2015-03-31",
    "targetPrefix": "AWSGirApiService"
  }
}
