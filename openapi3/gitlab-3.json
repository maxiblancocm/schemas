{
  "openapi": "3.0.0",
  "info": {
    "version": "v3",
    "title": "Gitlab",
    "x-categories": ["software-development"],
    "description": "The platform for modern developers\nGitLab unifies issues, code review, CI and CD into a single UI",
    "x-logo": {
      "url": "https://raw.githubusercontent.com/chainjet/assets/master/integrations/gitlab.svg"
    }
  },
  "security": [{ "private_token_header": [] }, { "private_token_query": [] }],
  "tags": [
    { "description": "Operations about groups", "name": "groups" },
    { "description": "Operations about projects", "name": "projects" },
    { "description": "Operations about internals", "name": "internal" },
    { "description": "Operations about issues", "name": "issues" },
    { "description": "Operations about keys", "name": "keys" },
    { "description": "Operations about cis", "name": "ci" },
    { "description": "Operations about namespaces", "name": "namespaces" },
    {
      "description": "Operations about notification_settings",
      "name": "notification_settings"
    },
    { "description": "Operations about runners", "name": "runners" },
    { "description": "Operations about snippets", "name": "snippets" },
    { "description": "Operations about hooks", "name": "hooks" },
    { "description": "Operations about todos", "name": "todos" },
    { "description": "Operations about users", "name": "users" },
    { "description": "Operations about users", "name": "user" },
    { "description": "Operations about deploy_keys", "name": "deploy_keys" },
    { "description": "Operations about sessions", "name": "session" },
    { "description": "Operations about applications", "name": "application" },
    { "description": "Operations about sidekiqs", "name": "sidekiq" },
    { "description": "Operations about licenses", "name": "licenses" },
    { "description": "Operations about templates", "name": "templates" },
    { "description": "Operations about gitignores", "name": "gitignores" },
    {
      "description": "Operations about gitlab_ci_ymls",
      "name": "gitlab_ci_ymls"
    },
    { "description": "Operations about dockerfiles", "name": "dockerfiles" },
    { "description": "Operations about versions", "name": "version" }
  ],
  "paths": {
    "/v3/application/settings": {
      "get": {
        "description": "Get the current application settings",
        "operationId": "getV3ApplicationSettings",
        "responses": {
          "200": {
            "description": "Get the current application settings",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApplicationSetting" }
              }
            }
          }
        },
        "summary": "Get Application Settings",
        "tags": ["application"]
      },
      "put": {
        "description": "Modify application settings",
        "operationId": "putV3ApplicationSettings",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "default_branch_protection": {
                    "description": "Determine if developers can push to master",
                    "type": "integer",
                    "format": "int32",
                    "enum": [0, 1, 2]
                  },
                  "default_project_visibility": {
                    "description": "The default project visibility",
                    "type": "integer",
                    "format": "int32",
                    "enum": [0, 10, 20]
                  },
                  "default_snippet_visibility": {
                    "description": "The default snippet visibility",
                    "type": "integer",
                    "format": "int32",
                    "enum": [0, 10, 20]
                  },
                  "default_group_visibility": {
                    "description": "The default group visibility",
                    "type": "integer",
                    "format": "int32",
                    "enum": [0, 10, 20]
                  },
                  "restricted_visibility_levels": {
                    "description": "Selected levels cannot be used by non-admin users for projects or snippets. If the public level is restricted, user profiles are only visible to logged in users.",
                    "type": "array",
                    "items": { "type": "string" }
                  },
                  "import_sources": {
                    "description": "Enabled sources for code import during project creation. OmniAuth must be configured for GitHub, Bitbucket, and GitLab.com",
                    "type": "array",
                    "enum": [
                      "github",
                      "bitbucket",
                      "gitlab",
                      "google_code",
                      "fogbugz",
                      "git",
                      "gitlab_project"
                    ],
                    "items": { "type": "string" }
                  },
                  "disabled_oauth_sign_in_sources": {
                    "description": "Disable certain OAuth sign-in sources",
                    "type": "array",
                    "items": { "type": "string" }
                  },
                  "enabled_git_access_protocol": {
                    "description": "Allow only the selected protocols to be used for Git access.",
                    "type": "string",
                    "enum": ["ssh", "http", "nil"]
                  },
                  "gravatar_enabled": {
                    "description": "Flag indicating if the Gravatar service is enabled",
                    "type": "boolean"
                  },
                  "default_projects_limit": {
                    "description": "The maximum number of personal projects",
                    "type": "integer",
                    "format": "int32"
                  },
                  "max_attachment_size": {
                    "description": "Maximum attachment size in MB",
                    "type": "integer",
                    "format": "int32"
                  },
                  "session_expire_delay": {
                    "description": "Session duration in minutes. GitLab restart is required to apply changes.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "user_oauth_applications": {
                    "description": "Allow users to register any application to use GitLab as an OAuth provider",
                    "type": "boolean"
                  },
                  "user_default_external": {
                    "description": "Newly registered users will by default be external",
                    "type": "boolean"
                  },
                  "signup_enabled": {
                    "description": "Flag indicating if sign up is enabled",
                    "type": "boolean"
                  },
                  "send_user_confirmation_email": {
                    "description": "Send confirmation email on sign-up",
                    "type": "boolean"
                  },
                  "domain_whitelist": {
                    "description": "ONLY users with e-mail addresses that match these domain(s) will be able to sign-up. Wildcards allowed. Use separate lines for multiple entries. Ex: domain.com, *.domain.com",
                    "type": "string"
                  },
                  "domain_blacklist_enabled": {
                    "description": "Enable domain blacklist for sign ups",
                    "type": "boolean"
                  },
                  "domain_blacklist": {
                    "description": "Users with e-mail addresses that match these domain(s) will NOT be able to sign-up. Wildcards allowed. Use separate lines for multiple entries. Ex: domain.com, *.domain.com",
                    "type": "string"
                  },
                  "after_sign_up_text": {
                    "description": "Text shown after sign up",
                    "type": "string"
                  },
                  "signin_enabled": {
                    "description": "Flag indicating if sign in is enabled",
                    "type": "boolean"
                  },
                  "require_two_factor_authentication": {
                    "description": "Require all users to setup Two-factor authentication",
                    "type": "boolean"
                  },
                  "two_factor_grace_period": {
                    "description": "Amount of time (in hours) that users are allowed to skip forced configuration of two-factor authentication",
                    "type": "integer",
                    "format": "int32"
                  },
                  "home_page_url": {
                    "description": "We will redirect non-logged in users to this page",
                    "type": "string"
                  },
                  "after_sign_out_path": {
                    "description": "We will redirect users to this page after they sign out",
                    "type": "string"
                  },
                  "sign_in_text": {
                    "description": "The sign in text of the GitLab application",
                    "type": "string"
                  },
                  "help_page_text": {
                    "description": "Custom text displayed on the help page",
                    "type": "string"
                  },
                  "shared_runners_enabled": {
                    "description": "Enable shared runners for new projects",
                    "type": "boolean"
                  },
                  "shared_runners_text": {
                    "description": "Shared runners text ",
                    "type": "string"
                  },
                  "max_artifacts_size": {
                    "description": "Set the maximum file size each build's artifacts can have",
                    "type": "integer",
                    "format": "int32"
                  },
                  "container_registry_token_expire_delay": {
                    "description": "Authorization token duration (minutes)",
                    "type": "integer",
                    "format": "int32"
                  },
                  "metrics_enabled": {
                    "description": "Enable the InfluxDB metrics",
                    "type": "boolean"
                  },
                  "metrics_host": {
                    "description": "The InfluxDB host",
                    "type": "string"
                  },
                  "metrics_port": {
                    "description": "The UDP port to use for connecting to InfluxDB",
                    "type": "integer",
                    "format": "int32"
                  },
                  "metrics_pool_size": {
                    "description": "The amount of InfluxDB connections to open",
                    "type": "integer",
                    "format": "int32"
                  },
                  "metrics_timeout": {
                    "description": "The amount of seconds after which an InfluxDB connection will time out",
                    "type": "integer",
                    "format": "int32"
                  },
                  "metrics_method_call_threshold": {
                    "description": "A method call is only tracked when it takes longer to complete than the given amount of milliseconds.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "metrics_sample_interval": {
                    "description": "The sampling interval in seconds",
                    "type": "integer",
                    "format": "int32"
                  },
                  "metrics_packet_size": {
                    "description": "The amount of points to store in a single UDP packet",
                    "type": "integer",
                    "format": "int32"
                  },
                  "sidekiq_throttling_enabled": {
                    "description": "Enable Sidekiq Job Throttling",
                    "type": "boolean"
                  },
                  "sidekiq_throttling_queus": {
                    "description": "Choose which queues you wish to throttle",
                    "type": "array",
                    "items": { "type": "string" }
                  },
                  "sidekiq_throttling_factor": {
                    "description": "The factor by which the queues should be throttled. A value between 0.0 and 1.0, exclusive.",
                    "type": "number",
                    "format": "float"
                  },
                  "recaptcha_enabled": {
                    "description": "Helps prevent bots from creating accounts",
                    "type": "boolean"
                  },
                  "recaptcha_site_key": {
                    "description": "Generate site key at http://www.google.com/recaptcha",
                    "type": "string"
                  },
                  "recaptcha_private_key": {
                    "description": "Generate private key at http://www.google.com/recaptcha",
                    "type": "string"
                  },
                  "akismet_enabled": {
                    "description": "Helps prevent bots from creating issues",
                    "type": "boolean"
                  },
                  "akismet_api_key": {
                    "description": "Generate API key at http://www.akismet.com",
                    "type": "string"
                  },
                  "admin_notification_email": {
                    "description": "Abuse reports will be sent to this address if it is set. Abuse reports are always available in the admin area.",
                    "type": "string"
                  },
                  "sentry_enabled": {
                    "description": "Sentry is an error reporting and logging tool which is currently not shipped with GitLab, get it here: https://getsentry.com",
                    "type": "boolean"
                  },
                  "sentry_dsn": {
                    "description": "Sentry Data Source Name",
                    "type": "string"
                  },
                  "repository_storage": {
                    "description": "Storage paths for new projects",
                    "type": "string"
                  },
                  "repository_checks_enabled": {
                    "description": "GitLab will periodically run 'git fsck' in all project and wiki repositories to look for silent disk corruption issues.",
                    "type": "boolean"
                  },
                  "koding_enabled": {
                    "description": "Enable Koding",
                    "type": "boolean"
                  },
                  "koding_url": {
                    "description": "The Koding team URL",
                    "type": "string"
                  },
                  "plantuml_enabled": {
                    "description": "Enable PlantUML",
                    "type": "boolean"
                  },
                  "plantuml_url": {
                    "description": "The PlantUML server URL",
                    "type": "string"
                  },
                  "version_check_enabled": {
                    "description": "Let GitLab inform you when an update is available.",
                    "type": "boolean"
                  },
                  "email_author_in_body": {
                    "description": "Some email servers do not support overriding the email sender name. Enable this option to include the name of the author of the issue, merge request or comment in the email body instead.",
                    "type": "boolean"
                  },
                  "html_emails_enabled": {
                    "description": "By default GitLab sends emails in HTML and plain text formats so mail clients can choose what format to use. Disable this option if you only want to send emails in plain text format.",
                    "type": "boolean"
                  },
                  "housekeeping_enabled": {
                    "description": "Enable automatic repository housekeeping (git repack, git gc)",
                    "type": "boolean"
                  },
                  "housekeeping_bitmaps_enabled": {
                    "description": "Creating pack file bitmaps makes housekeeping take a little longer but bitmaps should accelerate 'git clone' performance.",
                    "type": "boolean"
                  },
                  "housekeeping_incremental_repack_period": {
                    "description": "Number of Git pushes after which an incremental 'git repack' is run.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "housekeeping_full_repack_period": {
                    "description": "Number of Git pushes after which a full 'git repack' is run.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "housekeeping_gc_period": {
                    "description": "Number of Git pushes after which 'git gc' is run.",
                    "type": "integer",
                    "format": "int32"
                  }
                },
                "required": [
                  "domain_blacklist",
                  "two_factor_grace_period",
                  "shared_runners_text",
                  "metrics_host",
                  "metrics_port",
                  "metrics_pool_size",
                  "metrics_timeout",
                  "metrics_method_call_threshold",
                  "metrics_sample_interval",
                  "metrics_packet_size",
                  "sidekiq_throttling_queus",
                  "sidekiq_throttling_factor",
                  "recaptcha_site_key",
                  "recaptcha_private_key",
                  "akismet_api_key",
                  "sentry_dsn",
                  "koding_url",
                  "plantuml_url",
                  "housekeeping_bitmaps_enabled",
                  "housekeeping_incremental_repack_period",
                  "housekeeping_full_repack_period",
                  "housekeeping_gc_period"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Modify application settings",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApplicationSetting" }
              }
            }
          }
        },
        "summary": "Update Application Settings",
        "tags": ["application"]
      }
    },
    "/v3/ci/lint": {
      "post": {
        "description": "Validation of .gitlab-ci.yml content",
        "operationId": "postV3CiLint",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "description": "Content of .gitlab-ci.yml",
                    "type": "string"
                  }
                },
                "required": ["content"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": { "description": "Validation of .gitlab-ci.yml content" }
        },
        "summary": "Create Ci Lint",
        "tags": ["ci"]
      }
    },
    "/v3/deploy_keys": {
      "get": {
        "operationId": "getV3DeployKeys",
        "responses": { "200": { "description": "get DeployKey(s)" } },
        "tags": ["deploy_keys"],
        "summary": "Get Deploy Keys",
        "description": "Get Deploy Keys"
      }
    },
    "/v3/dockerfiles": {
      "get": {
        "description": "This feature was introduced in GitLab 8.15. This endpoint is deprecated and will be removed in GitLab 9.0.",
        "operationId": "getV3Dockerfiles",
        "responses": {
          "200": {
            "description": "Get the list of the available template",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TemplatesList" }
              }
            }
          }
        },
        "summary": "Get Dockerfiles",
        "tags": ["dockerfiles"]
      }
    },
    "/v3/dockerfiles/{name}": {
      "get": {
        "description": "This feature was introduced in GitLab 8.15. This endpoint is deprecated and will be removed in GitLab 9.0.",
        "operationId": "getV3DockerfilesName",
        "parameters": [
          {
            "description": "The name of the template",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get the text for a specific template present in local filesystem",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Template" }
              }
            }
          }
        },
        "summary": "Get Dockerfiles Name",
        "tags": ["dockerfiles"]
      }
    },
    "/v3/gitignores": {
      "get": {
        "description": "This feature was introduced in GitLab 8.8. This endpoint is deprecated and will be removed in GitLab 9.0.",
        "operationId": "getV3Gitignores",
        "responses": {
          "200": {
            "description": "Get the list of the available template",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TemplatesList" }
              }
            }
          }
        },
        "summary": "Get Gitignores",
        "tags": ["gitignores"]
      }
    },
    "/v3/gitignores/{name}": {
      "get": {
        "description": "This feature was introduced in GitLab 8.8. This endpoint is deprecated and will be removed in GitLab 9.0.",
        "operationId": "getV3GitignoresName",
        "parameters": [
          {
            "description": "The name of the template",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get the text for a specific template present in local filesystem",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Template" }
              }
            }
          }
        },
        "summary": "Get Gitignores Name",
        "tags": ["gitignores"]
      }
    },
    "/v3/gitlab_ci_ymls": {
      "get": {
        "description": "This feature was introduced in GitLab 8.9. This endpoint is deprecated and will be removed in GitLab 9.0.",
        "operationId": "getV3GitlabCiYmls",
        "responses": {
          "200": {
            "description": "Get the list of the available template",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TemplatesList" }
              }
            }
          }
        },
        "summary": "Get Gitlab Ci Ymls",
        "tags": ["gitlab_ci_ymls"]
      }
    },
    "/v3/gitlab_ci_ymls/{name}": {
      "get": {
        "description": "This feature was introduced in GitLab 8.9. This endpoint is deprecated and will be removed in GitLab 9.0.",
        "operationId": "getV3GitlabCiYmlsName",
        "parameters": [
          {
            "description": "The name of the template",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get the text for a specific template present in local filesystem",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Template" }
              }
            }
          }
        },
        "summary": "Get Gitlab Ci Ymls Name",
        "tags": ["gitlab_ci_ymls"]
      }
    },
    "/v3/groups": {
      "get": {
        "description": "Get a groups list",
        "operationId": "getV3Groups",
        "parameters": [
          {
            "description": "Include project statistics",
            "in": "query",
            "name": "statistics",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "description": "Show all group that you have access to",
            "in": "query",
            "name": "all_available",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "description": "Search for a specific group",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Order by name or path",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["name", "path"],
              "default": "name"
            }
          },
          {
            "description": "Sort by asc (ascending) or desc (descending)",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "asc"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "skip_groups": {
                    "description": "Array of group ids to exclude from list",
                    "type": "array",
                    "items": { "format": "int32", "type": "integer" }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Get a groups list",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Group" }
              }
            }
          }
        },
        "summary": "Get Groups",
        "tags": ["groups"]
      },
      "post": {
        "description": "Create a group. Available only for users who can create groups.",
        "operationId": "postV3Groups",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "The name of the group",
                    "type": "string"
                  },
                  "path": {
                    "description": "The path of the group",
                    "type": "string"
                  },
                  "description": {
                    "description": "The description of the group",
                    "type": "string"
                  },
                  "visibility_level": {
                    "description": "The visibility level of the group",
                    "type": "integer",
                    "format": "int32"
                  },
                  "lfs_enabled": {
                    "description": "Enable/disable LFS for the projects in this group",
                    "type": "boolean"
                  },
                  "request_access_enabled": {
                    "description": "Allow users to request member access",
                    "type": "boolean"
                  }
                },
                "required": ["name", "path"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a group. Available only for users who can create groups.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Group" }
              }
            }
          }
        },
        "summary": "Create Groups",
        "tags": ["groups"]
      }
    },
    "/v3/groups/owned": {
      "get": {
        "description": "Get list of owned groups for authenticated user",
        "operationId": "getV3GroupsOwned",
        "parameters": [
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Include project statistics",
            "in": "query",
            "name": "statistics",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get list of owned groups for authenticated user",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Group" }
              }
            }
          }
        },
        "summary": "Get Groups Owned",
        "tags": ["groups"]
      }
    },
    "/v3/groups/{id}": {
      "delete": {
        "description": "Remove a group.",
        "operationId": "deleteV3GroupsId",
        "parameters": [
          {
            "description": "The ID of a group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": { "204": { "description": "Remove a group." } },
        "summary": "Delete Groups Id",
        "tags": ["groups"]
      },
      "get": {
        "description": "Get a single group, with containing projects.",
        "operationId": "getV3GroupsId",
        "parameters": [
          {
            "description": "The ID of a group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single group, with containing projects.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GroupDetail" }
              }
            }
          }
        },
        "summary": "Get Groups Id",
        "tags": ["groups"]
      },
      "put": {
        "description": "Update a group. Available only for users who can administrate groups.",
        "operationId": "putV3GroupsId",
        "parameters": [
          {
            "description": "The ID of a group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "The name of the group",
                    "type": "string"
                  },
                  "path": {
                    "description": "The path of the group",
                    "type": "string"
                  },
                  "description": {
                    "description": "The description of the group",
                    "type": "string"
                  },
                  "visibility_level": {
                    "description": "The visibility level of the group",
                    "type": "integer",
                    "format": "int32"
                  },
                  "lfs_enabled": {
                    "description": "Enable/disable LFS for the projects in this group",
                    "type": "boolean"
                  },
                  "request_access_enabled": {
                    "description": "Allow users to request member access",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update a group. Available only for users who can administrate groups.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Group" }
              }
            }
          }
        },
        "summary": "Update Groups Id",
        "tags": ["groups"]
      }
    },
    "/v3/groups/{id}/access_requests": {
      "get": {
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "getV3GroupsIdAccessRequests",
        "parameters": [
          {
            "description": "The group ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Gets a list of access requests for a group.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AccessRequester" }
              }
            }
          }
        },
        "summary": "Get Groups Id Access Requests",
        "tags": ["groups"]
      },
      "post": {
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "postV3GroupsIdAccessRequests",
        "parameters": [
          {
            "description": "The group ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "201": {
            "description": "Requests access for the authenticated user to a group.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AccessRequester" }
              }
            }
          }
        },
        "summary": "Create Groups Id Access Requests",
        "tags": ["groups"]
      }
    },
    "/v3/groups/{id}/access_requests/{user_id}": {
      "delete": {
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "deleteV3GroupsIdAccessRequestsUserId",
        "parameters": [
          {
            "description": "The group ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The user ID of the access requester",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "204": {
            "description": "Denies an access request for the given user."
          }
        },
        "summary": "Delete Groups Id Access Requests User Id",
        "tags": ["groups"]
      }
    },
    "/v3/groups/{id}/access_requests/{user_id}/approve": {
      "put": {
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "putV3GroupsIdAccessRequestsUserIdApprove",
        "parameters": [
          {
            "description": "The group ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The user ID of the access requester",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/putV3GroupsIdAccessRequestsUserIdApprove"
        },
        "responses": {
          "200": {
            "description": "Approves an access request for the given user.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Member" }
              }
            }
          }
        },
        "summary": "Update Groups Id Access Requests User Id Approve",
        "tags": ["groups"]
      }
    },
    "/v3/groups/{id}/issues": {
      "get": {
        "description": "Get a list of group issues",
        "operationId": "getV3GroupsIdIssues",
        "parameters": [
          {
            "description": "The ID of a group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Return opened, closed, or all issues",
            "in": "query",
            "name": "state",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["opened", "closed", "all"],
              "default": "opened"
            }
          },
          {
            "description": "Comma-separated list of label names",
            "in": "query",
            "name": "labels",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Return issues for a specific milestone",
            "in": "query",
            "name": "milestone",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Return issues ordered by `created_at` or `updated_at` fields.",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["created_at", "updated_at"],
              "default": "created_at"
            }
          },
          {
            "description": "Return issues sorted in `asc` or `desc` order.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of group issues",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Issue" }
              }
            }
          }
        },
        "summary": "Get Groups Id Issues",
        "tags": ["groups"]
      }
    },
    "/v3/groups/{id}/members": {
      "get": {
        "description": "Gets a list of group or project members viewable by the authenticated user.",
        "operationId": "getV3GroupsIdMembers",
        "parameters": [
          {
            "description": "The group ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "A query string to search for members",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Gets a list of group or project members viewable by the authenticated user.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Member" }
              }
            }
          }
        },
        "summary": "Get Groups Id Members",
        "tags": ["groups"]
      },
      "post": {
        "description": "Adds a member to a group or project.",
        "operationId": "postV3GroupsIdMembers",
        "parameters": [
          {
            "description": "The group ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/postV3GroupsIdMembers"
        },
        "responses": {
          "201": {
            "description": "Adds a member to a group or project.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Member" }
              }
            }
          }
        },
        "summary": "Create Groups Id Members",
        "tags": ["groups"]
      }
    },
    "/v3/groups/{id}/members/{user_id}": {
      "delete": {
        "description": "Removes a user from a group or project.",
        "operationId": "deleteV3GroupsIdMembersUserId",
        "parameters": [
          {
            "description": "The group ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The user ID of the member",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "204": { "description": "Removes a user from a group or project." }
        },
        "summary": "Delete Groups Id Members User Id",
        "tags": ["groups"]
      },
      "get": {
        "description": "Gets a member of a group or project.",
        "operationId": "getV3GroupsIdMembersUserId",
        "parameters": [
          {
            "description": "The group ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The user ID of the member",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Gets a member of a group or project.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Member" }
              }
            }
          }
        },
        "summary": "Get Groups Id Members User Id",
        "tags": ["groups"]
      },
      "put": {
        "description": "Updates a member of a group or project.",
        "operationId": "putV3GroupsIdMembersUserId",
        "parameters": [
          {
            "description": "The group ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The user ID of the new member",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/putV3GroupsIdMembersUserId"
        },
        "responses": {
          "200": {
            "description": "Updates a member of a group or project.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Member" }
              }
            }
          }
        },
        "summary": "Update Groups Id Members User Id",
        "tags": ["groups"]
      }
    },
    "/v3/groups/{id}/notification_settings": {
      "get": {
        "description": "This feature was introduced in GitLab 8.12",
        "operationId": "getV3GroupsIdNotificationSettings",
        "parameters": [
          {
            "description": "The group ID or project ID or project NAMESPACE/PROJECT_NAME",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get group level notification level settings, defaults to Global",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotificationSetting" }
              }
            }
          }
        },
        "summary": "Get Groups Id Notification Settings",
        "tags": ["groups"]
      },
      "put": {
        "description": "This feature was introduced in GitLab 8.12",
        "operationId": "putV3GroupsIdNotificationSettings",
        "parameters": [
          {
            "description": "The group ID or project ID or project NAMESPACE/PROJECT_NAME",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "level": {
                    "description": "The group notification level",
                    "type": "string"
                  },
                  "new_note": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "new_issue": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "reopen_issue": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "close_issue": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "reassign_issue": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "new_merge_request": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "reopen_merge_request": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "close_merge_request": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "reassign_merge_request": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "merge_merge_request": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "failed_pipeline": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "success_pipeline": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update group level notification level settings, defaults to Global",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotificationSetting" }
              }
            }
          }
        },
        "summary": "Update Groups Id Notification Settings",
        "tags": ["groups"]
      }
    },
    "/v3/groups/{id}/projects": {
      "get": {
        "description": "Get a list of projects in this group.",
        "operationId": "getV3GroupsIdProjects",
        "parameters": [
          {
            "description": "The ID of a group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Limit by archived status",
            "in": "query",
            "name": "archived",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "description": "Limit by visibility",
            "in": "query",
            "name": "visibility",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["public", "internal", "private"]
            }
          },
          {
            "description": "Return list of authorized projects matching the search criteria",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Return projects ordered by field",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "name",
                "path",
                "created_at",
                "updated_at",
                "last_activity_at"
              ],
              "default": "created_at"
            }
          },
          {
            "description": "Return projects sorted in ascending and descending order",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            }
          },
          {
            "description": "Return only the ID, URL, name, and path of each project",
            "in": "query",
            "name": "simple",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of projects in this group.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Project" }
              }
            }
          }
        },
        "summary": "Get Groups Id Projects",
        "tags": ["groups"]
      }
    },
    "/v3/groups/{id}/projects/{project_id}": {
      "post": {
        "description": "Transfer a project to the group namespace. Available only for admin.",
        "operationId": "postV3GroupsIdProjectsProjectId",
        "parameters": [
          {
            "description": "The ID of a group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID or path of the project",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "201": {
            "description": "Transfer a project to the group namespace. Available only for admin.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GroupDetail" }
              }
            }
          }
        },
        "summary": "Create Groups Id Projects Project Id",
        "tags": ["groups"]
      }
    },
    "/v3/hooks": {
      "get": {
        "description": "Get the list of system hooks",
        "operationId": "getV3Hooks",
        "responses": {
          "200": {
            "description": "Get the list of system hooks",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Hook" }
              }
            }
          }
        },
        "summary": "Get Hooks",
        "tags": ["hooks"]
      },
      "post": {
        "description": "Create a new system hook",
        "operationId": "postV3Hooks",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "url": {
                    "description": "The URL to send the request to",
                    "type": "string"
                  },
                  "token": {
                    "description": "The token used to validate payloads",
                    "type": "string"
                  },
                  "push_events": {
                    "description": "Trigger hook on push events",
                    "type": "boolean"
                  },
                  "tag_push_events": {
                    "description": "Trigger hook on tag push events",
                    "type": "boolean"
                  },
                  "enable_ssl_verification": {
                    "description": "Do SSL verification when triggering the hook",
                    "type": "boolean"
                  }
                },
                "required": ["url"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a new system hook",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Hook" }
              }
            }
          }
        },
        "summary": "Create Hooks",
        "tags": ["hooks"]
      }
    },
    "/v3/hooks/{id}": {
      "delete": {
        "description": "Delete a hook",
        "operationId": "deleteV3HooksId",
        "parameters": [
          {
            "description": "The ID of the system hook",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete a hook",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Hook" }
              }
            }
          }
        },
        "summary": "Delete Hooks Id",
        "tags": ["hooks"]
      },
      "get": {
        "description": "Test a hook",
        "operationId": "getV3HooksId",
        "parameters": [
          {
            "description": "The ID of the system hook",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Test a hook",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Hook" }
              }
            }
          }
        },
        "summary": "Get Hooks Id",
        "tags": ["hooks"]
      }
    },
    "/v3/internal/allowed": {
      "post": {
        "operationId": "postV3InternalAllowed",
        "responses": { "201": { "description": "created Allowed" } },
        "tags": ["internal"],
        "summary": "Create Internal Allowed",
        "description": "Create Internal Allowed"
      }
    },
    "/v3/internal/broadcast_message": {
      "get": {
        "operationId": "getV3InternalBroadcastMessage",
        "responses": { "200": { "description": "get BroadcastMessage(s)" } },
        "tags": ["internal"],
        "summary": "Get Internal Broadcast Message",
        "description": "Get Internal Broadcast Message"
      }
    },
    "/v3/internal/check": {
      "get": {
        "operationId": "getV3InternalCheck",
        "responses": { "200": { "description": "get Check(s)" } },
        "tags": ["internal"],
        "summary": "Get Internal Check",
        "description": "Get Internal Check"
      }
    },
    "/v3/internal/discover": {
      "get": {
        "operationId": "getV3InternalDiscover",
        "responses": { "200": { "description": "get Discover(s)" } },
        "tags": ["internal"],
        "summary": "Get Internal Discover",
        "description": "Get Internal Discover"
      }
    },
    "/v3/internal/lfs_authenticate": {
      "post": {
        "operationId": "postV3InternalLfsAuthenticate",
        "responses": { "201": { "description": "created LfsAuthenticate" } },
        "tags": ["internal"],
        "summary": "Create Internal Lfs Authenticate",
        "description": "Create Internal Lfs Authenticate"
      }
    },
    "/v3/internal/merge_request_urls": {
      "get": {
        "operationId": "getV3InternalMergeRequestUrls",
        "responses": { "200": { "description": "get MergeRequestUrl(s)" } },
        "tags": ["internal"],
        "summary": "Get Internal Merge Request Urls",
        "description": "Get Internal Merge Request Urls"
      }
    },
    "/v3/internal/two_factor_recovery_codes": {
      "post": {
        "operationId": "postV3InternalTwoFactorRecoveryCodes",
        "responses": {
          "201": { "description": "created TwoFactorRecoveryCode" }
        },
        "tags": ["internal"],
        "summary": "Create Internal Two Factor Recovery Codes",
        "description": "Create Internal Two Factor Recovery Codes"
      }
    },
    "/v3/issues": {
      "get": {
        "description": "Get currently authenticated user's issues",
        "operationId": "getV3Issues",
        "parameters": [
          {
            "description": "Return opened, closed, or all issues",
            "in": "query",
            "name": "state",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["opened", "closed", "all"],
              "default": "all"
            }
          },
          {
            "description": "Comma-separated list of label names",
            "in": "query",
            "name": "labels",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Return issues for a specific milestone",
            "in": "query",
            "name": "milestone",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Return issues ordered by `created_at` or `updated_at` fields.",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["created_at", "updated_at"],
              "default": "created_at"
            }
          },
          {
            "description": "Return issues sorted in `asc` or `desc` order.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get currently authenticated user's issues",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Issue" }
              }
            }
          }
        },
        "summary": "Get Issues",
        "tags": ["issues"]
      }
    },
    "/v3/keys/{id}": {
      "get": {
        "description": "Get single ssh key by id. Only available to admin users",
        "operationId": "getV3KeysId",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get single ssh key by id. Only available to admin users",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SSHKeyWithUser" }
              }
            }
          }
        },
        "summary": "Get Keys Id",
        "tags": ["keys"]
      }
    },
    "/v3/licenses": {
      "get": {
        "description": "This feature was introduced in GitLab 8.7. This endpoint is deprecated and will be removed in GitLab 9.0.",
        "operationId": "getV3Licenses",
        "parameters": [
          {
            "description": "If passed, returns only popular licenses",
            "in": "query",
            "name": "popular",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get the list of the available license template",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RepoLicense" }
              }
            }
          }
        },
        "summary": "Get Licenses",
        "tags": ["licenses"]
      }
    },
    "/v3/licenses/{name}": {
      "get": {
        "description": "This feature was introduced in GitLab 8.7. This endpoint is deprecated and will be removed in GitLab 9.0.",
        "operationId": "getV3LicensesName",
        "parameters": [
          {
            "description": "The name of the template",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get the text for a specific license",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RepoLicense" }
              }
            }
          }
        },
        "summary": "Get Licenses Name",
        "tags": ["licenses"]
      }
    },
    "/v3/namespaces": {
      "get": {
        "description": "Get a namespaces list",
        "operationId": "getV3Namespaces",
        "parameters": [
          {
            "description": "Search query for namespaces",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a namespaces list",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Namespace" }
              }
            }
          }
        },
        "summary": "Get Namespaces",
        "tags": ["namespaces"]
      }
    },
    "/v3/notification_settings": {
      "get": {
        "description": "This feature was introduced in GitLab 8.12",
        "operationId": "getV3NotificationSettings",
        "responses": {
          "200": {
            "description": "Get global notification level settings and email, defaults to Participate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalNotificationSetting"
                }
              }
            }
          }
        },
        "summary": "Get Notification Settings",
        "tags": ["notification_settings"]
      },
      "put": {
        "description": "This feature was introduced in GitLab 8.12",
        "operationId": "putV3NotificationSettings",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "level": {
                    "description": "The global notification level",
                    "type": "string"
                  },
                  "notification_email": {
                    "description": "The email address to send notifications",
                    "type": "string"
                  },
                  "new_note": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "new_issue": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "reopen_issue": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "close_issue": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "reassign_issue": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "new_merge_request": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "reopen_merge_request": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "close_merge_request": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "reassign_merge_request": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "merge_merge_request": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "failed_pipeline": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "success_pipeline": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update global notification level settings and email, defaults to Participate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalNotificationSetting"
                }
              }
            }
          }
        },
        "summary": "Update Notification Settings",
        "tags": ["notification_settings"]
      }
    },
    "/v3/projects": {
      "get": {
        "description": "Get a projects list for authenticated user",
        "operationId": "getV3Projects",
        "parameters": [
          {
            "description": "Return projects ordered by field",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "name",
                "path",
                "created_at",
                "updated_at",
                "last_activity_at"
              ],
              "default": "created_at"
            }
          },
          {
            "description": "Return projects sorted in ascending and descending order",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            }
          },
          {
            "description": "Limit by archived status",
            "in": "query",
            "name": "archived",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "description": "Limit by visibility",
            "in": "query",
            "name": "visibility",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["public", "internal", "private"]
            }
          },
          {
            "description": "Return list of authorized projects matching the search criteria",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Return only the ID, URL, name, and path of each project",
            "in": "query",
            "name": "simple",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a projects list for authenticated user",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BasicProjectDetails" }
              }
            }
          }
        },
        "summary": "Get Projects",
        "tags": ["projects"]
      },
      "post": {
        "description": "Create new project",
        "operationId": "postV3Projects",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "The name of the project",
                    "type": "string"
                  },
                  "path": {
                    "description": "The path of the repository",
                    "type": "string"
                  },
                  "description": {
                    "description": "The description of the project",
                    "type": "string"
                  },
                  "issues_enabled": {
                    "description": "Flag indication if the issue tracker is enabled",
                    "type": "boolean"
                  },
                  "merge_requests_enabled": {
                    "description": "Flag indication if merge requests are enabled",
                    "type": "boolean"
                  },
                  "wiki_enabled": {
                    "description": "Flag indication if the wiki is enabled",
                    "type": "boolean"
                  },
                  "builds_enabled": {
                    "description": "Flag indication if builds are enabled",
                    "type": "boolean"
                  },
                  "snippets_enabled": {
                    "description": "Flag indication if snippets are enabled",
                    "type": "boolean"
                  },
                  "shared_runners_enabled": {
                    "description": "Flag indication if shared runners are enabled for that project",
                    "type": "boolean"
                  },
                  "container_registry_enabled": {
                    "description": "Flag indication if the container registry is enabled for that project",
                    "type": "boolean"
                  },
                  "lfs_enabled": {
                    "description": "Flag indication if Git LFS is enabled for that project",
                    "type": "boolean"
                  },
                  "public": {
                    "description": "Create a public project. The same as visibility_level = 20.",
                    "type": "boolean"
                  },
                  "visibility_level": {
                    "description": "Create a public project. The same as visibility_level = 20.",
                    "type": "integer",
                    "format": "int32",
                    "enum": [0, 10, 20]
                  },
                  "public_builds": {
                    "description": "Perform public builds",
                    "type": "boolean"
                  },
                  "request_access_enabled": {
                    "description": "Allow users to request member access",
                    "type": "boolean"
                  },
                  "only_allow_merge_if_build_succeeds": {
                    "description": "Only allow to merge if builds succeed",
                    "type": "boolean"
                  },
                  "only_allow_merge_if_all_discussions_are_resolved": {
                    "description": "Only allow to merge if all discussions are resolved",
                    "type": "boolean"
                  },
                  "namespace_id": {
                    "description": "Namespace ID for the new project. Default to the user namespace.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "import_url": {
                    "description": "URL from which the project is imported",
                    "type": "string"
                  }
                },
                "required": ["name"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create new project",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Project" }
              }
            }
          }
        },
        "summary": "Create Projects",
        "tags": ["projects"]
      }
    },
    "/v3/projects/all": {
      "get": {
        "description": "Get all projects for admin user",
        "operationId": "getV3ProjectsAll",
        "parameters": [
          {
            "description": "Return projects ordered by field",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "name",
                "path",
                "created_at",
                "updated_at",
                "last_activity_at"
              ],
              "default": "created_at"
            }
          },
          {
            "description": "Return projects sorted in ascending and descending order",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            }
          },
          {
            "description": "Limit by archived status",
            "in": "query",
            "name": "archived",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "description": "Limit by visibility",
            "in": "query",
            "name": "visibility",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["public", "internal", "private"]
            }
          },
          {
            "description": "Return list of authorized projects matching the search criteria",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Return only the ID, URL, name, and path of each project",
            "in": "query",
            "name": "simple",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "description": "Include project statistics",
            "in": "query",
            "name": "statistics",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get all projects for admin user",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BasicProjectDetails" }
              }
            }
          }
        },
        "summary": "Get Projects All",
        "tags": ["projects"]
      }
    },
    "/v3/projects/fork/{id}": {
      "post": {
        "description": "Fork new project for the current user or provided namespace.",
        "operationId": "postV3ProjectsForkId",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "namespace": {
                    "description": "The ID or name of the namespace that the project will be forked into",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Fork new project for the current user or provided namespace.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Project" }
              }
            }
          }
        },
        "summary": "Create Projects Fork Id",
        "tags": ["projects"]
      }
    },
    "/v3/projects/owned": {
      "get": {
        "description": "Get an owned projects list for authenticated user",
        "operationId": "getV3ProjectsOwned",
        "parameters": [
          {
            "description": "Return projects ordered by field",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "name",
                "path",
                "created_at",
                "updated_at",
                "last_activity_at"
              ],
              "default": "created_at"
            }
          },
          {
            "description": "Return projects sorted in ascending and descending order",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            }
          },
          {
            "description": "Limit by archived status",
            "in": "query",
            "name": "archived",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "description": "Limit by visibility",
            "in": "query",
            "name": "visibility",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["public", "internal", "private"]
            }
          },
          {
            "description": "Return list of authorized projects matching the search criteria",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Return only the ID, URL, name, and path of each project",
            "in": "query",
            "name": "simple",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "description": "Include project statistics",
            "in": "query",
            "name": "statistics",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get an owned projects list for authenticated user",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BasicProjectDetails" }
              }
            }
          }
        },
        "summary": "Get Projects Owned",
        "tags": ["projects"]
      }
    },
    "/v3/projects/search/{query}": {
      "get": {
        "description": "Search for projects the current user has access to",
        "operationId": "getV3ProjectsSearchQuery",
        "parameters": [
          {
            "description": "The project name to be searched",
            "in": "path",
            "name": "query",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Return projects ordered by field",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "name",
                "path",
                "created_at",
                "updated_at",
                "last_activity_at"
              ],
              "default": "created_at"
            }
          },
          {
            "description": "Return projects sorted in ascending and descending order",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Search for projects the current user has access to",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Project" }
              }
            }
          }
        },
        "summary": "Get Projects Search Query",
        "tags": ["projects"]
      }
    },
    "/v3/projects/starred": {
      "get": {
        "description": "Gets starred project for the authenticated user",
        "operationId": "getV3ProjectsStarred",
        "parameters": [
          {
            "description": "Return projects ordered by field",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "name",
                "path",
                "created_at",
                "updated_at",
                "last_activity_at"
              ],
              "default": "created_at"
            }
          },
          {
            "description": "Return projects sorted in ascending and descending order",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            }
          },
          {
            "description": "Limit by archived status",
            "in": "query",
            "name": "archived",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "description": "Limit by visibility",
            "in": "query",
            "name": "visibility",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["public", "internal", "private"]
            }
          },
          {
            "description": "Return list of authorized projects matching the search criteria",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Return only the ID, URL, name, and path of each project",
            "in": "query",
            "name": "simple",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "description": "Gets starred project for the authenticated user",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BasicProjectDetails" }
              }
            }
          }
        },
        "summary": "Get Projects Starred",
        "tags": ["projects"]
      }
    },
    "/v3/projects/user/{user_id}": {
      "post": {
        "description": "Create new project for a specified user. Only available to admin users.",
        "operationId": "postV3ProjectsUserUserId",
        "parameters": [
          {
            "description": "The ID of a user",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "The name of the project",
                    "type": "string"
                  },
                  "default_branch": {
                    "description": "The default branch of the project",
                    "type": "string"
                  },
                  "description": {
                    "description": "The description of the project",
                    "type": "string"
                  },
                  "issues_enabled": {
                    "description": "Flag indication if the issue tracker is enabled",
                    "type": "boolean"
                  },
                  "merge_requests_enabled": {
                    "description": "Flag indication if merge requests are enabled",
                    "type": "boolean"
                  },
                  "wiki_enabled": {
                    "description": "Flag indication if the wiki is enabled",
                    "type": "boolean"
                  },
                  "builds_enabled": {
                    "description": "Flag indication if builds are enabled",
                    "type": "boolean"
                  },
                  "snippets_enabled": {
                    "description": "Flag indication if snippets are enabled",
                    "type": "boolean"
                  },
                  "shared_runners_enabled": {
                    "description": "Flag indication if shared runners are enabled for that project",
                    "type": "boolean"
                  },
                  "container_registry_enabled": {
                    "description": "Flag indication if the container registry is enabled for that project",
                    "type": "boolean"
                  },
                  "lfs_enabled": {
                    "description": "Flag indication if Git LFS is enabled for that project",
                    "type": "boolean"
                  },
                  "public": {
                    "description": "Create a public project. The same as visibility_level = 20.",
                    "type": "boolean"
                  },
                  "visibility_level": {
                    "description": "Create a public project. The same as visibility_level = 20.",
                    "type": "integer",
                    "format": "int32",
                    "enum": [0, 10, 20]
                  },
                  "public_builds": {
                    "description": "Perform public builds",
                    "type": "boolean"
                  },
                  "request_access_enabled": {
                    "description": "Allow users to request member access",
                    "type": "boolean"
                  },
                  "only_allow_merge_if_build_succeeds": {
                    "description": "Only allow to merge if builds succeed",
                    "type": "boolean"
                  },
                  "only_allow_merge_if_all_discussions_are_resolved": {
                    "description": "Only allow to merge if all discussions are resolved",
                    "type": "boolean"
                  },
                  "namespace_id": {
                    "description": "Namespace ID for the new project. Default to the user namespace.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "import_url": {
                    "description": "URL from which the project is imported",
                    "type": "string"
                  }
                },
                "required": ["name"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create new project for a specified user. Only available to admin users.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Project" }
              }
            }
          }
        },
        "summary": "Create Projects User User Id",
        "tags": ["projects"]
      }
    },
    "/v3/projects/visible": {
      "get": {
        "description": "Get a list of visible projects for authenticated user",
        "operationId": "getV3ProjectsVisible",
        "parameters": [
          {
            "description": "Return projects ordered by field",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "name",
                "path",
                "created_at",
                "updated_at",
                "last_activity_at"
              ],
              "default": "created_at"
            }
          },
          {
            "description": "Return projects sorted in ascending and descending order",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            }
          },
          {
            "description": "Limit by archived status",
            "in": "query",
            "name": "archived",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "description": "Limit by visibility",
            "in": "query",
            "name": "visibility",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["public", "internal", "private"]
            }
          },
          {
            "description": "Return list of authorized projects matching the search criteria",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Return only the ID, URL, name, and path of each project",
            "in": "query",
            "name": "simple",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of visible projects for authenticated user",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BasicProjectDetails" }
              }
            }
          }
        },
        "summary": "Get Projects Visible",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}": {
      "delete": {
        "description": "Remove a project",
        "operationId": "deleteV3ProjectsId",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": { "204": { "description": "Remove a project" } },
        "summary": "Delete Projects Id",
        "tags": ["projects"]
      },
      "get": {
        "description": "Get a single project",
        "operationId": "getV3ProjectsId",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single project",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProjectWithAccess" }
              }
            }
          }
        },
        "summary": "Get Projects Id",
        "tags": ["projects"]
      },
      "put": {
        "description": "Update an existing project",
        "operationId": "putV3ProjectsId",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "The name of the project",
                    "type": "string"
                  },
                  "default_branch": {
                    "description": "The default branch of the project",
                    "type": "string"
                  },
                  "path": {
                    "description": "The path of the repository",
                    "type": "string"
                  },
                  "description": {
                    "description": "The description of the project",
                    "type": "string"
                  },
                  "issues_enabled": {
                    "description": "Flag indication if the issue tracker is enabled",
                    "type": "boolean"
                  },
                  "merge_requests_enabled": {
                    "description": "Flag indication if merge requests are enabled",
                    "type": "boolean"
                  },
                  "wiki_enabled": {
                    "description": "Flag indication if the wiki is enabled",
                    "type": "boolean"
                  },
                  "builds_enabled": {
                    "description": "Flag indication if builds are enabled",
                    "type": "boolean"
                  },
                  "snippets_enabled": {
                    "description": "Flag indication if snippets are enabled",
                    "type": "boolean"
                  },
                  "shared_runners_enabled": {
                    "description": "Flag indication if shared runners are enabled for that project",
                    "type": "boolean"
                  },
                  "container_registry_enabled": {
                    "description": "Flag indication if the container registry is enabled for that project",
                    "type": "boolean"
                  },
                  "lfs_enabled": {
                    "description": "Flag indication if Git LFS is enabled for that project",
                    "type": "boolean"
                  },
                  "public": {
                    "description": "Create a public project. The same as visibility_level = 20.",
                    "type": "boolean"
                  },
                  "visibility_level": {
                    "description": "Create a public project. The same as visibility_level = 20.",
                    "type": "integer",
                    "format": "int32",
                    "enum": [0, 10, 20]
                  },
                  "public_builds": {
                    "description": "Perform public builds",
                    "type": "boolean"
                  },
                  "request_access_enabled": {
                    "description": "Allow users to request member access",
                    "type": "boolean"
                  },
                  "only_allow_merge_if_build_succeeds": {
                    "description": "Only allow to merge if builds succeed",
                    "type": "boolean"
                  },
                  "only_allow_merge_if_all_discussions_are_resolved": {
                    "description": "Only allow to merge if all discussions are resolved",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update an existing project",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Project" }
              }
            }
          }
        },
        "summary": "Update Projects Id",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/(ref/{ref}/)trigger/builds": {
      "post": {
        "description": "Trigger a GitLab project build",
        "operationId": "postV3ProjectsId(refRef)triggerBuilds",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The commit sha or name of a branch or tag",
            "in": "path",
            "name": "ref",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "description": "The unique token of trigger",
                    "type": "string"
                  }
                },
                "required": ["token"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Trigger a GitLab project build",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TriggerRequest" }
              }
            }
          }
        },
        "summary": "Create Projects Id(ref Ref)trigger Builds",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/access_requests": {
      "get": {
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "getV3ProjectsIdAccessRequests",
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Gets a list of access requests for a project.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AccessRequester" }
              }
            }
          }
        },
        "summary": "Get Projects Id Access Requests",
        "tags": ["projects"]
      },
      "post": {
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "postV3ProjectsIdAccessRequests",
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "201": {
            "description": "Requests access for the authenticated user to a project.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AccessRequester" }
              }
            }
          }
        },
        "summary": "Create Projects Id Access Requests",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/access_requests/{user_id}": {
      "delete": {
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "deleteV3ProjectsIdAccessRequestsUserId",
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The user ID of the access requester",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "204": {
            "description": "Denies an access request for the given user."
          }
        },
        "summary": "Delete Projects Id Access Requests User Id",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/access_requests/{user_id}/approve": {
      "put": {
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "putV3ProjectsIdAccessRequestsUserIdApprove",
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The user ID of the access requester",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/putV3GroupsIdAccessRequestsUserIdApprove"
        },
        "responses": {
          "200": {
            "description": "Approves an access request for the given user.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Member" }
              }
            }
          }
        },
        "summary": "Update Projects Id Access Requests User Id Approve",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/archive": {
      "post": {
        "description": "Archive a project",
        "operationId": "postV3ProjectsIdArchive",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "201": {
            "description": "Archive a project",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Project" }
              }
            }
          }
        },
        "summary": "Create Projects Id Archive",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/boards": {
      "get": {
        "description": "This feature was introduced in 8.13",
        "operationId": "getV3ProjectsIdBoards",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get all project boards",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Board" }
              }
            }
          }
        },
        "summary": "Get Projects Id Boards",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/boards/{board_id}/lists": {
      "get": {
        "description": "Does not include `backlog` and `done` lists. This feature was introduced in 8.13",
        "operationId": "getV3ProjectsIdBoardsBoardIdLists",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of a board",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get the lists of a project board",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/List" }
              }
            }
          }
        },
        "summary": "Get Projects Id Boards Board Id Lists",
        "tags": ["projects"]
      },
      "post": {
        "description": "This feature was introduced in 8.13",
        "operationId": "postV3ProjectsIdBoardsBoardIdLists",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of a board",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "label_id": {
                    "description": "The ID of an existing label",
                    "type": "integer",
                    "format": "int32"
                  }
                },
                "required": ["label_id"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a new board list",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/List" }
              }
            }
          }
        },
        "summary": "Create Projects Id Boards Board Id Lists",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/boards/{board_id}/lists/{list_id}": {
      "delete": {
        "description": "This feature was introduced in 8.13",
        "operationId": "deleteV3ProjectsIdBoardsBoardIdListsListId",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of a board",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "The ID of a board list",
            "in": "path",
            "name": "list_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete a board list",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/List" }
              }
            }
          }
        },
        "summary": "Delete Projects Id Boards Board Id Lists List Id",
        "tags": ["projects"]
      },
      "get": {
        "description": "This feature was introduced in 8.13",
        "operationId": "getV3ProjectsIdBoardsBoardIdListsListId",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of a board",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "The ID of a list",
            "in": "path",
            "name": "list_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of a project board",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/List" }
              }
            }
          }
        },
        "summary": "Get Projects Id Boards Board Id Lists List Id",
        "tags": ["projects"]
      },
      "put": {
        "description": "This feature was introduced in 8.13",
        "operationId": "putV3ProjectsIdBoardsBoardIdListsListId",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of a board",
            "in": "path",
            "name": "board_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "The ID of a list",
            "in": "path",
            "name": "list_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "position": {
                    "description": "The position of the list",
                    "type": "integer",
                    "format": "int32"
                  }
                },
                "required": ["position"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Moves a board list to a new position",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/List" }
              }
            }
          }
        },
        "summary": "Update Projects Id Boards Board Id Lists List Id",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/builds": {
      "get": {
        "description": "Get a project builds",
        "operationId": "getV3ProjectsIdBuilds",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The scope of builds to show",
            "in": "query",
            "name": "scope",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["pending", "running", "failed", "success", "canceled"]
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a project builds",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Build" }
              }
            }
          }
        },
        "summary": "Get Projects Id Builds",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/builds/artifacts/{ref_name}/download": {
      "get": {
        "description": "This feature was introduced in GitLab 8.10",
        "operationId": "getV3ProjectsIdBuildsArtifactsRefNameDownload",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ref from repository",
            "in": "path",
            "name": "ref_name",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The name for the build",
            "in": "query",
            "name": "job",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Download the artifacts file from build" }
        },
        "summary": "Get Projects Id Builds Artifacts Ref Name Download",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/builds/{build_id}": {
      "get": {
        "description": "Get a specific build of a project",
        "operationId": "getV3ProjectsIdBuildsBuildId",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of a build",
            "in": "path",
            "name": "build_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a specific build of a project",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Build" }
              }
            }
          }
        },
        "summary": "Get Projects Id Builds Build Id",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/builds/{build_id}/artifacts": {
      "get": {
        "description": "This feature was introduced in GitLab 8.5",
        "operationId": "getV3ProjectsIdBuildsBuildIdArtifacts",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of a build",
            "in": "path",
            "name": "build_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": { "description": "Download the artifacts file from build" }
        },
        "summary": "Get Projects Id Builds Build Id Artifacts",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/builds/{build_id}/artifacts/keep": {
      "post": {
        "description": "Keep the artifacts to prevent them from being deleted",
        "operationId": "postV3ProjectsIdBuildsBuildIdArtifactsKeep",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of a build",
            "in": "path",
            "name": "build_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "201": {
            "description": "Keep the artifacts to prevent them from being deleted",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Build" }
              }
            }
          }
        },
        "summary": "Create Projects Id Builds Build Id Artifacts Keep",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/builds/{build_id}/cancel": {
      "post": {
        "description": "Cancel a specific build of a project",
        "operationId": "postV3ProjectsIdBuildsBuildIdCancel",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of a build",
            "in": "path",
            "name": "build_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "201": {
            "description": "Cancel a specific build of a project",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Build" }
              }
            }
          }
        },
        "summary": "Create Projects Id Builds Build Id Cancel",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/builds/{build_id}/erase": {
      "post": {
        "description": "Erase build (remove artifacts and build trace)",
        "operationId": "postV3ProjectsIdBuildsBuildIdErase",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of a build",
            "in": "path",
            "name": "build_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "201": {
            "description": "Erase build (remove artifacts and build trace)",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Build" }
              }
            }
          }
        },
        "summary": "Create Projects Id Builds Build Id Erase",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/builds/{build_id}/play": {
      "post": {
        "description": "This feature was added in GitLab 8.11",
        "operationId": "postV3ProjectsIdBuildsBuildIdPlay",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of a Build",
            "in": "path",
            "name": "build_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "201": {
            "description": "Trigger a manual build",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Build" }
              }
            }
          }
        },
        "summary": "Create Projects Id Builds Build Id Play",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/builds/{build_id}/retry": {
      "post": {
        "description": "Retry a specific build of a project",
        "operationId": "postV3ProjectsIdBuildsBuildIdRetry",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of a build",
            "in": "path",
            "name": "build_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "201": {
            "description": "Retry a specific build of a project",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Build" }
              }
            }
          }
        },
        "summary": "Create Projects Id Builds Build Id Retry",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/builds/{build_id}/trace": {
      "get": {
        "description": "Get a trace of a specific build of a project",
        "operationId": "getV3ProjectsIdBuildsBuildIdTrace",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of a build",
            "in": "path",
            "name": "build_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a trace of a specific build of a project"
          }
        },
        "summary": "Get Projects Id Builds Build Id Trace",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/deploy_keys": {
      "get": {
        "description": "Get a specific project's deploy keys",
        "operationId": "getV3ProjectsIdDeployKeys",
        "parameters": [
          {
            "description": "The ID of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a specific project's deploy keys",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SSHKey" }
              }
            }
          }
        },
        "summary": "Get Projects Id Deploy Keys",
        "tags": ["projects"]
      },
      "post": {
        "description": "Add new deploy key to currently authenticated user",
        "operationId": "postV3ProjectsIdDeployKeys",
        "parameters": [
          {
            "description": "The ID of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/postV3ProjectsIdDeployKeys"
        },
        "responses": {
          "201": {
            "description": "Add new deploy key to currently authenticated user",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SSHKey" }
              }
            }
          }
        },
        "summary": "Create Projects Id Deploy Keys",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/deploy_keys/{key_id}": {
      "delete": {
        "description": "Delete deploy key for a project",
        "operationId": "deleteV3ProjectsIdDeployKeysKeyId",
        "parameters": [
          {
            "description": "The ID of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of the deploy key",
            "in": "path",
            "name": "key_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete deploy key for a project",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SSHKey" }
              }
            }
          }
        },
        "summary": "Delete Projects Id Deploy Keys Key Id",
        "tags": ["projects"]
      },
      "get": {
        "description": "Get single deploy key",
        "operationId": "getV3ProjectsIdDeployKeysKeyId",
        "parameters": [
          {
            "description": "The ID of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of the deploy key",
            "in": "path",
            "name": "key_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get single deploy key",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SSHKey" }
              }
            }
          }
        },
        "summary": "Get Projects Id Deploy Keys Key Id",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/deploy_keys/{key_id}/disable": {
      "delete": {
        "description": "This feature was added in GitLab 8.11",
        "operationId": "deleteV3ProjectsIdDeployKeysKeyIdDisable",
        "parameters": [
          {
            "description": "The ID of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of the deploy key",
            "in": "path",
            "name": "key_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Disable a deploy key for a project",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SSHKey" }
              }
            }
          }
        },
        "summary": "Delete Projects Id Deploy Keys Key Id Disable",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/deploy_keys/{key_id}/enable": {
      "post": {
        "description": "This feature was added in GitLab 8.11",
        "operationId": "postV3ProjectsIdDeployKeysKeyIdEnable",
        "parameters": [
          {
            "description": "The ID of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of the deploy key",
            "in": "path",
            "name": "key_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "201": {
            "description": "Enable a deploy key for a project",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SSHKey" }
              }
            }
          }
        },
        "summary": "Create Projects Id Deploy Keys Key Id Enable",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/deployments": {
      "get": {
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "getV3ProjectsIdDeployments",
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get all deployments of the project",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Deployment" }
              }
            }
          }
        },
        "summary": "Get Projects Id Deployments",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/deployments/{deployment_id}": {
      "get": {
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "getV3ProjectsIdDeploymentsDeploymentId",
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The deployment ID",
            "in": "path",
            "name": "deployment_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Gets a specific deployment",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Deployment" }
              }
            }
          }
        },
        "summary": "Get Projects Id Deployments Deployment Id",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/environments": {
      "get": {
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "getV3ProjectsIdEnvironments",
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get all environments of the project",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Environment" }
              }
            }
          }
        },
        "summary": "Get Projects Id Environments",
        "tags": ["projects"]
      },
      "post": {
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "postV3ProjectsIdEnvironments",
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "The name of the environment to be created",
                    "type": "string"
                  },
                  "external_url": {
                    "description": "URL on which this deployment is viewable",
                    "type": "string"
                  },
                  "slug": { "type": "string" }
                },
                "required": ["name"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Creates a new environment",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Environment" }
              }
            }
          }
        },
        "summary": "Create Projects Id Environments",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/environments/{environment_id}": {
      "delete": {
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "deleteV3ProjectsIdEnvironmentsEnvironmentId",
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The environment ID",
            "in": "path",
            "name": "environment_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Deletes an existing environment",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Environment" }
              }
            }
          }
        },
        "summary": "Delete Projects Id Environments Environment Id",
        "tags": ["projects"]
      },
      "put": {
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "putV3ProjectsIdEnvironmentsEnvironmentId",
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The environment ID",
            "in": "path",
            "name": "environment_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "The new environment name",
                    "type": "string"
                  },
                  "external_url": {
                    "description": "The new URL on which this deployment is viewable",
                    "type": "string"
                  },
                  "slug": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updates an existing environment",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Environment" }
              }
            }
          }
        },
        "summary": "Update Projects Id Environments Environment Id",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/events": {
      "get": {
        "description": "Get events for a single project",
        "operationId": "getV3ProjectsIdEvents",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get events for a single project",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Event" }
              }
            }
          }
        },
        "summary": "Get Projects Id Events",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/fork": {
      "delete": {
        "description": "Remove a forked_from relationship",
        "operationId": "deleteV3ProjectsIdFork",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": { "description": "Remove a forked_from relationship" }
        },
        "summary": "Delete Projects Id Fork",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/fork/{forked_from_id}": {
      "post": {
        "description": "Mark this project as forked from another",
        "operationId": "postV3ProjectsIdForkForkedFromId",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of the project it was forked from",
            "in": "path",
            "name": "forked_from_id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "201": { "description": "Mark this project as forked from another" }
        },
        "summary": "Create Projects Id Fork Forked From Id",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/hooks": {
      "get": {
        "description": "Get project hooks",
        "operationId": "getV3ProjectsIdHooks",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get project hooks",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProjectHook" }
              }
            }
          }
        },
        "summary": "Get Projects Id Hooks",
        "tags": ["projects"]
      },
      "post": {
        "description": "Add hook to project",
        "operationId": "postV3ProjectsIdHooks",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/postV3ProjectsIdHooks"
        },
        "responses": {
          "201": {
            "description": "Add hook to project",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProjectHook" }
              }
            }
          }
        },
        "summary": "Create Projects Id Hooks",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/hooks/{hook_id}": {
      "delete": {
        "description": "Deletes project hook",
        "operationId": "deleteV3ProjectsIdHooksHookId",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of the hook to delete",
            "in": "path",
            "name": "hook_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Deletes project hook",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProjectHook" }
              }
            }
          }
        },
        "summary": "Delete Projects Id Hooks Hook Id",
        "tags": ["projects"]
      },
      "get": {
        "description": "Get a project hook",
        "operationId": "getV3ProjectsIdHooksHookId",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of a project hook",
            "in": "path",
            "name": "hook_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a project hook",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProjectHook" }
              }
            }
          }
        },
        "summary": "Get Projects Id Hooks Hook Id",
        "tags": ["projects"]
      },
      "put": {
        "description": "Update an existing project hook",
        "operationId": "putV3ProjectsIdHooksHookId",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of the hook to update",
            "in": "path",
            "name": "hook_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/postV3ProjectsIdHooks"
        },
        "responses": {
          "200": {
            "description": "Update an existing project hook",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProjectHook" }
              }
            }
          }
        },
        "summary": "Update Projects Id Hooks Hook Id",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/issues": {
      "get": {
        "description": "Get a list of project issues",
        "operationId": "getV3ProjectsIdIssues",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Return opened, closed, or all issues",
            "in": "query",
            "name": "state",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["opened", "closed", "all"],
              "default": "all"
            }
          },
          {
            "description": "Return the issue having the given `iid`",
            "in": "query",
            "name": "iid",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Comma-separated list of label names",
            "in": "query",
            "name": "labels",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Return issues for a specific milestone",
            "in": "query",
            "name": "milestone",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Return issues ordered by `created_at` or `updated_at` fields.",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["created_at", "updated_at"],
              "default": "created_at"
            }
          },
          {
            "description": "Return issues sorted in `asc` or `desc` order.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of project issues",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Issue" }
              }
            }
          }
        },
        "summary": "Get Projects Id Issues",
        "tags": ["projects"]
      },
      "post": {
        "description": "Create a new project issue",
        "operationId": "postV3ProjectsIdIssues",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "description": "The title of an issue",
                    "type": "string"
                  },
                  "created_at": {
                    "description": "Date time when the issue was created. Available only for admins and project owners.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "merge_request_for_resolving_discussions": {
                    "description": "The IID of a merge request for which to resolve discussions",
                    "type": "integer",
                    "format": "int32"
                  },
                  "description": {
                    "description": "The description of an issue",
                    "type": "string"
                  },
                  "assignee_id": {
                    "description": "The ID of a user to assign issue",
                    "type": "integer",
                    "format": "int32"
                  },
                  "milestone_id": {
                    "description": "The ID of a milestone to assign issue",
                    "type": "integer",
                    "format": "int32"
                  },
                  "labels": {
                    "description": "Comma-separated list of label names",
                    "type": "string"
                  },
                  "due_date": {
                    "description": "Date time string in the format YEAR-MONTH-DAY",
                    "type": "string"
                  },
                  "confidential": {
                    "description": "Boolean parameter if the issue should be confidential",
                    "type": "boolean"
                  }
                },
                "required": ["title"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a new project issue",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Issue" }
              }
            }
          }
        },
        "summary": "Create Projects Id Issues",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/issues/{issue_id}": {
      "delete": {
        "description": "Delete a project issue",
        "operationId": "deleteV3ProjectsIdIssuesIssueId",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of a project issue",
            "in": "path",
            "name": "issue_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": { "204": { "description": "Delete a project issue" } },
        "summary": "Delete Projects Id Issues Issue Id",
        "tags": ["projects"]
      },
      "get": {
        "description": "Get a single project issue",
        "operationId": "getV3ProjectsIdIssuesIssueId",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of a project issue",
            "in": "path",
            "name": "issue_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single project issue",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Issue" }
              }
            }
          }
        },
        "summary": "Get Projects Id Issues Issue Id",
        "tags": ["projects"]
      },
      "put": {
        "description": "Update an existing issue",
        "operationId": "putV3ProjectsIdIssuesIssueId",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of a project issue",
            "in": "path",
            "name": "issue_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "description": "The title of an issue",
                    "type": "string"
                  },
                  "updated_at": {
                    "description": "Date time when the issue was updated. Available only for admins and project owners.",
                    "type": "string",
                    "format": "date-time"
                  },
                  "state_event": {
                    "description": "State of the issue",
                    "type": "string",
                    "enum": ["reopen", "close"]
                  },
                  "description": {
                    "description": "The description of an issue",
                    "type": "string"
                  },
                  "assignee_id": {
                    "description": "The ID of a user to assign issue",
                    "type": "integer",
                    "format": "int32"
                  },
                  "milestone_id": {
                    "description": "The ID of a milestone to assign issue",
                    "type": "integer",
                    "format": "int32"
                  },
                  "labels": {
                    "description": "Comma-separated list of label names",
                    "type": "string"
                  },
                  "due_date": {
                    "description": "Date time string in the format YEAR-MONTH-DAY",
                    "type": "string"
                  },
                  "confidential": {
                    "description": "Boolean parameter if the issue should be confidential",
                    "type": "boolean"
                  },
                  "created_at": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update an existing issue",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Issue" }
              }
            }
          }
        },
        "summary": "Update Projects Id Issues Issue Id",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/issues/{issue_id}/add_spent_time": {
      "post": {
        "description": "Add spent time for a project issue",
        "operationId": "postV3ProjectsIdIssuesIssueIdAddSpentTime",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of a project issue",
            "in": "path",
            "name": "issue_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/postV3ProjectsIdIssuesIssueIdAddSpentTime"
        },
        "responses": {
          "201": { "description": "Add spent time for a project issue" }
        },
        "summary": "Create Projects Id Issues Issue Id Add Spent Time",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/issues/{issue_id}/award_emoji": {
      "get": {
        "description": "This feature was introduced in 8.9",
        "operationId": "getV3ProjectsIdIssuesIssueIdAwardEmoji",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of an Issue, Merge Request or Snippet",
            "in": "path",
            "name": "issue_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of project +awardable+ award emoji",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AwardEmoji" }
              }
            }
          }
        },
        "summary": "Get Projects Id Issues Issue Id Award Emoji",
        "tags": ["projects"]
      },
      "post": {
        "description": "This feature was introduced in 8.9",
        "operationId": "postV3ProjectsIdIssuesIssueIdAwardEmoji",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "issue_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/postV3ProjectsIdIssuesIssueIdAwardEmoji"
        },
        "responses": {
          "201": {
            "description": "Award a new Emoji",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AwardEmoji" }
              }
            }
          }
        },
        "summary": "Create Projects Id Issues Issue Id Award Emoji",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/issues/{issue_id}/award_emoji/{award_id}": {
      "delete": {
        "description": "This feature was introduced in 8.9",
        "operationId": "deleteV3ProjectsIdIssuesIssueIdAwardEmojiAwardId",
        "parameters": [
          {
            "description": "The ID of an award emoji",
            "in": "path",
            "name": "award_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "issue_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete a +awardables+ award emoji",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AwardEmoji" }
              }
            }
          }
        },
        "summary": "Delete Projects Id Issues Issue Id Award Emoji Award Id",
        "tags": ["projects"]
      },
      "get": {
        "description": "This feature was introduced in 8.9",
        "operationId": "getV3ProjectsIdIssuesIssueIdAwardEmojiAwardId",
        "parameters": [
          {
            "description": "The ID of the award",
            "in": "path",
            "name": "award_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "issue_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a specific award emoji",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AwardEmoji" }
              }
            }
          }
        },
        "summary": "Get Projects Id Issues Issue Id Award Emoji Award Id",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/issues/{issue_id}/move": {
      "post": {
        "description": "Move an existing issue",
        "operationId": "postV3ProjectsIdIssuesIssueIdMove",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of a project issue",
            "in": "path",
            "name": "issue_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "to_project_id": {
                    "description": "The ID of the new project",
                    "type": "integer",
                    "format": "int32"
                  }
                },
                "required": ["to_project_id"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Move an existing issue",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Issue" }
              }
            }
          }
        },
        "summary": "Create Projects Id Issues Issue Id Move",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/issues/{issue_id}/notes/{note_id}/award_emoji": {
      "get": {
        "description": "This feature was introduced in 8.9",
        "operationId": "getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmoji",
        "parameters": [
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "issue_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of project +awardable+ award emoji",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AwardEmoji" }
              }
            }
          }
        },
        "summary": "Get Projects Id Issues Issue Id Notes Note Id Award Emoji",
        "tags": ["projects"]
      },
      "post": {
        "description": "This feature was introduced in 8.9",
        "operationId": "postV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmoji",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "issue_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/postV3ProjectsIdIssuesIssueIdAwardEmoji"
        },
        "responses": {
          "201": {
            "description": "Award a new Emoji",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AwardEmoji" }
              }
            }
          }
        },
        "summary": "Create Projects Id Issues Issue Id Notes Note Id Award Emoji",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/issues/{issue_id}/notes/{note_id}/award_emoji/{award_id}": {
      "delete": {
        "description": "This feature was introduced in 8.9",
        "operationId": "deleteV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardId",
        "parameters": [
          {
            "description": "The ID of an award emoji",
            "in": "path",
            "name": "award_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "issue_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete a +awardables+ award emoji",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AwardEmoji" }
              }
            }
          }
        },
        "summary": "Delete Projects Id Issues Issue Id Notes Note Id Award Emoji Award Id",
        "tags": ["projects"]
      },
      "get": {
        "description": "This feature was introduced in 8.9",
        "operationId": "getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardId",
        "parameters": [
          {
            "description": "The ID of the award",
            "in": "path",
            "name": "award_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "issue_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a specific award emoji",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AwardEmoji" }
              }
            }
          }
        },
        "summary": "Get Projects Id Issues Issue Id Notes Note Id Award Emoji Award Id",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/issues/{issue_id}/reset_spent_time": {
      "post": {
        "description": "Reset spent time for a project issue",
        "operationId": "postV3ProjectsIdIssuesIssueIdResetSpentTime",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of a project issue",
            "in": "path",
            "name": "issue_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "201": { "description": "Reset spent time for a project issue" }
        },
        "summary": "Create Projects Id Issues Issue Id Reset Spent Time",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/issues/{issue_id}/reset_time_estimate": {
      "post": {
        "description": "Reset the time estimate for a project issue",
        "operationId": "postV3ProjectsIdIssuesIssueIdResetTimeEstimate",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of a project issue",
            "in": "path",
            "name": "issue_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "201": {
            "description": "Reset the time estimate for a project issue"
          }
        },
        "summary": "Create Projects Id Issues Issue Id Reset Time Estimate",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/issues/{issue_id}/time_estimate": {
      "post": {
        "description": "Set a time estimate for a project issue",
        "operationId": "postV3ProjectsIdIssuesIssueIdTimeEstimate",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of a project issue",
            "in": "path",
            "name": "issue_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/postV3ProjectsIdIssuesIssueIdAddSpentTime"
        },
        "responses": {
          "201": { "description": "Set a time estimate for a project issue" }
        },
        "summary": "Create Projects Id Issues Issue Id Time Estimate",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/issues/{issue_id}/time_stats": {
      "get": {
        "description": "Show time stats for a project issue",
        "operationId": "getV3ProjectsIdIssuesIssueIdTimeStats",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of a project issue",
            "in": "path",
            "name": "issue_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": { "description": "Show time stats for a project issue" }
        },
        "summary": "Get Projects Id Issues Issue Id Time Stats",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/issues/{issue_id}/todo": {
      "post": {
        "description": "Create a todo on an issuable",
        "operationId": "postV3ProjectsIdIssuesIssueIdTodo",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of an issuable",
            "in": "path",
            "name": "issue_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "201": {
            "description": "Create a todo on an issuable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Todo" }
              }
            }
          }
        },
        "summary": "Create Projects Id Issues Issue Id Todo",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/issues/{noteable_id}/notes": {
      "get": {
        "description": "Get a list of project +noteable+ notes",
        "operationId": "getV3ProjectsIdIssuesNoteableIdNotes",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of the noteable",
            "in": "path",
            "name": "noteable_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of project +noteable+ notes",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Note" }
              }
            }
          }
        },
        "summary": "Get Projects Id Issues Noteable Id Notes",
        "tags": ["projects"]
      },
      "post": {
        "description": "Create a new +noteable+ note",
        "operationId": "postV3ProjectsIdIssuesNoteableIdNotes",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of the noteable",
            "in": "path",
            "name": "noteable_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/postV3ProjectsIdIssuesNoteableIdNotes"
        },
        "responses": {
          "201": {
            "description": "Create a new +noteable+ note",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Note" }
              }
            }
          }
        },
        "summary": "Create Projects Id Issues Noteable Id Notes",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/issues/{noteable_id}/notes/{note_id}": {
      "delete": {
        "description": "Delete a +noteable+ note",
        "operationId": "deleteV3ProjectsIdIssuesNoteableIdNotesNoteId",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of the noteable",
            "in": "path",
            "name": "noteable_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "The ID of a note",
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete a +noteable+ note",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Note" }
              }
            }
          }
        },
        "summary": "Delete Projects Id Issues Noteable Id Notes Note Id",
        "tags": ["projects"]
      },
      "get": {
        "description": "Get a single +noteable+ note",
        "operationId": "getV3ProjectsIdIssuesNoteableIdNotesNoteId",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of a note",
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "The ID of the noteable",
            "in": "path",
            "name": "noteable_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single +noteable+ note",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Note" }
              }
            }
          }
        },
        "summary": "Get Projects Id Issues Noteable Id Notes Note Id",
        "tags": ["projects"]
      },
      "put": {
        "description": "Update an existing +noteable+ note",
        "operationId": "putV3ProjectsIdIssuesNoteableIdNotesNoteId",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of the noteable",
            "in": "path",
            "name": "noteable_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "The ID of a note",
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/putV3ProjectsIdIssuesNoteableIdNotesNoteId"
        },
        "responses": {
          "200": {
            "description": "Update an existing +noteable+ note",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Note" }
              }
            }
          }
        },
        "summary": "Update Projects Id Issues Noteable Id Notes Note Id",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/issues/{subscribable_id}/subscription": {
      "delete": {
        "description": "Unsubscribe from a resource",
        "operationId": "deleteV3ProjectsIdIssuesSubscribableIdSubscription",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of a resource",
            "in": "path",
            "name": "subscribable_id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Unsubscribe from a resource",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Issue" }
              }
            }
          }
        },
        "summary": "Delete Projects Id Issues Subscribable Id Subscription",
        "tags": ["projects"]
      },
      "post": {
        "description": "Subscribe to a resource",
        "operationId": "postV3ProjectsIdIssuesSubscribableIdSubscription",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of a resource",
            "in": "path",
            "name": "subscribable_id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "201": {
            "description": "Subscribe to a resource",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Issue" }
              }
            }
          }
        },
        "summary": "Create Projects Id Issues Subscribable Id Subscription",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/keys": {
      "get": {
        "description": "Get a specific project's deploy keys",
        "operationId": "getV3ProjectsIdKeys",
        "parameters": [
          {
            "description": "The ID of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a specific project's deploy keys",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SSHKey" }
              }
            }
          }
        },
        "summary": "Get Projects Id Keys",
        "tags": ["projects"]
      },
      "post": {
        "description": "Add new deploy key to currently authenticated user",
        "operationId": "postV3ProjectsIdKeys",
        "parameters": [
          {
            "description": "The ID of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/postV3ProjectsIdDeployKeys"
        },
        "responses": {
          "201": {
            "description": "Add new deploy key to currently authenticated user",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SSHKey" }
              }
            }
          }
        },
        "summary": "Create Projects Id Keys",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/keys/{key_id}": {
      "delete": {
        "description": "Delete deploy key for a project",
        "operationId": "deleteV3ProjectsIdKeysKeyId",
        "parameters": [
          {
            "description": "The ID of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of the deploy key",
            "in": "path",
            "name": "key_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete deploy key for a project",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SSHKey" }
              }
            }
          }
        },
        "summary": "Delete Projects Id Keys Key Id",
        "tags": ["projects"]
      },
      "get": {
        "description": "Get single deploy key",
        "operationId": "getV3ProjectsIdKeysKeyId",
        "parameters": [
          {
            "description": "The ID of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of the deploy key",
            "in": "path",
            "name": "key_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get single deploy key",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SSHKey" }
              }
            }
          }
        },
        "summary": "Get Projects Id Keys Key Id",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/keys/{key_id}/disable": {
      "delete": {
        "description": "This feature was added in GitLab 8.11",
        "operationId": "deleteV3ProjectsIdKeysKeyIdDisable",
        "parameters": [
          {
            "description": "The ID of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of the deploy key",
            "in": "path",
            "name": "key_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Disable a deploy key for a project",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SSHKey" }
              }
            }
          }
        },
        "summary": "Delete Projects Id Keys Key Id Disable",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/keys/{key_id}/enable": {
      "post": {
        "description": "This feature was added in GitLab 8.11",
        "operationId": "postV3ProjectsIdKeysKeyIdEnable",
        "parameters": [
          {
            "description": "The ID of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of the deploy key",
            "in": "path",
            "name": "key_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "201": {
            "description": "Enable a deploy key for a project",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SSHKey" }
              }
            }
          }
        },
        "summary": "Create Projects Id Keys Key Id Enable",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/labels": {
      "delete": {
        "description": "Delete an existing label",
        "operationId": "deleteV3ProjectsIdLabels",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The name of the label to be deleted",
            "in": "query",
            "name": "name",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete an existing label",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Label" }
              }
            }
          }
        },
        "summary": "Delete Projects Id Labels",
        "tags": ["projects"]
      },
      "get": {
        "description": "Get all labels of the project",
        "operationId": "getV3ProjectsIdLabels",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get all labels of the project",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Label" }
              }
            }
          }
        },
        "summary": "Get Projects Id Labels",
        "tags": ["projects"]
      },
      "post": {
        "description": "Create a new label",
        "operationId": "postV3ProjectsIdLabels",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "The name of the label to be created",
                    "type": "string"
                  },
                  "color": {
                    "description": "The color of the label given in 6-digit hex notation with leading '#' sign (e.g. #FFAABB)",
                    "type": "string"
                  },
                  "description": {
                    "description": "The description of label to be created",
                    "type": "string"
                  },
                  "priority": {
                    "description": "The priority of the label",
                    "type": "integer",
                    "format": "int32"
                  }
                },
                "required": ["name", "color"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a new label",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Label" }
              }
            }
          }
        },
        "summary": "Create Projects Id Labels",
        "tags": ["projects"]
      },
      "put": {
        "description": "Update an existing label. At least one optional parameter is required.",
        "operationId": "putV3ProjectsIdLabels",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "The name of the label to be updated",
                    "type": "string"
                  },
                  "new_name": {
                    "description": "The new name of the label",
                    "type": "string"
                  },
                  "color": {
                    "description": "The new color of the label given in 6-digit hex notation with leading '#' sign (e.g. #FFAABB)",
                    "type": "string"
                  },
                  "description": {
                    "description": "The new description of label",
                    "type": "string"
                  },
                  "priority": {
                    "description": "The priority of the label",
                    "type": "integer",
                    "format": "int32"
                  }
                },
                "required": ["name"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update an existing label. At least one optional parameter is required.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Label" }
              }
            }
          }
        },
        "summary": "Update Projects Id Labels",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/labels/{subscribable_id}/subscription": {
      "delete": {
        "description": "Unsubscribe from a resource",
        "operationId": "deleteV3ProjectsIdLabelsSubscribableIdSubscription",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of a resource",
            "in": "path",
            "name": "subscribable_id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Unsubscribe from a resource",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Label" }
              }
            }
          }
        },
        "summary": "Delete Projects Id Labels Subscribable Id Subscription",
        "tags": ["projects"]
      },
      "post": {
        "description": "Subscribe to a resource",
        "operationId": "postV3ProjectsIdLabelsSubscribableIdSubscription",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of a resource",
            "in": "path",
            "name": "subscribable_id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "201": {
            "description": "Subscribe to a resource",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Label" }
              }
            }
          }
        },
        "summary": "Create Projects Id Labels Subscribable Id Subscription",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/members": {
      "get": {
        "description": "Gets a list of group or project members viewable by the authenticated user.",
        "operationId": "getV3ProjectsIdMembers",
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "A query string to search for members",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Gets a list of group or project members viewable by the authenticated user.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Member" }
              }
            }
          }
        },
        "summary": "Get Projects Id Members",
        "tags": ["projects"]
      },
      "post": {
        "description": "Adds a member to a group or project.",
        "operationId": "postV3ProjectsIdMembers",
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/postV3GroupsIdMembers"
        },
        "responses": {
          "201": {
            "description": "Adds a member to a group or project.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Member" }
              }
            }
          }
        },
        "summary": "Create Projects Id Members",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/members/{user_id}": {
      "delete": {
        "description": "Removes a user from a group or project.",
        "operationId": "deleteV3ProjectsIdMembersUserId",
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The user ID of the member",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "204": { "description": "Removes a user from a group or project." }
        },
        "summary": "Delete Projects Id Members User Id",
        "tags": ["projects"]
      },
      "get": {
        "description": "Gets a member of a group or project.",
        "operationId": "getV3ProjectsIdMembersUserId",
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The user ID of the member",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Gets a member of a group or project.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Member" }
              }
            }
          }
        },
        "summary": "Get Projects Id Members User Id",
        "tags": ["projects"]
      },
      "put": {
        "description": "Updates a member of a group or project.",
        "operationId": "putV3ProjectsIdMembersUserId",
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The user ID of the new member",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/putV3GroupsIdMembersUserId"
        },
        "responses": {
          "200": {
            "description": "Updates a member of a group or project.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Member" }
              }
            }
          }
        },
        "summary": "Update Projects Id Members User Id",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/merge_request/{merge_request_id}": {
      "get": {
        "description": "This endpoint is deprecated and will be removed in GitLab 9.0.",
        "operationId": "getV3ProjectsIdMergeRequestMergeRequestId",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of a merge request",
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single merge request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MergeRequest" }
              }
            }
          }
        },
        "summary": "Get Projects Id Merge Request Merge Request Id",
        "tags": ["projects"]
      },
      "put": {
        "description": "Update a merge request",
        "operationId": "putV3ProjectsIdMergeRequestMergeRequestId",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/putV3ProjectsIdMergeRequestMergeRequestId"
        },
        "responses": {
          "200": {
            "description": "Update a merge request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MergeRequest" }
              }
            }
          }
        },
        "summary": "Update Projects Id Merge Request Merge Request Id",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/merge_request/{merge_request_id}/cancel_merge_when_build_succeeds": {
      "post": {
        "description": "Cancel merge if \"Merge When Pipeline Succeeds\" is enabled",
        "operationId": "postV3ProjectsIdMergeRequestMergeRequestIdCancelMergeWhenBuildSucceeds",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "201": {
            "description": "Cancel merge if \"Merge When Pipeline Succeeds\" is enabled",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MergeRequest" }
              }
            }
          }
        },
        "summary": "Create Projects Id Merge Request Merge Request Id Cancel Merge When Build Succeeds",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/merge_request/{merge_request_id}/changes": {
      "get": {
        "description": "Show the merge request changes",
        "operationId": "getV3ProjectsIdMergeRequestMergeRequestIdChanges",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Show the merge request changes",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MergeRequestChanges" }
              }
            }
          }
        },
        "summary": "Get Projects Id Merge Request Merge Request Id Changes",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/merge_request/{merge_request_id}/closes_issues": {
      "get": {
        "description": "List issues that will be closed on merge",
        "operationId": "getV3ProjectsIdMergeRequestMergeRequestIdClosesIssues",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "List issues that will be closed on merge",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MRNote" }
              }
            }
          }
        },
        "summary": "Get Projects Id Merge Request Merge Request Id Closes Issues",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/merge_request/{merge_request_id}/comments": {
      "get": {
        "description": "Duplicate. DEPRECATED and WILL BE REMOVED in 9.0",
        "operationId": "getV3ProjectsIdMergeRequestMergeRequestIdComments",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get the comments of a merge request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MRNote" }
              }
            }
          }
        },
        "summary": "Get Projects Id Merge Request Merge Request Id Comments",
        "tags": ["projects"]
      },
      "post": {
        "description": "Duplicate. DEPRECATED and WILL BE REMOVED in 9.0",
        "operationId": "postV3ProjectsIdMergeRequestMergeRequestIdComments",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/postV3ProjectsIdMergeRequestMergeRequestIdComments"
        },
        "responses": {
          "201": {
            "description": "Post a comment to a merge request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MRNote" }
              }
            }
          }
        },
        "summary": "Create Projects Id Merge Request Merge Request Id Comments",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/merge_request/{merge_request_id}/commits": {
      "get": {
        "description": "Get the commits of a merge request",
        "operationId": "getV3ProjectsIdMergeRequestMergeRequestIdCommits",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get the commits of a merge request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RepoCommit" }
              }
            }
          }
        },
        "summary": "Get Projects Id Merge Request Merge Request Id Commits",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/merge_request/{merge_request_id}/merge": {
      "put": {
        "description": "Merge a merge request",
        "operationId": "putV3ProjectsIdMergeRequestMergeRequestIdMerge",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/putV3ProjectsIdMergeRequestMergeRequestIdMerge"
        },
        "responses": {
          "200": {
            "description": "Merge a merge request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MergeRequest" }
              }
            }
          }
        },
        "summary": "Update Projects Id Merge Request Merge Request Id Merge",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/merge_request/{subscribable_id}/subscription": {
      "delete": {
        "description": "Unsubscribe from a resource",
        "operationId": "deleteV3ProjectsIdMergeRequestSubscribableIdSubscription",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of a resource",
            "in": "path",
            "name": "subscribable_id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Unsubscribe from a resource",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MergeRequest" }
              }
            }
          }
        },
        "summary": "Delete Projects Id Merge Request Subscribable Id Subscription",
        "tags": ["projects"]
      },
      "post": {
        "description": "Subscribe to a resource",
        "operationId": "postV3ProjectsIdMergeRequestSubscribableIdSubscription",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of a resource",
            "in": "path",
            "name": "subscribable_id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "201": {
            "description": "Subscribe to a resource",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MergeRequest" }
              }
            }
          }
        },
        "summary": "Create Projects Id Merge Request Subscribable Id Subscription",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/merge_requests": {
      "get": {
        "description": "List merge requests",
        "operationId": "getV3ProjectsIdMergeRequests",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Return opened, closed, merged, or all merge requests",
            "in": "query",
            "name": "state",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["opened", "closed", "merged", "all"],
              "default": "all"
            }
          },
          {
            "description": "Return merge requests ordered by `created_at` or `updated_at` fields.",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["created_at", "updated_at"],
              "default": "created_at"
            }
          },
          {
            "description": "Return merge requests sorted in `asc` or `desc` order.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "iid": {
                    "description": "The IID of the merge requests",
                    "type": "array",
                    "items": { "format": "int32", "type": "integer" }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List merge requests",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MergeRequest" }
              }
            }
          }
        },
        "summary": "Get Projects Id Merge Requests",
        "tags": ["projects"]
      },
      "post": {
        "description": "Create a merge request",
        "operationId": "postV3ProjectsIdMergeRequests",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "description": "The title of the merge request",
                    "type": "string"
                  },
                  "source_branch": {
                    "description": "The source branch",
                    "type": "string"
                  },
                  "target_branch": {
                    "description": "The target branch",
                    "type": "string"
                  },
                  "target_project_id": {
                    "description": "The target project of the merge request defaults to the :id of the project",
                    "type": "integer",
                    "format": "int32"
                  },
                  "description": {
                    "description": "The description of the merge request",
                    "type": "string"
                  },
                  "assignee_id": {
                    "description": "The ID of a user to assign the merge request",
                    "type": "integer",
                    "format": "int32"
                  },
                  "milestone_id": {
                    "description": "The ID of a milestone to assign the merge request",
                    "type": "integer",
                    "format": "int32"
                  },
                  "labels": {
                    "description": "Comma-separated list of label names",
                    "type": "string"
                  },
                  "remove_source_branch": {
                    "description": "Remove source branch when merging",
                    "type": "boolean"
                  }
                },
                "required": ["title", "source_branch", "target_branch"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a merge request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MergeRequest" }
              }
            }
          }
        },
        "summary": "Create Projects Id Merge Requests",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}": {
      "delete": {
        "description": "Delete a merge request",
        "operationId": "deleteV3ProjectsIdMergeRequestsMergeRequestId",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of a merge request",
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": { "204": { "description": "Delete a merge request" } },
        "summary": "Delete Projects Id Merge Requests Merge Request Id",
        "tags": ["projects"]
      },
      "get": {
        "description": "Get a single merge request",
        "operationId": "getV3ProjectsIdMergeRequestsMergeRequestId",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single merge request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MergeRequest" }
              }
            }
          }
        },
        "summary": "Get Projects Id Merge Requests Merge Request Id",
        "tags": ["projects"]
      },
      "put": {
        "description": "Update a merge request",
        "operationId": "putV3ProjectsIdMergeRequestsMergeRequestId",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/putV3ProjectsIdMergeRequestMergeRequestId"
        },
        "responses": {
          "200": {
            "description": "Update a merge request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MergeRequest" }
              }
            }
          }
        },
        "summary": "Update Projects Id Merge Requests Merge Request Id",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/add_spent_time": {
      "post": {
        "description": "Add spent time for a project merge_request",
        "operationId": "postV3ProjectsIdMergeRequestsMergeRequestIdAddSpentTime",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of a project merge_request",
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/postV3ProjectsIdIssuesIssueIdAddSpentTime"
        },
        "responses": {
          "201": { "description": "Add spent time for a project merge_request" }
        },
        "summary": "Create Projects Id Merge Requests Merge Request Id Add Spent Time",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/award_emoji": {
      "get": {
        "description": "This feature was introduced in 8.9",
        "operationId": "getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmoji",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of an Issue, Merge Request or Snippet",
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of project +awardable+ award emoji",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AwardEmoji" }
              }
            }
          }
        },
        "summary": "Get Projects Id Merge Requests Merge Request Id Award Emoji",
        "tags": ["projects"]
      },
      "post": {
        "description": "This feature was introduced in 8.9",
        "operationId": "postV3ProjectsIdMergeRequestsMergeRequestIdAwardEmoji",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/postV3ProjectsIdIssuesIssueIdAwardEmoji"
        },
        "responses": {
          "201": {
            "description": "Award a new Emoji",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AwardEmoji" }
              }
            }
          }
        },
        "summary": "Create Projects Id Merge Requests Merge Request Id Award Emoji",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/award_emoji/{award_id}": {
      "delete": {
        "description": "This feature was introduced in 8.9",
        "operationId": "deleteV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardId",
        "parameters": [
          {
            "description": "The ID of an award emoji",
            "in": "path",
            "name": "award_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete a +awardables+ award emoji",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AwardEmoji" }
              }
            }
          }
        },
        "summary": "Delete Projects Id Merge Requests Merge Request Id Award Emoji Award Id",
        "tags": ["projects"]
      },
      "get": {
        "description": "This feature was introduced in 8.9",
        "operationId": "getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardId",
        "parameters": [
          {
            "description": "The ID of the award",
            "in": "path",
            "name": "award_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a specific award emoji",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AwardEmoji" }
              }
            }
          }
        },
        "summary": "Get Projects Id Merge Requests Merge Request Id Award Emoji Award Id",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/cancel_merge_when_build_succeeds": {
      "post": {
        "description": "Cancel merge if \"Merge When Pipeline Succeeds\" is enabled",
        "operationId": "postV3ProjectsIdMergeRequestsMergeRequestIdCancelMergeWhenBuildSucceeds",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "201": {
            "description": "Cancel merge if \"Merge When Pipeline Succeeds\" is enabled",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MergeRequest" }
              }
            }
          }
        },
        "summary": "Create Projects Id Merge Requests Merge Request Id Cancel Merge When Build Succeeds",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/changes": {
      "get": {
        "description": "Show the merge request changes",
        "operationId": "getV3ProjectsIdMergeRequestsMergeRequestIdChanges",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Show the merge request changes",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MergeRequestChanges" }
              }
            }
          }
        },
        "summary": "Get Projects Id Merge Requests Merge Request Id Changes",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/closes_issues": {
      "get": {
        "description": "List issues that will be closed on merge",
        "operationId": "getV3ProjectsIdMergeRequestsMergeRequestIdClosesIssues",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "List issues that will be closed on merge",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MRNote" }
              }
            }
          }
        },
        "summary": "Get Projects Id Merge Requests Merge Request Id Closes Issues",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/comments": {
      "get": {
        "description": "Duplicate. DEPRECATED and WILL BE REMOVED in 9.0",
        "operationId": "getV3ProjectsIdMergeRequestsMergeRequestIdComments",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get the comments of a merge request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MRNote" }
              }
            }
          }
        },
        "summary": "Get Projects Id Merge Requests Merge Request Id Comments",
        "tags": ["projects"]
      },
      "post": {
        "description": "Duplicate. DEPRECATED and WILL BE REMOVED in 9.0",
        "operationId": "postV3ProjectsIdMergeRequestsMergeRequestIdComments",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/postV3ProjectsIdMergeRequestMergeRequestIdComments"
        },
        "responses": {
          "201": {
            "description": "Post a comment to a merge request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MRNote" }
              }
            }
          }
        },
        "summary": "Create Projects Id Merge Requests Merge Request Id Comments",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/commits": {
      "get": {
        "description": "Get the commits of a merge request",
        "operationId": "getV3ProjectsIdMergeRequestsMergeRequestIdCommits",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get the commits of a merge request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RepoCommit" }
              }
            }
          }
        },
        "summary": "Get Projects Id Merge Requests Merge Request Id Commits",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/merge": {
      "put": {
        "description": "Merge a merge request",
        "operationId": "putV3ProjectsIdMergeRequestsMergeRequestIdMerge",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/putV3ProjectsIdMergeRequestMergeRequestIdMerge"
        },
        "responses": {
          "200": {
            "description": "Merge a merge request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MergeRequest" }
              }
            }
          }
        },
        "summary": "Update Projects Id Merge Requests Merge Request Id Merge",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/notes/{note_id}/award_emoji": {
      "get": {
        "description": "This feature was introduced in 8.9",
        "operationId": "getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmoji",
        "parameters": [
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of project +awardable+ award emoji",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AwardEmoji" }
              }
            }
          }
        },
        "summary": "Get Projects Id Merge Requests Merge Request Id Notes Note Id Award Emoji",
        "tags": ["projects"]
      },
      "post": {
        "description": "This feature was introduced in 8.9",
        "operationId": "postV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmoji",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/postV3ProjectsIdIssuesIssueIdAwardEmoji"
        },
        "responses": {
          "201": {
            "description": "Award a new Emoji",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AwardEmoji" }
              }
            }
          }
        },
        "summary": "Create Projects Id Merge Requests Merge Request Id Notes Note Id Award Emoji",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/notes/{note_id}/award_emoji/{award_id}": {
      "delete": {
        "description": "This feature was introduced in 8.9",
        "operationId": "deleteV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardId",
        "parameters": [
          {
            "description": "The ID of an award emoji",
            "in": "path",
            "name": "award_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete a +awardables+ award emoji",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AwardEmoji" }
              }
            }
          }
        },
        "summary": "Delete Projects Id Merge Requests Merge Request Id Notes Note Id Award Emoji Award Id",
        "tags": ["projects"]
      },
      "get": {
        "description": "This feature was introduced in 8.9",
        "operationId": "getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardId",
        "parameters": [
          {
            "description": "The ID of the award",
            "in": "path",
            "name": "award_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a specific award emoji",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AwardEmoji" }
              }
            }
          }
        },
        "summary": "Get Projects Id Merge Requests Merge Request Id Notes Note Id Award Emoji Award Id",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/reset_spent_time": {
      "post": {
        "description": "Reset spent time for a project merge_request",
        "operationId": "postV3ProjectsIdMergeRequestsMergeRequestIdResetSpentTime",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of a project merge_request",
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "201": {
            "description": "Reset spent time for a project merge_request"
          }
        },
        "summary": "Create Projects Id Merge Requests Merge Request Id Reset Spent Time",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/reset_time_estimate": {
      "post": {
        "description": "Reset the time estimate for a project merge_request",
        "operationId": "postV3ProjectsIdMergeRequestsMergeRequestIdResetTimeEstimate",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of a project merge_request",
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "201": {
            "description": "Reset the time estimate for a project merge_request"
          }
        },
        "summary": "Create Projects Id Merge Requests Merge Request Id Reset Time Estimate",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/time_estimate": {
      "post": {
        "description": "Set a time estimate for a project merge_request",
        "operationId": "postV3ProjectsIdMergeRequestsMergeRequestIdTimeEstimate",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of a project merge_request",
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/postV3ProjectsIdIssuesIssueIdAddSpentTime"
        },
        "responses": {
          "201": {
            "description": "Set a time estimate for a project merge_request"
          }
        },
        "summary": "Create Projects Id Merge Requests Merge Request Id Time Estimate",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/time_stats": {
      "get": {
        "description": "Show time stats for a project merge_request",
        "operationId": "getV3ProjectsIdMergeRequestsMergeRequestIdTimeStats",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of a project merge_request",
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Show time stats for a project merge_request"
          }
        },
        "summary": "Get Projects Id Merge Requests Merge Request Id Time Stats",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/todo": {
      "post": {
        "description": "Create a todo on an issuable",
        "operationId": "postV3ProjectsIdMergeRequestsMergeRequestIdTodo",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of an issuable",
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "201": {
            "description": "Create a todo on an issuable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Todo" }
              }
            }
          }
        },
        "summary": "Create Projects Id Merge Requests Merge Request Id Todo",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/versions": {
      "get": {
        "description": "This feature was introduced in GitLab 8.12.",
        "operationId": "getV3ProjectsIdMergeRequestsMergeRequestIdVersions",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of a merge request",
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of merge request diff versions",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MergeRequestDiff" }
              }
            }
          }
        },
        "summary": "Get Projects Id Merge Requests Merge Request Id Versions",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/merge_requests/{merge_request_id}/versions/{version_id}": {
      "get": {
        "description": "This feature was introduced in GitLab 8.12.",
        "operationId": "getV3ProjectsIdMergeRequestsMergeRequestIdVersionsVersionId",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of a merge request",
            "in": "path",
            "name": "merge_request_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "The ID of a merge request diff version",
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single merge request diff version",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MergeRequestDiffFull"
                }
              }
            }
          }
        },
        "summary": "Get Projects Id Merge Requests Merge Request Id Versions Version Id",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/merge_requests/{noteable_id}/notes": {
      "get": {
        "description": "Get a list of project +noteable+ notes",
        "operationId": "getV3ProjectsIdMergeRequestsNoteableIdNotes",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of the noteable",
            "in": "path",
            "name": "noteable_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of project +noteable+ notes",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Note" }
              }
            }
          }
        },
        "summary": "Get Projects Id Merge Requests Noteable Id Notes",
        "tags": ["projects"]
      },
      "post": {
        "description": "Create a new +noteable+ note",
        "operationId": "postV3ProjectsIdMergeRequestsNoteableIdNotes",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of the noteable",
            "in": "path",
            "name": "noteable_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/postV3ProjectsIdIssuesNoteableIdNotes"
        },
        "responses": {
          "201": {
            "description": "Create a new +noteable+ note",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Note" }
              }
            }
          }
        },
        "summary": "Create Projects Id Merge Requests Noteable Id Notes",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/merge_requests/{noteable_id}/notes/{note_id}": {
      "delete": {
        "description": "Delete a +noteable+ note",
        "operationId": "deleteV3ProjectsIdMergeRequestsNoteableIdNotesNoteId",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of the noteable",
            "in": "path",
            "name": "noteable_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "The ID of a note",
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete a +noteable+ note",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Note" }
              }
            }
          }
        },
        "summary": "Delete Projects Id Merge Requests Noteable Id Notes Note Id",
        "tags": ["projects"]
      },
      "get": {
        "description": "Get a single +noteable+ note",
        "operationId": "getV3ProjectsIdMergeRequestsNoteableIdNotesNoteId",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of a note",
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "The ID of the noteable",
            "in": "path",
            "name": "noteable_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single +noteable+ note",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Note" }
              }
            }
          }
        },
        "summary": "Get Projects Id Merge Requests Noteable Id Notes Note Id",
        "tags": ["projects"]
      },
      "put": {
        "description": "Update an existing +noteable+ note",
        "operationId": "putV3ProjectsIdMergeRequestsNoteableIdNotesNoteId",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of the noteable",
            "in": "path",
            "name": "noteable_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "The ID of a note",
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/putV3ProjectsIdIssuesNoteableIdNotesNoteId"
        },
        "responses": {
          "200": {
            "description": "Update an existing +noteable+ note",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Note" }
              }
            }
          }
        },
        "summary": "Update Projects Id Merge Requests Noteable Id Notes Note Id",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/merge_requests/{subscribable_id}/subscription": {
      "delete": {
        "description": "Unsubscribe from a resource",
        "operationId": "deleteV3ProjectsIdMergeRequestsSubscribableIdSubscription",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of a resource",
            "in": "path",
            "name": "subscribable_id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Unsubscribe from a resource",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MergeRequest" }
              }
            }
          }
        },
        "summary": "Delete Projects Id Merge Requests Subscribable Id Subscription",
        "tags": ["projects"]
      },
      "post": {
        "description": "Subscribe to a resource",
        "operationId": "postV3ProjectsIdMergeRequestsSubscribableIdSubscription",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of a resource",
            "in": "path",
            "name": "subscribable_id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "201": {
            "description": "Subscribe to a resource",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MergeRequest" }
              }
            }
          }
        },
        "summary": "Create Projects Id Merge Requests Subscribable Id Subscription",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/milestones": {
      "get": {
        "description": "Get a list of project milestones",
        "operationId": "getV3ProjectsIdMilestones",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Return \"active\", \"closed\", or \"all\" milestones",
            "in": "query",
            "name": "state",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["active", "closed", "all"],
              "default": "all"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "iid": {
                    "description": "The IID of the milestone",
                    "type": "array",
                    "items": { "format": "int32", "type": "integer" }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Get a list of project milestones",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Milestone" }
              }
            }
          }
        },
        "summary": "Get Projects Id Milestones",
        "tags": ["projects"]
      },
      "post": {
        "description": "Create a new project milestone",
        "operationId": "postV3ProjectsIdMilestones",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "description": "The title of the milestone",
                    "type": "string"
                  },
                  "description": {
                    "description": "The description of the milestone",
                    "type": "string"
                  },
                  "due_date": {
                    "description": "The due date of the milestone. The ISO 8601 date format (%Y-%m-%d)",
                    "type": "string"
                  },
                  "start_date": {
                    "description": "The start date of the milestone. The ISO 8601 date format (%Y-%m-%d)",
                    "type": "string"
                  }
                },
                "required": ["title"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a new project milestone",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Milestone" }
              }
            }
          }
        },
        "summary": "Create Projects Id Milestones",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/milestones/{milestone_id}": {
      "get": {
        "description": "Get a single project milestone",
        "operationId": "getV3ProjectsIdMilestonesMilestoneId",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of a project milestone",
            "in": "path",
            "name": "milestone_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single project milestone",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Milestone" }
              }
            }
          }
        },
        "summary": "Get Projects Id Milestones Milestone Id",
        "tags": ["projects"]
      },
      "put": {
        "description": "Update an existing project milestone",
        "operationId": "putV3ProjectsIdMilestonesMilestoneId",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of a project milestone",
            "in": "path",
            "name": "milestone_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "description": "The title of the milestone",
                    "type": "string"
                  },
                  "state_event": {
                    "description": "The state event of the milestone ",
                    "type": "string",
                    "enum": ["close", "activate"]
                  },
                  "description": {
                    "description": "The description of the milestone",
                    "type": "string"
                  },
                  "due_date": {
                    "description": "The due date of the milestone. The ISO 8601 date format (%Y-%m-%d)",
                    "type": "string"
                  },
                  "start_date": {
                    "description": "The start date of the milestone. The ISO 8601 date format (%Y-%m-%d)",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update an existing project milestone",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Milestone" }
              }
            }
          }
        },
        "summary": "Update Projects Id Milestones Milestone Id",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/milestones/{milestone_id}/issues": {
      "get": {
        "description": "Get all issues for a single project milestone",
        "operationId": "getV3ProjectsIdMilestonesMilestoneIdIssues",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of a project milestone",
            "in": "path",
            "name": "milestone_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get all issues for a single project milestone",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Issue" }
              }
            }
          }
        },
        "summary": "Get Projects Id Milestones Milestone Id Issues",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/notification_settings": {
      "get": {
        "description": "This feature was introduced in GitLab 8.12",
        "operationId": "getV3ProjectsIdNotificationSettings",
        "parameters": [
          {
            "description": "The group ID or project ID or project NAMESPACE/PROJECT_NAME",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get project level notification level settings, defaults to Global",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotificationSetting" }
              }
            }
          }
        },
        "summary": "Get Projects Id Notification Settings",
        "tags": ["projects"]
      },
      "put": {
        "description": "This feature was introduced in GitLab 8.12",
        "operationId": "putV3ProjectsIdNotificationSettings",
        "parameters": [
          {
            "description": "The group ID or project ID or project NAMESPACE/PROJECT_NAME",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "level": {
                    "description": "The project notification level",
                    "type": "string"
                  },
                  "new_note": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "new_issue": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "reopen_issue": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "close_issue": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "reassign_issue": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "new_merge_request": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "reopen_merge_request": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "close_merge_request": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "reassign_merge_request": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "merge_merge_request": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "failed_pipeline": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  },
                  "success_pipeline": {
                    "description": "Enable/disable this notification",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update project level notification level settings, defaults to Global",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotificationSetting" }
              }
            }
          }
        },
        "summary": "Update Projects Id Notification Settings",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/pipeline": {
      "post": {
        "description": "This feature was introduced in GitLab 8.14",
        "operationId": "postV3ProjectsIdPipeline",
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "ref": { "description": "Reference", "type": "string" }
                },
                "required": ["ref"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a new pipeline",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Pipeline" }
              }
            }
          }
        },
        "summary": "Create Projects Id Pipeline",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/pipelines": {
      "get": {
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "getV3ProjectsIdPipelines",
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Either running, branches, or tags",
            "in": "query",
            "name": "scope",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["running", "branches", "tags"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get all Pipelines of the project",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Pipeline" }
              }
            }
          }
        },
        "summary": "Get Projects Id Pipelines",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/pipelines/{pipeline_id}": {
      "get": {
        "description": "This feature was introduced in GitLab 8.11",
        "operationId": "getV3ProjectsIdPipelinesPipelineId",
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The pipeline ID",
            "in": "path",
            "name": "pipeline_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Gets a specific pipeline for the project",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Pipeline" }
              }
            }
          }
        },
        "summary": "Get Projects Id Pipelines Pipeline Id",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/pipelines/{pipeline_id}/cancel": {
      "post": {
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "postV3ProjectsIdPipelinesPipelineIdCancel",
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The pipeline ID",
            "in": "path",
            "name": "pipeline_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "201": {
            "description": "Cancel all builds in the pipeline",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Pipeline" }
              }
            }
          }
        },
        "summary": "Create Projects Id Pipelines Pipeline Id Cancel",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/pipelines/{pipeline_id}/retry": {
      "post": {
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "postV3ProjectsIdPipelinesPipelineIdRetry",
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The pipeline ID",
            "in": "path",
            "name": "pipeline_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "201": {
            "description": "Retry failed builds in the pipeline",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Pipeline" }
              }
            }
          }
        },
        "summary": "Create Projects Id Pipelines Pipeline Id Retry",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/repository/archive": {
      "get": {
        "description": "Get an archive of the repository",
        "operationId": "getV3ProjectsIdRepositoryArchive",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The commit sha of the archive to be downloaded",
            "in": "query",
            "name": "sha",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "The archive format",
            "in": "query",
            "name": "format",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Get an archive of the repository" }
        },
        "summary": "Get Projects Id Repository Archive",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/repository/blobs/{sha}": {
      "get": {
        "description": "Get a raw file contents",
        "operationId": "getV3ProjectsIdRepositoryBlobsSha",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The commit, branch name, or tag name",
            "in": "path",
            "name": "sha",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The path to the file to display",
            "in": "query",
            "name": "filepath",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "Get a raw file contents" } },
        "summary": "Get Projects Id Repository Blobs Sha",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/repository/branches": {
      "get": {
        "description": "Get a project repository branches",
        "operationId": "getV3ProjectsIdRepositoryBranches",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a project repository branches",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RepoBranch" }
              }
            }
          }
        },
        "summary": "Get Projects Id Repository Branches",
        "tags": ["projects"]
      },
      "post": {
        "description": "Create branch",
        "operationId": "postV3ProjectsIdRepositoryBranches",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "branch_name": {
                    "description": "The name of the branch",
                    "type": "string"
                  },
                  "ref": {
                    "description": "Create branch from commit sha or existing branch",
                    "type": "string"
                  }
                },
                "required": ["branch_name", "ref"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create branch",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RepoBranch" }
              }
            }
          }
        },
        "summary": "Create Projects Id Repository Branches",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/repository/branches/{branch}": {
      "delete": {
        "description": "Delete a branch",
        "operationId": "deleteV3ProjectsIdRepositoryBranchesBranch",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The name of the branch",
            "in": "path",
            "name": "branch",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": { "204": { "description": "Delete a branch" } },
        "summary": "Delete Projects Id Repository Branches Branch",
        "tags": ["projects"]
      },
      "get": {
        "description": "Get a single branch",
        "operationId": "getV3ProjectsIdRepositoryBranchesBranch",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The name of the branch",
            "in": "path",
            "name": "branch",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single branch",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RepoBranch" }
              }
            }
          }
        },
        "summary": "Get Projects Id Repository Branches Branch",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/repository/branches/{branch}/protect": {
      "put": {
        "description": "Protect a single branch",
        "operationId": "putV3ProjectsIdRepositoryBranchesBranchProtect",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The name of the branch",
            "in": "path",
            "name": "branch",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "developers_can_push": {
                    "description": "Flag if developers can push to that branch",
                    "type": "boolean"
                  },
                  "developers_can_merge": {
                    "description": "Flag if developers can merge to that branch",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Protect a single branch",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RepoBranch" }
              }
            }
          }
        },
        "summary": "Update Projects Id Repository Branches Branch Protect",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/repository/branches/{branch}/unprotect": {
      "put": {
        "description": "Unprotect a single branch",
        "operationId": "putV3ProjectsIdRepositoryBranchesBranchUnprotect",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The name of the branch",
            "in": "path",
            "name": "branch",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Unprotect a single branch",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RepoBranch" }
              }
            }
          }
        },
        "summary": "Update Projects Id Repository Branches Branch Unprotect",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/repository/commits": {
      "get": {
        "description": "Get a project repository commits",
        "operationId": "getV3ProjectsIdRepositoryCommits",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The name of a repository branch or tag, if not given the default branch is used",
            "in": "query",
            "name": "ref_name",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Only commits after or in this date will be returned",
            "in": "query",
            "name": "since",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Only commits before or in this date will be returned",
            "in": "query",
            "name": "until",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "The page for pagination",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 0 }
          },
          {
            "description": "The number of results per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32", "default": 20 }
          },
          {
            "description": "The file path",
            "in": "query",
            "name": "path",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a project repository commits",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RepoCommit" }
              }
            }
          }
        },
        "summary": "Get Projects Id Repository Commits",
        "tags": ["projects"]
      },
      "post": {
        "description": "This feature was introduced in GitLab 8.13",
        "operationId": "postV3ProjectsIdRepositoryCommits",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "branch_name": {
                    "description": "The name of branch",
                    "type": "string"
                  },
                  "commit_message": {
                    "description": "Commit message",
                    "type": "string"
                  },
                  "actions": {
                    "description": "Actions to perform in commit",
                    "type": "array",
                    "items": { "x-type": "object" }
                  },
                  "author_email": {
                    "description": "Author email for commit",
                    "type": "string"
                  },
                  "author_name": {
                    "description": "Author name for commit",
                    "type": "string"
                  }
                },
                "required": ["branch_name", "commit_message", "actions"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Commit multiple file changes as one commit",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RepoCommitDetail" }
              }
            }
          }
        },
        "summary": "Create Projects Id Repository Commits",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/repository/commits/{sha}": {
      "get": {
        "description": "Get a specific commit of a project",
        "operationId": "getV3ProjectsIdRepositoryCommitsSha",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "A commit sha, or the name of a branch or tag",
            "in": "path",
            "name": "sha",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a specific commit of a project",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RepoCommitDetail" }
              }
            }
          },
          "404": { "description": "Not Found" }
        },
        "summary": "Get Projects Id Repository Commits Sha",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/repository/commits/{sha}/blob": {
      "get": {
        "description": "Get a raw file contents",
        "operationId": "getV3ProjectsIdRepositoryCommitsShaBlob",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The commit, branch name, or tag name",
            "in": "path",
            "name": "sha",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The path to the file to display",
            "in": "query",
            "name": "filepath",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "Get a raw file contents" } },
        "summary": "Get Projects Id Repository Commits Sha Blob",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/repository/commits/{sha}/builds": {
      "get": {
        "description": "Get builds for a specific commit of a project",
        "operationId": "getV3ProjectsIdRepositoryCommitsShaBuilds",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The SHA id of a commit",
            "in": "path",
            "name": "sha",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The scope of builds to show",
            "in": "query",
            "name": "scope",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["pending", "running", "failed", "success", "canceled"]
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get builds for a specific commit of a project",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Build" }
              }
            }
          }
        },
        "summary": "Get Projects Id Repository Commits Sha Builds",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/repository/commits/{sha}/cherry_pick": {
      "post": {
        "description": "This feature was introduced in GitLab 8.15",
        "operationId": "postV3ProjectsIdRepositoryCommitsShaCherryPick",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "A commit sha to be cherry picked",
            "in": "path",
            "name": "sha",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "branch": {
                    "description": "The name of the branch",
                    "type": "string"
                  }
                },
                "required": ["branch"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Cherry pick commit into a branch",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RepoCommit" }
              }
            }
          }
        },
        "summary": "Create Projects Id Repository Commits Sha Cherry Pick",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/repository/commits/{sha}/comments": {
      "get": {
        "description": "Get a commit's comments",
        "operationId": "getV3ProjectsIdRepositoryCommitsShaComments",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "A commit sha, or the name of a branch or tag",
            "in": "path",
            "name": "sha",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a commit's comments",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommitNote" }
              }
            }
          },
          "404": { "description": "Not Found" }
        },
        "summary": "Get Projects Id Repository Commits Sha Comments",
        "tags": ["projects"]
      },
      "post": {
        "description": "Post comment to commit",
        "operationId": "postV3ProjectsIdRepositoryCommitsShaComments",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The commit's SHA",
            "in": "path",
            "name": "sha",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "note": {
                    "description": "The text of the comment",
                    "type": "string"
                  },
                  "path": { "description": "The file path", "type": "string" },
                  "line": {
                    "description": "The line number",
                    "type": "integer",
                    "format": "int32"
                  },
                  "line_type": {
                    "description": "The type of the line",
                    "type": "string",
                    "enum": ["new", "old"],
                    "default": "new"
                  }
                },
                "required": ["note", "line", "line_type"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Post comment to commit",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommitNote" }
              }
            }
          }
        },
        "summary": "Create Projects Id Repository Commits Sha Comments",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/repository/commits/{sha}/diff": {
      "get": {
        "description": "Get the diff for a specific commit of a project",
        "operationId": "getV3ProjectsIdRepositoryCommitsShaDiff",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "A commit sha, or the name of a branch or tag",
            "in": "path",
            "name": "sha",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get the diff for a specific commit of a project"
          },
          "404": { "description": "Not Found" }
        },
        "summary": "Get Projects Id Repository Commits Sha Diff",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/repository/commits/{sha}/statuses": {
      "get": {
        "description": "Get a commit's statuses",
        "operationId": "getV3ProjectsIdRepositoryCommitsShaStatuses",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The commit hash",
            "in": "path",
            "name": "sha",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ref",
            "in": "query",
            "name": "ref",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "The stage",
            "in": "query",
            "name": "stage",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "The name",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Show all statuses, default: false",
            "in": "query",
            "name": "all",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a commit's statuses",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommitStatus" }
              }
            }
          }
        },
        "summary": "Get Projects Id Repository Commits Sha Statuses",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/repository/compare": {
      "get": {
        "description": "Compare two branches, tags, or commits",
        "operationId": "getV3ProjectsIdRepositoryCompare",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The commit, branch name, or tag name to start comparison",
            "in": "query",
            "name": "from",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The commit, branch name, or tag name to stop comparison",
            "in": "query",
            "name": "to",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Compare two branches, tags, or commits",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Compare" }
              }
            }
          }
        },
        "summary": "Get Projects Id Repository Compare",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/repository/contributors": {
      "get": {
        "description": "Get repository contributors",
        "operationId": "getV3ProjectsIdRepositoryContributors",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get repository contributors",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Contributor" }
              }
            }
          }
        },
        "summary": "Get Projects Id Repository Contributors",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/repository/files": {
      "delete": {
        "description": "Delete an existing file in repository",
        "operationId": "deleteV3ProjectsIdRepositoryFiles",
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The path to new file. Ex. lib/class.rb",
            "in": "query",
            "name": "file_path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The name of branch",
            "in": "query",
            "name": "branch_name",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Commit Message",
            "in": "query",
            "name": "commit_message",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The email of the author",
            "in": "query",
            "name": "author_email",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "The name of the author",
            "in": "query",
            "name": "author_name",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": { "description": "Delete an existing file in repository" }
        },
        "summary": "Delete Projects Id Repository Files",
        "tags": ["projects"]
      },
      "get": {
        "description": "Get a file from repository",
        "operationId": "getV3ProjectsIdRepositoryFiles",
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The path to the file. Ex. lib/class.rb",
            "in": "query",
            "name": "file_path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The name of branch, tag, or commit",
            "in": "query",
            "name": "ref",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "Get a file from repository" } },
        "summary": "Get Projects Id Repository Files",
        "tags": ["projects"]
      },
      "post": {
        "description": "Create new file in repository",
        "operationId": "postV3ProjectsIdRepositoryFiles",
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/postV3ProjectsIdRepositoryFiles"
        },
        "responses": {
          "201": { "description": "Create new file in repository" }
        },
        "summary": "Create Projects Id Repository Files",
        "tags": ["projects"]
      },
      "put": {
        "description": "Update existing file in repository",
        "operationId": "putV3ProjectsIdRepositoryFiles",
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/postV3ProjectsIdRepositoryFiles"
        },
        "responses": {
          "200": { "description": "Update existing file in repository" }
        },
        "summary": "Update Projects Id Repository Files",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/repository/merged_branches": {
      "delete": {
        "operationId": "deleteV3ProjectsIdRepositoryMergedBranches",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": { "204": { "description": "deleted MergedBranch" } },
        "tags": ["projects"],
        "summary": "Delete Projects Id Repository Merged Branches",
        "description": "Delete Projects Id Repository Merged Branches"
      }
    },
    "/v3/projects/{id}/repository/raw_blobs/{sha}": {
      "get": {
        "description": "Get a raw blob contents by blob sha",
        "operationId": "getV3ProjectsIdRepositoryRawBlobsSha",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The commit, branch name, or tag name",
            "in": "path",
            "name": "sha",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Get a raw blob contents by blob sha" }
        },
        "summary": "Get Projects Id Repository Raw Blobs Sha",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/repository/tags": {
      "get": {
        "description": "Get a project repository tags",
        "operationId": "getV3ProjectsIdRepositoryTags",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a project repository tags",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RepoTag" }
              }
            }
          }
        },
        "summary": "Get Projects Id Repository Tags",
        "tags": ["projects"]
      },
      "post": {
        "description": "Create a new repository tag",
        "operationId": "postV3ProjectsIdRepositoryTags",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "tag_name": {
                    "description": "The name of the tag",
                    "type": "string"
                  },
                  "ref": {
                    "description": "The commit sha or branch name",
                    "type": "string"
                  },
                  "message": {
                    "description": "Specifying a message creates an annotated tag",
                    "type": "string"
                  },
                  "release_description": {
                    "description": "Specifying release notes stored in the GitLab database",
                    "type": "string"
                  }
                },
                "required": ["tag_name", "ref"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a new repository tag",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RepoTag" }
              }
            }
          }
        },
        "summary": "Create Projects Id Repository Tags",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/repository/tags/{tag_name}": {
      "delete": {
        "description": "Delete a repository tag",
        "operationId": "deleteV3ProjectsIdRepositoryTagsTagName",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The name of the tag",
            "in": "path",
            "name": "tag_name",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": { "204": { "description": "Delete a repository tag" } },
        "summary": "Delete Projects Id Repository Tags Tag Name",
        "tags": ["projects"]
      },
      "get": {
        "description": "Get a single repository tag",
        "operationId": "getV3ProjectsIdRepositoryTagsTagName",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The name of the tag",
            "in": "path",
            "name": "tag_name",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single repository tag",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RepoTag" }
              }
            }
          }
        },
        "summary": "Get Projects Id Repository Tags Tag Name",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/repository/tags/{tag_name}/release": {
      "post": {
        "description": "Add a release note to a tag",
        "operationId": "postV3ProjectsIdRepositoryTagsTagNameRelease",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The name of the tag",
            "in": "path",
            "name": "tag_name",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/postV3ProjectsIdRepositoryTagsTagNameRelease"
        },
        "responses": {
          "201": {
            "description": "Add a release note to a tag",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Release" }
              }
            }
          }
        },
        "summary": "Create Projects Id Repository Tags Tag Name Release",
        "tags": ["projects"]
      },
      "put": {
        "description": "Update a tag's release note",
        "operationId": "putV3ProjectsIdRepositoryTagsTagNameRelease",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The name of the tag",
            "in": "path",
            "name": "tag_name",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/postV3ProjectsIdRepositoryTagsTagNameRelease"
        },
        "responses": {
          "200": {
            "description": "Update a tag's release note",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Release" }
              }
            }
          }
        },
        "summary": "Update Projects Id Repository Tags Tag Name Release",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/repository/tree": {
      "get": {
        "description": "Get a project repository tree",
        "operationId": "getV3ProjectsIdRepositoryTree",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The name of a repository branch or tag, if not given the default branch is used",
            "in": "query",
            "name": "ref_name",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "The path of the tree",
            "in": "query",
            "name": "path",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Used to get a recursive tree",
            "in": "query",
            "name": "recursive",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a project repository tree",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RepoTreeObject" }
              }
            }
          }
        },
        "summary": "Get Projects Id Repository Tree",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/runners": {
      "get": {
        "description": "Get runners available for project",
        "operationId": "getV3ProjectsIdRunners",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The scope of specific runners to show",
            "in": "query",
            "name": "scope",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["active", "paused", "online", "specific", "shared"]
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get runners available for project",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Runner" }
              }
            }
          }
        },
        "summary": "Get Projects Id Runners",
        "tags": ["projects"]
      },
      "post": {
        "description": "Enable a runner for a project",
        "operationId": "postV3ProjectsIdRunners",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "runner_id": {
                    "description": "The ID of the runner",
                    "type": "integer",
                    "format": "int32"
                  }
                },
                "required": ["runner_id"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Enable a runner for a project",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Runner" }
              }
            }
          }
        },
        "summary": "Create Projects Id Runners",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/runners/{runner_id}": {
      "delete": {
        "description": "Disable project's runner",
        "operationId": "deleteV3ProjectsIdRunnersRunnerId",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of the runner",
            "in": "path",
            "name": "runner_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Disable project's runner",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Runner" }
              }
            }
          }
        },
        "summary": "Delete Projects Id Runners Runner Id",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/services/asana": {
      "put": {
        "description": "Set asana service for project",
        "operationId": "putV3ProjectsIdServicesAsana",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "api_key": {
                    "description": "User API token",
                    "type": "string"
                  },
                  "restrict_to_branch": {
                    "description": "Comma-separated list of branches which will be automatically inspected. Leave blank to include all branches",
                    "type": "string"
                  },
                  "push_events": {
                    "description": "Event will be triggered by a push to the repository",
                    "type": "string"
                  }
                },
                "required": ["api_key"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Set asana service for project" }
        },
        "summary": "Update Projects Id Services Asana",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/services/assembla": {
      "put": {
        "description": "Set assembla service for project",
        "operationId": "putV3ProjectsIdServicesAssembla",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "description": "The authentication token",
                    "type": "string"
                  },
                  "subdomain": {
                    "description": "Subdomain setting",
                    "type": "string"
                  },
                  "push_events": {
                    "description": "Event will be triggered by a push to the repository",
                    "type": "string"
                  }
                },
                "required": ["token"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Set assembla service for project" }
        },
        "summary": "Update Projects Id Services Assembla",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/services/bamboo": {
      "put": {
        "description": "Set bamboo service for project",
        "operationId": "putV3ProjectsIdServicesBamboo",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "bamboo_url": {
                    "description": "Bamboo root URL like https://bamboo.example.com",
                    "type": "string"
                  },
                  "build_key": {
                    "description": "Bamboo build plan key like",
                    "type": "string"
                  },
                  "username": {
                    "description": "A user with API access, if applicable",
                    "type": "string"
                  },
                  "password": {
                    "description": "Passord of the user",
                    "type": "string"
                  },
                  "push_events": {
                    "description": "Event will be triggered by a push to the repository",
                    "type": "string"
                  }
                },
                "required": ["bamboo_url", "build_key", "username", "password"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Set bamboo service for project" }
        },
        "summary": "Update Projects Id Services Bamboo",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/services/bugzilla": {
      "put": {
        "description": "Set bugzilla service for project",
        "operationId": "putV3ProjectsIdServicesBugzilla",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/putV3ProjectsIdServicesBugzilla"
        },
        "responses": {
          "200": { "description": "Set bugzilla service for project" }
        },
        "summary": "Update Projects Id Services Bugzilla",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/services/buildkite": {
      "put": {
        "description": "Set buildkite service for project",
        "operationId": "putV3ProjectsIdServicesBuildkite",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "description": "Buildkite project GitLab token",
                    "type": "string"
                  },
                  "project_url": {
                    "description": "The buildkite project URL",
                    "type": "string"
                  },
                  "enable_ssl_verification": {
                    "description": "Enable SSL verification for communication",
                    "type": "boolean"
                  },
                  "push_events": {
                    "description": "Event will be triggered by a push to the repository",
                    "type": "string"
                  }
                },
                "required": ["token", "project_url"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Set buildkite service for project" }
        },
        "summary": "Update Projects Id Services Buildkite",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/services/builds-email": {
      "put": {
        "description": "Set builds-email service for project",
        "operationId": "putV3ProjectsIdServicesBuildsEmail",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "recipients": {
                    "description": "Comma-separated list of recipient email addresses",
                    "type": "string"
                  },
                  "add_pusher": {
                    "description": "Add pusher to recipients list",
                    "type": "boolean"
                  },
                  "notify_only_broken_builds": {
                    "description": "Notify only broken builds",
                    "type": "boolean"
                  },
                  "build_events": {
                    "description": "Event will be triggered when a build status changes",
                    "type": "string"
                  }
                },
                "required": ["recipients"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Set builds-email service for project" }
        },
        "summary": "Update Projects Id Services Builds Email",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/services/campfire": {
      "put": {
        "description": "Set campfire service for project",
        "operationId": "putV3ProjectsIdServicesCampfire",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "description": "Campfire token",
                    "type": "string"
                  },
                  "subdomain": {
                    "description": "Campfire subdomain",
                    "type": "string"
                  },
                  "room": { "description": "Campfire room", "type": "string" },
                  "push_events": {
                    "description": "Event will be triggered by a push to the repository",
                    "type": "string"
                  }
                },
                "required": ["token"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Set campfire service for project" }
        },
        "summary": "Update Projects Id Services Campfire",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/services/custom-issue-tracker": {
      "put": {
        "description": "Set custom-issue-tracker service for project",
        "operationId": "putV3ProjectsIdServicesCustomIssueTracker",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/putV3ProjectsIdServicesBugzilla"
        },
        "responses": {
          "200": {
            "description": "Set custom-issue-tracker service for project"
          }
        },
        "summary": "Update Projects Id Services Custom Issue Tracker",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/services/drone-ci": {
      "put": {
        "description": "Set drone-ci service for project",
        "operationId": "putV3ProjectsIdServicesDroneCi",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "description": "Drone CI token",
                    "type": "string"
                  },
                  "drone_url": {
                    "description": "Drone CI URL",
                    "type": "string"
                  },
                  "enable_ssl_verification": {
                    "description": "Enable SSL verification for communication",
                    "type": "boolean"
                  },
                  "push_events": {
                    "description": "Event will be triggered by a push to the repository",
                    "type": "string"
                  },
                  "merge_request_events": {
                    "description": "Event will be triggered when a merge request is created/updated/merged",
                    "type": "string"
                  },
                  "tag_push_events": {
                    "description": "Event will be triggered when a new tag is pushed to the repository",
                    "type": "string"
                  }
                },
                "required": ["token", "drone_url"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Set drone-ci service for project" }
        },
        "summary": "Update Projects Id Services Drone Ci",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/services/emails-on-push": {
      "put": {
        "description": "Set emails-on-push service for project",
        "operationId": "putV3ProjectsIdServicesEmailsOnPush",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "recipients": {
                    "description": "Comma-separated list of recipient email addresses",
                    "type": "string"
                  },
                  "disable_diffs": {
                    "description": "Disable code diffs",
                    "type": "boolean"
                  },
                  "send_from_committer_email": {
                    "description": "Send from committer",
                    "type": "boolean"
                  },
                  "push_events": {
                    "description": "Event will be triggered by a push to the repository",
                    "type": "string"
                  },
                  "tag_push_events": {
                    "description": "Event will be triggered when a new tag is pushed to the repository",
                    "type": "string"
                  }
                },
                "required": ["recipients"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Set emails-on-push service for project" }
        },
        "summary": "Update Projects Id Services Emails On Push",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/services/external-wiki": {
      "put": {
        "description": "Set external-wiki service for project",
        "operationId": "putV3ProjectsIdServicesExternalWiki",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "external_wiki_url": {
                    "description": "The URL of the external Wiki",
                    "type": "string"
                  }
                },
                "required": ["external_wiki_url"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Set external-wiki service for project" }
        },
        "summary": "Update Projects Id Services External Wiki",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/services/flowdock": {
      "put": {
        "description": "Set flowdock service for project",
        "operationId": "putV3ProjectsIdServicesFlowdock",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "description": "Flowdock token",
                    "type": "string"
                  },
                  "push_events": {
                    "description": "Event will be triggered by a push to the repository",
                    "type": "string"
                  }
                },
                "required": ["token"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Set flowdock service for project" }
        },
        "summary": "Update Projects Id Services Flowdock",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/services/gemnasium": {
      "put": {
        "description": "Set gemnasium service for project",
        "operationId": "putV3ProjectsIdServicesGemnasium",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "api_key": {
                    "description": "Your personal API key on gemnasium.com",
                    "type": "string"
                  },
                  "token": {
                    "description": "The project's slug on gemnasium.com",
                    "type": "string"
                  },
                  "push_events": {
                    "description": "Event will be triggered by a push to the repository",
                    "type": "string"
                  }
                },
                "required": ["api_key", "token"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Set gemnasium service for project" }
        },
        "summary": "Update Projects Id Services Gemnasium",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/services/hipchat": {
      "put": {
        "description": "Set hipchat service for project",
        "operationId": "putV3ProjectsIdServicesHipchat",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "description": "The room token",
                    "type": "string"
                  },
                  "room": {
                    "description": "The room name or ID",
                    "type": "string"
                  },
                  "color": {
                    "description": "The room color",
                    "type": "string"
                  },
                  "notify": {
                    "description": "Enable notifications",
                    "type": "boolean"
                  },
                  "api_version": {
                    "description": "Leave blank for default (v2)",
                    "type": "string"
                  },
                  "server": {
                    "description": "Leave blank for default. https://hipchat.example.com",
                    "type": "string"
                  },
                  "push_events": {
                    "description": "Event will be triggered by a push to the repository",
                    "type": "string"
                  },
                  "issue_events": {
                    "description": "Event will be triggered when an issue is created/updated/closed",
                    "type": "string"
                  },
                  "confidential_issue_events": {
                    "description": "Event will be triggered when a confidential issue is created/updated/closed",
                    "type": "string"
                  },
                  "merge_request_events": {
                    "description": "Event will be triggered when a merge request is created/updated/merged",
                    "type": "string"
                  },
                  "note_events": {
                    "description": "Event will be triggered when someone adds a comment",
                    "type": "string"
                  },
                  "tag_push_events": {
                    "description": "Event will be triggered when a new tag is pushed to the repository",
                    "type": "string"
                  },
                  "build_events": {
                    "description": "Event will be triggered when a build status changes",
                    "type": "string"
                  }
                },
                "required": ["token"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Set hipchat service for project" }
        },
        "summary": "Update Projects Id Services Hipchat",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/services/irker": {
      "put": {
        "description": "Set irker service for project",
        "operationId": "putV3ProjectsIdServicesIrker",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "recipients": {
                    "description": "Recipients/channels separated by whitespaces",
                    "type": "string"
                  },
                  "default_irc_uri": {
                    "description": "Default: irc://irc.network.net:6697",
                    "type": "string"
                  },
                  "server_host": {
                    "description": "Server host. Default localhost",
                    "type": "string"
                  },
                  "server_port": {
                    "description": "Server port. Default 6659",
                    "type": "integer",
                    "format": "int32"
                  },
                  "colorize_messages": {
                    "description": "Colorize messages",
                    "type": "boolean"
                  },
                  "push_events": {
                    "description": "Event will be triggered by a push to the repository",
                    "type": "string"
                  }
                },
                "required": ["recipients"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Set irker service for project" }
        },
        "summary": "Update Projects Id Services Irker",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/services/jira": {
      "put": {
        "description": "Set jira service for project",
        "operationId": "putV3ProjectsIdServicesJira",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "url": {
                    "description": "The URL to the JIRA project which is being linked to this GitLab project, e.g., https://jira.example.com",
                    "type": "string"
                  },
                  "project_key": {
                    "description": "The short identifier for your JIRA project, all uppercase, e.g., PROJ",
                    "type": "string"
                  },
                  "username": {
                    "description": "The username of the user created to be used with GitLab/JIRA",
                    "type": "string"
                  },
                  "password": {
                    "description": "The password of the user created to be used with GitLab/JIRA",
                    "type": "string"
                  },
                  "jira_issue_transition_id": {
                    "description": "The ID of a transition that moves issues to a closed state. You can find this number under the JIRA workflow administration (**Administration > Issues > Workflows**) by selecting **View** under **Operations** of the desired workflow of your project. The ID of each state can be found inside the parenthesis of each transition name under the **Transitions (id)** column ([see screenshot][trans]). By default, this ID is set to `2`",
                    "type": "integer",
                    "format": "int32"
                  },
                  "commit_events": {
                    "description": "Event will be triggered when a commit is created/updated",
                    "type": "string"
                  },
                  "merge_request_events": {
                    "description": "Event will be triggered when a merge request is created/updated/merged",
                    "type": "string"
                  }
                },
                "required": ["url", "project_key"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Set jira service for project" }
        },
        "summary": "Update Projects Id Services Jira",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/services/kubernetes": {
      "put": {
        "description": "Set kubernetes service for project",
        "operationId": "putV3ProjectsIdServicesKubernetes",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "namespace": {
                    "description": "The Kubernetes namespace to use",
                    "type": "string"
                  },
                  "api_url": {
                    "description": "The URL to the Kubernetes cluster API, e.g., https://kubernetes.example.com",
                    "type": "string"
                  },
                  "token": {
                    "description": "The service token to authenticate against the Kubernetes cluster with",
                    "type": "string"
                  },
                  "ca_pem": {
                    "description": "A custom certificate authority bundle to verify the Kubernetes cluster with (PEM format)",
                    "type": "string"
                  }
                },
                "required": ["namespace", "api_url", "token"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Set kubernetes service for project" }
        },
        "summary": "Update Projects Id Services Kubernetes",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/services/mattermost": {
      "put": {
        "description": "Set mattermost service for project",
        "operationId": "putV3ProjectsIdServicesMattermost",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "webhook": {
                    "description": "The Mattermost webhook. e.g. http://mattermost_host/hooks/...",
                    "type": "string"
                  },
                  "push_events": {
                    "description": "Event will be triggered by a push to the repository",
                    "type": "string"
                  },
                  "issue_events": {
                    "description": "Event will be triggered when an issue is created/updated/closed",
                    "type": "string"
                  },
                  "confidential_issue_events": {
                    "description": "Event will be triggered when a confidential issue is created/updated/closed",
                    "type": "string"
                  },
                  "merge_request_events": {
                    "description": "Event will be triggered when a merge request is created/updated/merged",
                    "type": "string"
                  },
                  "note_events": {
                    "description": "Event will be triggered when someone adds a comment",
                    "type": "string"
                  },
                  "tag_push_events": {
                    "description": "Event will be triggered when a new tag is pushed to the repository",
                    "type": "string"
                  },
                  "build_events": {
                    "description": "Event will be triggered when a build status changes",
                    "type": "string"
                  },
                  "pipeline_events": { "type": "string" },
                  "wiki_page_events": {
                    "description": "Event will be triggered when a wiki page is created/updated",
                    "type": "string"
                  }
                },
                "required": ["webhook"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Set mattermost service for project" }
        },
        "summary": "Update Projects Id Services Mattermost",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/services/mattermost-slash-commands": {
      "put": {
        "description": "Set mattermost-slash-commands service for project",
        "operationId": "putV3ProjectsIdServicesMattermostSlashCommands",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/putV3ProjectsIdServicesMattermostSlashCommands"
        },
        "responses": {
          "200": {
            "description": "Set mattermost-slash-commands service for project"
          }
        },
        "summary": "Update Projects Id Services Mattermost Slash Commands",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/services/mattermost_slash_commands/trigger": {
      "post": {
        "description": "Added in GitLab 8.13",
        "operationId": "postV3ProjectsIdServicesMattermostSlashCommandsTrigger",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/putV3ProjectsIdServicesMattermostSlashCommands"
        },
        "responses": {
          "201": {
            "description": "Trigger a slash command for mattermost-slash-commands"
          }
        },
        "summary": "Create Projects Id Services Mattermost Slash Commands Trigger",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/services/pipelines-email": {
      "put": {
        "description": "Set pipelines-email service for project",
        "operationId": "putV3ProjectsIdServicesPipelinesEmail",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "recipients": {
                    "description": "Comma-separated list of recipient email addresses",
                    "type": "string"
                  },
                  "notify_only_broken_builds": {
                    "description": "Notify only broken builds",
                    "type": "boolean"
                  },
                  "pipeline_events": { "type": "string" }
                },
                "required": ["recipients"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Set pipelines-email service for project" }
        },
        "summary": "Update Projects Id Services Pipelines Email",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/services/pivotaltracker": {
      "put": {
        "description": "Set pivotaltracker service for project",
        "operationId": "putV3ProjectsIdServicesPivotaltracker",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "description": "The Pivotaltracker token",
                    "type": "string"
                  },
                  "restrict_to_branch": {
                    "description": "Comma-separated list of branches which will be automatically inspected. Leave blank to include all branches.",
                    "type": "string"
                  },
                  "push_events": {
                    "description": "Event will be triggered by a push to the repository",
                    "type": "string"
                  }
                },
                "required": ["token"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Set pivotaltracker service for project" }
        },
        "summary": "Update Projects Id Services Pivotaltracker",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/services/pushover": {
      "put": {
        "description": "Set pushover service for project",
        "operationId": "putV3ProjectsIdServicesPushover",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "api_key": {
                    "description": "The application key",
                    "type": "string"
                  },
                  "user_key": {
                    "description": "The user key",
                    "type": "string"
                  },
                  "priority": {
                    "description": "The priority",
                    "type": "string"
                  },
                  "device": {
                    "description": "Leave blank for all active devices",
                    "type": "string"
                  },
                  "sound": {
                    "description": "The sound of the notification",
                    "type": "string"
                  },
                  "push_events": {
                    "description": "Event will be triggered by a push to the repository",
                    "type": "string"
                  }
                },
                "required": [
                  "api_key",
                  "user_key",
                  "priority",
                  "device",
                  "sound"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Set pushover service for project" }
        },
        "summary": "Update Projects Id Services Pushover",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/services/redmine": {
      "put": {
        "description": "Set redmine service for project",
        "operationId": "putV3ProjectsIdServicesRedmine",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "new_issue_url": {
                    "description": "The new issue URL",
                    "type": "string"
                  },
                  "project_url": {
                    "description": "The project URL",
                    "type": "string"
                  },
                  "issues_url": {
                    "description": "The issues URL",
                    "type": "string"
                  },
                  "description": {
                    "description": "The description of the tracker",
                    "type": "string"
                  },
                  "push_events": {
                    "description": "Event will be triggered by a push to the repository",
                    "type": "string"
                  }
                },
                "required": ["new_issue_url", "project_url", "issues_url"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Set redmine service for project" }
        },
        "summary": "Update Projects Id Services Redmine",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/services/slack": {
      "put": {
        "description": "Set slack service for project",
        "operationId": "putV3ProjectsIdServicesSlack",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "webhook": {
                    "description": "The Slack webhook. e.g. https://hooks.slack.com/services/...",
                    "type": "string"
                  },
                  "new_issue_url": {
                    "description": "The user name",
                    "type": "string"
                  },
                  "channel": {
                    "description": "The channel name",
                    "type": "string"
                  },
                  "push_events": {
                    "description": "Event will be triggered by a push to the repository",
                    "type": "string"
                  },
                  "issue_events": {
                    "description": "Event will be triggered when an issue is created/updated/closed",
                    "type": "string"
                  },
                  "confidential_issue_events": {
                    "description": "Event will be triggered when a confidential issue is created/updated/closed",
                    "type": "string"
                  },
                  "merge_request_events": {
                    "description": "Event will be triggered when a merge request is created/updated/merged",
                    "type": "string"
                  },
                  "note_events": {
                    "description": "Event will be triggered when someone adds a comment",
                    "type": "string"
                  },
                  "tag_push_events": {
                    "description": "Event will be triggered when a new tag is pushed to the repository",
                    "type": "string"
                  },
                  "build_events": {
                    "description": "Event will be triggered when a build status changes",
                    "type": "string"
                  },
                  "pipeline_events": { "type": "string" },
                  "wiki_page_events": {
                    "description": "Event will be triggered when a wiki page is created/updated",
                    "type": "string"
                  }
                },
                "required": ["webhook"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Set slack service for project" }
        },
        "summary": "Update Projects Id Services Slack",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/services/slack-slash-commands": {
      "put": {
        "description": "Set slack-slash-commands service for project",
        "operationId": "putV3ProjectsIdServicesSlackSlashCommands",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/putV3ProjectsIdServicesSlackSlashCommands"
        },
        "responses": {
          "200": {
            "description": "Set slack-slash-commands service for project"
          }
        },
        "summary": "Update Projects Id Services Slack Slash Commands",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/services/slack_slash_commands/trigger": {
      "post": {
        "description": "Added in GitLab 8.13",
        "operationId": "postV3ProjectsIdServicesSlackSlashCommandsTrigger",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/putV3ProjectsIdServicesSlackSlashCommands"
        },
        "responses": {
          "201": {
            "description": "Trigger a slash command for slack-slash-commands"
          }
        },
        "summary": "Create Projects Id Services Slack Slash Commands Trigger",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/services/teamcity": {
      "put": {
        "description": "Set teamcity service for project",
        "operationId": "putV3ProjectsIdServicesTeamcity",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "teamcity_url": {
                    "description": "TeamCity root URL like https://teamcity.example.com",
                    "type": "string"
                  },
                  "build_type": {
                    "description": "Build configuration ID",
                    "type": "string"
                  },
                  "username": {
                    "description": "A user with permissions to trigger a manual build",
                    "type": "string"
                  },
                  "password": {
                    "description": "The password of the user",
                    "type": "string"
                  },
                  "push_events": {
                    "description": "Event will be triggered by a push to the repository",
                    "type": "string"
                  }
                },
                "required": [
                  "teamcity_url",
                  "build_type",
                  "username",
                  "password"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": { "description": "Set teamcity service for project" }
        },
        "summary": "Update Projects Id Services Teamcity",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/services/{service_slug}": {
      "delete": {
        "description": "Delete a service for project",
        "operationId": "deleteV3ProjectsIdServicesServiceSlug",
        "parameters": [
          {
            "description": "The name of the service",
            "in": "path",
            "name": "service_slug",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "asana",
                "assembla",
                "bamboo",
                "bugzilla",
                "buildkite",
                "builds-email",
                "campfire",
                "custom-issue-tracker",
                "drone-ci",
                "emails-on-push",
                "external-wiki",
                "flowdock",
                "gemnasium",
                "hipchat",
                "irker",
                "jira",
                "kubernetes",
                "mattermost-slash-commands",
                "slack-slash-commands",
                "pipelines-email",
                "pivotaltracker",
                "pushover",
                "redmine",
                "slack",
                "mattermost",
                "teamcity"
              ]
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "204": { "description": "Delete a service for project" }
        },
        "summary": "Delete Projects Id Services Service Slug",
        "tags": ["projects"]
      },
      "get": {
        "description": "Get the service settings for project",
        "operationId": "getV3ProjectsIdServicesServiceSlug",
        "parameters": [
          {
            "description": "The name of the service",
            "in": "path",
            "name": "service_slug",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "asana",
                "assembla",
                "bamboo",
                "bugzilla",
                "buildkite",
                "builds-email",
                "campfire",
                "custom-issue-tracker",
                "drone-ci",
                "emails-on-push",
                "external-wiki",
                "flowdock",
                "gemnasium",
                "hipchat",
                "irker",
                "jira",
                "kubernetes",
                "mattermost-slash-commands",
                "slack-slash-commands",
                "pipelines-email",
                "pivotaltracker",
                "pushover",
                "redmine",
                "slack",
                "mattermost",
                "teamcity"
              ]
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get the service settings for project",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProjectService" }
              }
            }
          }
        },
        "summary": "Get Projects Id Services Service Slug",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/share": {
      "post": {
        "description": "Share the project with a group",
        "operationId": "postV3ProjectsIdShare",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "group_id": {
                    "description": "The ID of a group",
                    "type": "integer",
                    "format": "int32"
                  },
                  "group_access": {
                    "description": "The group access level",
                    "type": "integer",
                    "format": "int32",
                    "enum": [10, 20, 30, 40]
                  },
                  "expires_at": {
                    "description": "Share expiration date",
                    "type": "string",
                    "format": "date"
                  }
                },
                "required": ["group_id", "group_access"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Share the project with a group",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProjectGroupLink" }
              }
            }
          }
        },
        "summary": "Create Projects Id Share",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/share/{group_id}": {
      "delete": {
        "operationId": "deleteV3ProjectsIdShareGroupId",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of the group",
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": { "204": { "description": "deleted Share" } },
        "tags": ["projects"],
        "summary": "Delete Projects Id Share Group Id",
        "description": "Delete Projects Id Share Group Id"
      }
    },
    "/v3/projects/{id}/snippets": {
      "get": {
        "description": "Get all project snippets",
        "operationId": "getV3ProjectsIdSnippets",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get all project snippets",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProjectSnippet" }
              }
            }
          }
        },
        "summary": "Get Projects Id Snippets",
        "tags": ["projects"]
      },
      "post": {
        "description": "Create a new project snippet",
        "operationId": "postV3ProjectsIdSnippets",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "description": "The title of the snippet",
                    "type": "string"
                  },
                  "file_name": {
                    "description": "The file name of the snippet",
                    "type": "string"
                  },
                  "code": {
                    "description": "The content of the snippet",
                    "type": "string"
                  },
                  "visibility_level": {
                    "description": "The visibility level of the snippet",
                    "type": "integer",
                    "format": "int32",
                    "enum": [0, 10, 20]
                  }
                },
                "required": ["title", "file_name", "code", "visibility_level"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a new project snippet",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProjectSnippet" }
              }
            }
          }
        },
        "summary": "Create Projects Id Snippets",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/snippets/{noteable_id}/notes": {
      "get": {
        "description": "Get a list of project +noteable+ notes",
        "operationId": "getV3ProjectsIdSnippetsNoteableIdNotes",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of the noteable",
            "in": "path",
            "name": "noteable_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of project +noteable+ notes",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Note" }
              }
            }
          }
        },
        "summary": "Get Projects Id Snippets Noteable Id Notes",
        "tags": ["projects"]
      },
      "post": {
        "description": "Create a new +noteable+ note",
        "operationId": "postV3ProjectsIdSnippetsNoteableIdNotes",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of the noteable",
            "in": "path",
            "name": "noteable_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/postV3ProjectsIdIssuesNoteableIdNotes"
        },
        "responses": {
          "201": {
            "description": "Create a new +noteable+ note",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Note" }
              }
            }
          }
        },
        "summary": "Create Projects Id Snippets Noteable Id Notes",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/snippets/{noteable_id}/notes/{note_id}": {
      "delete": {
        "description": "Delete a +noteable+ note",
        "operationId": "deleteV3ProjectsIdSnippetsNoteableIdNotesNoteId",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of the noteable",
            "in": "path",
            "name": "noteable_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "The ID of a note",
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete a +noteable+ note",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Note" }
              }
            }
          }
        },
        "summary": "Delete Projects Id Snippets Noteable Id Notes Note Id",
        "tags": ["projects"]
      },
      "get": {
        "description": "Get a single +noteable+ note",
        "operationId": "getV3ProjectsIdSnippetsNoteableIdNotesNoteId",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of a note",
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "The ID of the noteable",
            "in": "path",
            "name": "noteable_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single +noteable+ note",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Note" }
              }
            }
          }
        },
        "summary": "Get Projects Id Snippets Noteable Id Notes Note Id",
        "tags": ["projects"]
      },
      "put": {
        "description": "Update an existing +noteable+ note",
        "operationId": "putV3ProjectsIdSnippetsNoteableIdNotesNoteId",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of the noteable",
            "in": "path",
            "name": "noteable_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "The ID of a note",
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/putV3ProjectsIdIssuesNoteableIdNotesNoteId"
        },
        "responses": {
          "200": {
            "description": "Update an existing +noteable+ note",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Note" }
              }
            }
          }
        },
        "summary": "Update Projects Id Snippets Noteable Id Notes Note Id",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/snippets/{snippet_id}": {
      "delete": {
        "description": "Delete a project snippet",
        "operationId": "deleteV3ProjectsIdSnippetsSnippetId",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of a project snippet",
            "in": "path",
            "name": "snippet_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": { "204": { "description": "Delete a project snippet" } },
        "summary": "Delete Projects Id Snippets Snippet Id",
        "tags": ["projects"]
      },
      "get": {
        "description": "Get a single project snippet",
        "operationId": "getV3ProjectsIdSnippetsSnippetId",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of a project snippet",
            "in": "path",
            "name": "snippet_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single project snippet",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProjectSnippet" }
              }
            }
          }
        },
        "summary": "Get Projects Id Snippets Snippet Id",
        "tags": ["projects"]
      },
      "put": {
        "description": "Update an existing project snippet",
        "operationId": "putV3ProjectsIdSnippetsSnippetId",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of a project snippet",
            "in": "path",
            "name": "snippet_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "description": "The title of the snippet",
                    "type": "string"
                  },
                  "file_name": {
                    "description": "The file name of the snippet",
                    "type": "string"
                  },
                  "code": {
                    "description": "The content of the snippet",
                    "type": "string"
                  },
                  "visibility_level": {
                    "description": "The visibility level of the snippet",
                    "type": "integer",
                    "format": "int32",
                    "enum": [0, 10, 20]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update an existing project snippet",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProjectSnippet" }
              }
            }
          }
        },
        "summary": "Update Projects Id Snippets Snippet Id",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/snippets/{snippet_id}/award_emoji": {
      "get": {
        "description": "This feature was introduced in 8.9",
        "operationId": "getV3ProjectsIdSnippetsSnippetIdAwardEmoji",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of an Issue, Merge Request or Snippet",
            "in": "path",
            "name": "snippet_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of project +awardable+ award emoji",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AwardEmoji" }
              }
            }
          }
        },
        "summary": "Get Projects Id Snippets Snippet Id Award Emoji",
        "tags": ["projects"]
      },
      "post": {
        "description": "This feature was introduced in 8.9",
        "operationId": "postV3ProjectsIdSnippetsSnippetIdAwardEmoji",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "snippet_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/postV3ProjectsIdIssuesIssueIdAwardEmoji"
        },
        "responses": {
          "201": {
            "description": "Award a new Emoji",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AwardEmoji" }
              }
            }
          }
        },
        "summary": "Create Projects Id Snippets Snippet Id Award Emoji",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/snippets/{snippet_id}/award_emoji/{award_id}": {
      "delete": {
        "description": "This feature was introduced in 8.9",
        "operationId": "deleteV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardId",
        "parameters": [
          {
            "description": "The ID of an award emoji",
            "in": "path",
            "name": "award_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "snippet_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete a +awardables+ award emoji",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AwardEmoji" }
              }
            }
          }
        },
        "summary": "Delete Projects Id Snippets Snippet Id Award Emoji Award Id",
        "tags": ["projects"]
      },
      "get": {
        "description": "This feature was introduced in 8.9",
        "operationId": "getV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardId",
        "parameters": [
          {
            "description": "The ID of the award",
            "in": "path",
            "name": "award_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "snippet_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a specific award emoji",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AwardEmoji" }
              }
            }
          }
        },
        "summary": "Get Projects Id Snippets Snippet Id Award Emoji Award Id",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/snippets/{snippet_id}/notes/{note_id}/award_emoji": {
      "get": {
        "description": "This feature was introduced in 8.9",
        "operationId": "getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmoji",
        "parameters": [
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "snippet_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of project +awardable+ award emoji",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AwardEmoji" }
              }
            }
          }
        },
        "summary": "Get Projects Id Snippets Snippet Id Notes Note Id Award Emoji",
        "tags": ["projects"]
      },
      "post": {
        "description": "This feature was introduced in 8.9",
        "operationId": "postV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmoji",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "snippet_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/postV3ProjectsIdIssuesIssueIdAwardEmoji"
        },
        "responses": {
          "201": {
            "description": "Award a new Emoji",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AwardEmoji" }
              }
            }
          }
        },
        "summary": "Create Projects Id Snippets Snippet Id Notes Note Id Award Emoji",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/snippets/{snippet_id}/notes/{note_id}/award_emoji/{award_id}": {
      "delete": {
        "description": "This feature was introduced in 8.9",
        "operationId": "deleteV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardId",
        "parameters": [
          {
            "description": "The ID of an award emoji",
            "in": "path",
            "name": "award_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "snippet_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete a +awardables+ award emoji",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AwardEmoji" }
              }
            }
          }
        },
        "summary": "Delete Projects Id Snippets Snippet Id Notes Note Id Award Emoji Award Id",
        "tags": ["projects"]
      },
      "get": {
        "description": "This feature was introduced in 8.9",
        "operationId": "getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardId",
        "parameters": [
          {
            "description": "The ID of the award",
            "in": "path",
            "name": "award_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "snippet_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a specific award emoji",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AwardEmoji" }
              }
            }
          }
        },
        "summary": "Get Projects Id Snippets Snippet Id Notes Note Id Award Emoji Award Id",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/snippets/{snippet_id}/raw": {
      "get": {
        "description": "Get a raw project snippet",
        "operationId": "getV3ProjectsIdSnippetsSnippetIdRaw",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The ID of a project snippet",
            "in": "path",
            "name": "snippet_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": { "200": { "description": "Get a raw project snippet" } },
        "summary": "Get Projects Id Snippets Snippet Id Raw",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/star": {
      "delete": {
        "description": "Unstar a project",
        "operationId": "deleteV3ProjectsIdStar",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Unstar a project",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Project" }
              }
            }
          }
        },
        "summary": "Delete Projects Id Star",
        "tags": ["projects"]
      },
      "post": {
        "description": "Star a project",
        "operationId": "postV3ProjectsIdStar",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "201": {
            "description": "Star a project",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Project" }
              }
            }
          }
        },
        "summary": "Create Projects Id Star",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/statuses/{sha}": {
      "post": {
        "description": "Post status to a commit",
        "operationId": "postV3ProjectsIdStatusesSha",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The commit hash",
            "in": "path",
            "name": "sha",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "state": {
                    "description": "The state of the status",
                    "type": "string",
                    "enum": [
                      "pending",
                      "running",
                      "success",
                      "failed",
                      "canceled"
                    ]
                  },
                  "ref": { "description": "The ref", "type": "string" },
                  "target_url": {
                    "description": "The target URL to associate with this status",
                    "type": "string"
                  },
                  "description": {
                    "description": "A short description of the status",
                    "type": "string"
                  },
                  "name": {
                    "description": "A string label to differentiate this status from the status of other systems. Default: \"default\"",
                    "type": "string"
                  },
                  "context": {
                    "description": "A string label to differentiate this status from the status of other systems. Default: \"default\"",
                    "type": "string"
                  }
                },
                "required": ["state"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Post status to a commit",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommitStatus" }
              }
            }
          }
        },
        "summary": "Create Projects Id Statuses Sha",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/triggers": {
      "get": {
        "description": "Get triggers list",
        "operationId": "getV3ProjectsIdTriggers",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get triggers list",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Trigger" }
              }
            }
          }
        },
        "summary": "Get Projects Id Triggers",
        "tags": ["projects"]
      },
      "post": {
        "description": "Create a trigger",
        "operationId": "postV3ProjectsIdTriggers",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "201": {
            "description": "Create a trigger",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Trigger" }
              }
            }
          }
        },
        "summary": "Create Projects Id Triggers",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/triggers/{token}": {
      "delete": {
        "description": "Delete a trigger",
        "operationId": "deleteV3ProjectsIdTriggersToken",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The unique token of trigger",
            "in": "path",
            "name": "token",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete a trigger",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Trigger" }
              }
            }
          }
        },
        "summary": "Delete Projects Id Triggers Token",
        "tags": ["projects"]
      },
      "get": {
        "description": "Get specific trigger of a project",
        "operationId": "getV3ProjectsIdTriggersToken",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The unique token of trigger",
            "in": "path",
            "name": "token",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get specific trigger of a project",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Trigger" }
              }
            }
          }
        },
        "summary": "Get Projects Id Triggers Token",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/unarchive": {
      "post": {
        "description": "Unarchive a project",
        "operationId": "postV3ProjectsIdUnarchive",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "201": {
            "description": "Unarchive a project",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Project" }
              }
            }
          }
        },
        "summary": "Create Projects Id Unarchive",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/uploads": {
      "post": {
        "description": "Upload a file",
        "operationId": "postV3ProjectsIdUploads",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "description": "The file to be uploaded",
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": ["file"]
              }
            }
          },
          "required": true
        },
        "responses": { "201": { "description": "Upload a file" } },
        "summary": "Create Projects Id Uploads",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/users": {
      "get": {
        "description": "Get the users list of a project",
        "operationId": "getV3ProjectsIdUsers",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Return list of users matching the search criteria",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get the users list of a project",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserBasic" }
              }
            }
          }
        },
        "summary": "Get Projects Id Users",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/variables": {
      "get": {
        "description": "Get project variables",
        "operationId": "getV3ProjectsIdVariables",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get project variables",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Variable" }
              }
            }
          }
        },
        "summary": "Get Projects Id Variables",
        "tags": ["projects"]
      },
      "post": {
        "description": "Create a new variable in a project",
        "operationId": "postV3ProjectsIdVariables",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "key": {
                    "description": "The key of the variable",
                    "type": "string"
                  },
                  "value": {
                    "description": "The value of the variable",
                    "type": "string"
                  }
                },
                "required": ["key", "value"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a new variable in a project",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Variable" }
              }
            }
          }
        },
        "summary": "Create Projects Id Variables",
        "tags": ["projects"]
      }
    },
    "/v3/projects/{id}/variables/{key}": {
      "delete": {
        "description": "Delete an existing variable from a project",
        "operationId": "deleteV3ProjectsIdVariablesKey",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The key of the variable",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete an existing variable from a project",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Variable" }
              }
            }
          }
        },
        "summary": "Delete Projects Id Variables Key",
        "tags": ["projects"]
      },
      "get": {
        "description": "Get a specific variable from a project",
        "operationId": "getV3ProjectsIdVariablesKey",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The key of the variable",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a specific variable from a project",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Variable" }
              }
            }
          }
        },
        "summary": "Get Projects Id Variables Key",
        "tags": ["projects"]
      },
      "put": {
        "description": "Update an existing variable from a project",
        "operationId": "putV3ProjectsIdVariablesKey",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The key of the variable",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "value": {
                    "description": "The value of the variable",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update an existing variable from a project",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Variable" }
              }
            }
          }
        },
        "summary": "Update Projects Id Variables Key",
        "tags": ["projects"]
      }
    },
    "/v3/runners": {
      "get": {
        "description": "Get runners available for user",
        "operationId": "getV3Runners",
        "parameters": [
          {
            "description": "The scope of specific runners to show",
            "in": "query",
            "name": "scope",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["active", "paused", "online"]
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get runners available for user",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Runner" }
              }
            }
          }
        },
        "summary": "Get Runners",
        "tags": ["runners"]
      }
    },
    "/v3/runners/all": {
      "get": {
        "description": "Get all runners - shared and specific",
        "operationId": "getV3RunnersAll",
        "parameters": [
          {
            "description": "The scope of specific runners to show",
            "in": "query",
            "name": "scope",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["active", "paused", "online", "specific", "shared"]
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get all runners - shared and specific",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Runner" }
              }
            }
          }
        },
        "summary": "Get Runners All",
        "tags": ["runners"]
      }
    },
    "/v3/runners/{id}": {
      "delete": {
        "description": "Remove a runner",
        "operationId": "deleteV3RunnersId",
        "parameters": [
          {
            "description": "The ID of the runner",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Remove a runner",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Runner" }
              }
            }
          }
        },
        "summary": "Delete Runners Id",
        "tags": ["runners"]
      },
      "get": {
        "description": "Get runner's details",
        "operationId": "getV3RunnersId",
        "parameters": [
          {
            "description": "The ID of the runner",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get runner's details",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RunnerDetails" }
              }
            }
          }
        },
        "summary": "Get Runners Id",
        "tags": ["runners"]
      },
      "put": {
        "description": "Update runner's details",
        "operationId": "putV3RunnersId",
        "parameters": [
          {
            "description": "The ID of the runner",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "description": "The description of the runner",
                    "type": "string"
                  },
                  "active": {
                    "description": "The state of a runner",
                    "type": "boolean"
                  },
                  "tag_list": {
                    "description": "The list of tags for a runner",
                    "type": "array",
                    "items": { "type": "string" }
                  },
                  "run_untagged": {
                    "description": "Flag indicating the runner can execute untagged jobs",
                    "type": "boolean"
                  },
                  "locked": {
                    "description": "Flag indicating the runner is locked",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update runner's details",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RunnerDetails" }
              }
            }
          }
        },
        "summary": "Update Runners Id",
        "tags": ["runners"]
      }
    },
    "/v3/session": {
      "post": {
        "description": "Login to get token",
        "operationId": "postV3Session",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "login": { "description": "The username", "type": "string" },
                  "email": {
                    "description": "The email of the user",
                    "type": "string"
                  },
                  "password": {
                    "description": "The password of the user",
                    "type": "string"
                  }
                },
                "required": ["password"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Login to get token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserWithPrivateToken"
                }
              }
            }
          }
        },
        "summary": "Create Session",
        "tags": ["session"]
      }
    },
    "/v3/sidekiq/compound_metrics": {
      "get": {
        "description": "Get the Sidekiq Compound metrics. Includes queue, process, and job statistics",
        "operationId": "getV3SidekiqCompoundMetrics",
        "responses": {
          "200": {
            "description": "Get the Sidekiq Compound metrics. Includes queue, process, and job statistics"
          }
        },
        "summary": "Get Sidekiq Compound Metrics",
        "tags": ["sidekiq"]
      }
    },
    "/v3/sidekiq/job_stats": {
      "get": {
        "description": "Get the Sidekiq job statistics",
        "operationId": "getV3SidekiqJobStats",
        "responses": {
          "200": { "description": "Get the Sidekiq job statistics" }
        },
        "summary": "Get Sidekiq Job Stats",
        "tags": ["sidekiq"]
      }
    },
    "/v3/sidekiq/process_metrics": {
      "get": {
        "description": "Get the Sidekiq process metrics",
        "operationId": "getV3SidekiqProcessMetrics",
        "responses": {
          "200": { "description": "Get the Sidekiq process metrics" }
        },
        "summary": "Get Sidekiq Process Metrics",
        "tags": ["sidekiq"]
      }
    },
    "/v3/sidekiq/queue_metrics": {
      "get": {
        "description": "Get the Sidekiq queue metrics",
        "operationId": "getV3SidekiqQueueMetrics",
        "responses": {
          "200": { "description": "Get the Sidekiq queue metrics" }
        },
        "summary": "Get Sidekiq Queue Metrics",
        "tags": ["sidekiq"]
      }
    },
    "/v3/snippets": {
      "get": {
        "description": "This feature was introduced in GitLab 8.15.",
        "operationId": "getV3Snippets",
        "parameters": [
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a snippets list for authenticated user",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PersonalSnippet" }
              }
            }
          }
        },
        "summary": "Get Snippets",
        "tags": ["snippets"]
      },
      "post": {
        "description": "This feature was introduced in GitLab 8.15.",
        "operationId": "postV3Snippets",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "description": "The title of a snippet",
                    "type": "string"
                  },
                  "file_name": {
                    "description": "The name of a snippet file",
                    "type": "string"
                  },
                  "content": {
                    "description": "The content of a snippet",
                    "type": "string"
                  },
                  "visibility_level": {
                    "description": "The visibility level of the snippet",
                    "type": "integer",
                    "format": "int32",
                    "enum": [0, 10, 20],
                    "default": 10
                  }
                },
                "required": ["title", "file_name", "content"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create new snippet",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PersonalSnippet" }
              }
            }
          }
        },
        "summary": "Create Snippets",
        "tags": ["snippets"]
      }
    },
    "/v3/snippets/public": {
      "get": {
        "description": "This feature was introduced in GitLab 8.15.",
        "operationId": "getV3SnippetsPublic",
        "parameters": [
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "List all public snippets current_user has access to",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PersonalSnippet" }
              }
            }
          }
        },
        "summary": "Get Snippets Public",
        "tags": ["snippets"]
      }
    },
    "/v3/snippets/{id}": {
      "delete": {
        "description": "This feature was introduced in GitLab 8.15.",
        "operationId": "deleteV3SnippetsId",
        "parameters": [
          {
            "description": "The ID of a snippet",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Remove snippet",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PersonalSnippet" }
              }
            }
          }
        },
        "summary": "Delete Snippets Id",
        "tags": ["snippets"]
      },
      "get": {
        "description": "This feature was introduced in GitLab 8.15.",
        "operationId": "getV3SnippetsId",
        "parameters": [
          {
            "description": "The ID of a snippet",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single snippet",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PersonalSnippet" }
              }
            }
          }
        },
        "summary": "Get Snippets Id",
        "tags": ["snippets"]
      },
      "put": {
        "description": "This feature was introduced in GitLab 8.15.",
        "operationId": "putV3SnippetsId",
        "parameters": [
          {
            "description": "The ID of a snippet",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "description": "The title of a snippet",
                    "type": "string"
                  },
                  "file_name": {
                    "description": "The name of a snippet file",
                    "type": "string"
                  },
                  "content": {
                    "description": "The content of a snippet",
                    "type": "string"
                  },
                  "visibility_level": {
                    "description": "The visibility level of the snippet",
                    "type": "integer",
                    "format": "int32",
                    "enum": [0, 10, 20]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update an existing snippet",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PersonalSnippet" }
              }
            }
          }
        },
        "summary": "Update Snippets Id",
        "tags": ["snippets"]
      }
    },
    "/v3/snippets/{id}/raw": {
      "get": {
        "description": "This feature was introduced in GitLab 8.15.",
        "operationId": "getV3SnippetsIdRaw",
        "parameters": [
          {
            "description": "The ID of a snippet",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": { "200": { "description": "Get a raw snippet" } },
        "summary": "Get Snippets Id Raw",
        "tags": ["snippets"]
      }
    },
    "/v3/templates/dockerfiles": {
      "get": {
        "description": "This feature was introduced in GitLab 8.15.",
        "operationId": "getV3TemplatesDockerfiles",
        "responses": {
          "200": {
            "description": "Get the list of the available template",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TemplatesList" }
              }
            }
          }
        },
        "summary": "Get Templates Dockerfiles",
        "tags": ["templates"]
      }
    },
    "/v3/templates/dockerfiles/{name}": {
      "get": {
        "description": "This feature was introduced in GitLab 8.15.",
        "operationId": "getV3TemplatesDockerfilesName",
        "parameters": [
          {
            "description": "The name of the template",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get the text for a specific template present in local filesystem",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Template" }
              }
            }
          }
        },
        "summary": "Get Templates Dockerfiles Name",
        "tags": ["templates"]
      }
    },
    "/v3/templates/gitignores": {
      "get": {
        "description": "This feature was introduced in GitLab 8.8.",
        "operationId": "getV3TemplatesGitignores",
        "responses": {
          "200": {
            "description": "Get the list of the available template",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TemplatesList" }
              }
            }
          }
        },
        "summary": "Get Templates Gitignores",
        "tags": ["templates"]
      }
    },
    "/v3/templates/gitignores/{name}": {
      "get": {
        "description": "This feature was introduced in GitLab 8.8.",
        "operationId": "getV3TemplatesGitignoresName",
        "parameters": [
          {
            "description": "The name of the template",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get the text for a specific template present in local filesystem",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Template" }
              }
            }
          }
        },
        "summary": "Get Templates Gitignores Name",
        "tags": ["templates"]
      }
    },
    "/v3/templates/gitlab_ci_ymls": {
      "get": {
        "description": "This feature was introduced in GitLab 8.9.",
        "operationId": "getV3TemplatesGitlabCiYmls",
        "responses": {
          "200": {
            "description": "Get the list of the available template",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TemplatesList" }
              }
            }
          }
        },
        "summary": "Get Templates Gitlab Ci Ymls",
        "tags": ["templates"]
      }
    },
    "/v3/templates/gitlab_ci_ymls/{name}": {
      "get": {
        "description": "This feature was introduced in GitLab 8.9.",
        "operationId": "getV3TemplatesGitlabCiYmlsName",
        "parameters": [
          {
            "description": "The name of the template",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get the text for a specific template present in local filesystem",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Template" }
              }
            }
          }
        },
        "summary": "Get Templates Gitlab Ci Ymls Name",
        "tags": ["templates"]
      }
    },
    "/v3/templates/licenses": {
      "get": {
        "description": "This feature was introduced in GitLab 8.7.",
        "operationId": "getV3TemplatesLicenses",
        "parameters": [
          {
            "description": "If passed, returns only popular licenses",
            "in": "query",
            "name": "popular",
            "required": false,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get the list of the available license template",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RepoLicense" }
              }
            }
          }
        },
        "summary": "Get Templates Licenses",
        "tags": ["templates"]
      }
    },
    "/v3/templates/licenses/{name}": {
      "get": {
        "description": "This feature was introduced in GitLab 8.7.",
        "operationId": "getV3TemplatesLicensesName",
        "parameters": [
          {
            "description": "The name of the template",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get the text for a specific license",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RepoLicense" }
              }
            }
          }
        },
        "summary": "Get Templates Licenses Name",
        "tags": ["templates"]
      }
    },
    "/v3/todos": {
      "delete": {
        "description": "Mark all todos as done",
        "operationId": "deleteV3Todos",
        "responses": { "204": { "description": "Mark all todos as done" } },
        "summary": "Delete Todos",
        "tags": ["todos"]
      },
      "get": {
        "description": "Get a todo list",
        "operationId": "getV3Todos",
        "parameters": [
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a todo list",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Todo" }
              }
            }
          }
        },
        "summary": "Get Todos",
        "tags": ["todos"]
      }
    },
    "/v3/todos/{id}": {
      "delete": {
        "description": "Mark a todo as done",
        "operationId": "deleteV3TodosId",
        "parameters": [
          {
            "description": "The ID of the todo being marked as done",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Mark a todo as done",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Todo" }
              }
            }
          }
        },
        "summary": "Delete Todos Id",
        "tags": ["todos"]
      }
    },
    "/v3/user": {
      "get": {
        "description": "Get the currently authenticated user",
        "operationId": "getV3User",
        "responses": {
          "200": {
            "description": "Get the currently authenticated user",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserPublic" }
              }
            }
          }
        },
        "summary": "Get User",
        "tags": ["user"]
      }
    },
    "/v3/user/emails": {
      "get": {
        "description": "Get the currently authenticated user's email addresses",
        "operationId": "getV3UserEmails",
        "responses": {
          "200": {
            "description": "Get the currently authenticated user's email addresses",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Email" }
              }
            }
          }
        },
        "summary": "Get User Emails",
        "tags": ["user"]
      },
      "post": {
        "description": "Add new email address to the currently authenticated user",
        "operationId": "postV3UserEmails",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": { "description": "The new email", "type": "string" }
                },
                "required": ["email"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Add new email address to the currently authenticated user",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Email" }
              }
            }
          }
        },
        "summary": "Create User Emails",
        "tags": ["user"]
      }
    },
    "/v3/user/emails/{email_id}": {
      "delete": {
        "description": "Delete an email address from the currently authenticated user",
        "operationId": "deleteV3UserEmailsEmailId",
        "parameters": [
          {
            "description": "The ID of the email",
            "in": "path",
            "name": "email_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete an email address from the currently authenticated user"
          }
        },
        "summary": "Delete User Emails Email Id",
        "tags": ["user"]
      },
      "get": {
        "description": "Get a single email address owned by the currently authenticated user",
        "operationId": "getV3UserEmailsEmailId",
        "parameters": [
          {
            "description": "The ID of the email",
            "in": "path",
            "name": "email_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single email address owned by the currently authenticated user",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Email" }
              }
            }
          }
        },
        "summary": "Get User Emails Email Id",
        "tags": ["user"]
      }
    },
    "/v3/user/keys": {
      "get": {
        "description": "Get the currently authenticated user's SSH keys",
        "operationId": "getV3UserKeys",
        "responses": {
          "200": {
            "description": "Get the currently authenticated user's SSH keys",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SSHKey" }
              }
            }
          }
        },
        "summary": "Get User Keys",
        "tags": ["user"]
      },
      "post": {
        "description": "Add a new SSH key to the currently authenticated user",
        "operationId": "postV3UserKeys",
        "requestBody": { "$ref": "#/components/requestBodies/postV3UserKeys" },
        "responses": {
          "201": {
            "description": "Add a new SSH key to the currently authenticated user",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SSHKey" }
              }
            }
          }
        },
        "summary": "Create User Keys",
        "tags": ["user"]
      }
    },
    "/v3/user/keys/{key_id}": {
      "delete": {
        "description": "Delete an SSH key from the currently authenticated user",
        "operationId": "deleteV3UserKeysKeyId",
        "parameters": [
          {
            "description": "The ID of the SSH key",
            "in": "path",
            "name": "key_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete an SSH key from the currently authenticated user",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SSHKey" }
              }
            }
          }
        },
        "summary": "Delete User Keys Key Id",
        "tags": ["user"]
      },
      "get": {
        "description": "Get a single key owned by currently authenticated user",
        "operationId": "getV3UserKeysKeyId",
        "parameters": [
          {
            "description": "The ID of the SSH key",
            "in": "path",
            "name": "key_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single key owned by currently authenticated user",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SSHKey" }
              }
            }
          }
        },
        "summary": "Get User Keys Key Id",
        "tags": ["user"]
      }
    },
    "/v3/users": {
      "get": {
        "description": "Get the list of users",
        "operationId": "getV3Users",
        "parameters": [
          {
            "description": "Get a single user with a specific username",
            "in": "query",
            "name": "username",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Search for a username",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Filters only active users",
            "in": "query",
            "name": "active",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "description": "Filters only external users",
            "in": "query",
            "name": "external",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "description": "Filters only blocked users",
            "in": "query",
            "name": "blocked",
            "required": false,
            "schema": { "type": "boolean" }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get the list of users",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserBasic" }
              }
            }
          }
        },
        "summary": "Get Users",
        "tags": ["users"]
      },
      "post": {
        "description": "Create a user. Available only for admins.",
        "operationId": "postV3Users",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "description": "The email of the user",
                    "type": "string"
                  },
                  "password": {
                    "description": "The password of the new user",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the user",
                    "type": "string"
                  },
                  "username": {
                    "description": "The username of the user",
                    "type": "string"
                  },
                  "skype": {
                    "description": "The Skype username",
                    "type": "string"
                  },
                  "linkedin": {
                    "description": "The LinkedIn username",
                    "type": "string"
                  },
                  "twitter": {
                    "description": "The Twitter username",
                    "type": "string"
                  },
                  "website_url": {
                    "description": "The website of the user",
                    "type": "string"
                  },
                  "organization": {
                    "description": "The organization of the user",
                    "type": "string"
                  },
                  "projects_limit": {
                    "description": "The number of projects a user can create",
                    "type": "integer",
                    "format": "int32"
                  },
                  "extern_uid": {
                    "description": "The external authentication provider UID",
                    "type": "string"
                  },
                  "provider": {
                    "description": "The external provider",
                    "type": "string"
                  },
                  "bio": {
                    "description": "The biography of the user",
                    "type": "string"
                  },
                  "location": {
                    "description": "The location of the user",
                    "type": "string"
                  },
                  "admin": {
                    "description": "Flag indicating the user is an administrator",
                    "type": "boolean"
                  },
                  "can_create_group": {
                    "description": "Flag indicating the user can create groups",
                    "type": "boolean"
                  },
                  "confirm": {
                    "description": "Flag indicating the account needs to be confirmed",
                    "type": "boolean"
                  },
                  "external": {
                    "description": "Flag indicating the user is an external user",
                    "type": "boolean"
                  }
                },
                "required": ["email", "password", "name", "username"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Create a user. Available only for admins.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserPublic" }
              }
            }
          }
        },
        "summary": "Create Users",
        "tags": ["users"]
      }
    },
    "/v3/users/{id}": {
      "delete": {
        "description": "Delete a user. Available only for admins.",
        "operationId": "deleteV3UsersId",
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete a user. Available only for admins.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Email" }
              }
            }
          }
        },
        "summary": "Delete Users Id",
        "tags": ["users"]
      },
      "get": {
        "description": "Get a single user",
        "operationId": "getV3UsersId",
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single user",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserBasic" }
              }
            }
          }
        },
        "summary": "Get Users Id",
        "tags": ["users"]
      },
      "put": {
        "description": "Update a user. Available only for admins.",
        "operationId": "putV3UsersId",
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "description": "The email of the user",
                    "type": "string"
                  },
                  "password": {
                    "description": "The password of the new user",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the user",
                    "type": "string"
                  },
                  "username": {
                    "description": "The username of the user",
                    "type": "string"
                  },
                  "skype": {
                    "description": "The Skype username",
                    "type": "string"
                  },
                  "linkedin": {
                    "description": "The LinkedIn username",
                    "type": "string"
                  },
                  "twitter": {
                    "description": "The Twitter username",
                    "type": "string"
                  },
                  "website_url": {
                    "description": "The website of the user",
                    "type": "string"
                  },
                  "organization": {
                    "description": "The organization of the user",
                    "type": "string"
                  },
                  "projects_limit": {
                    "description": "The number of projects a user can create",
                    "type": "integer",
                    "format": "int32"
                  },
                  "extern_uid": {
                    "description": "The external authentication provider UID",
                    "type": "string"
                  },
                  "provider": {
                    "description": "The external provider",
                    "type": "string"
                  },
                  "bio": {
                    "description": "The biography of the user",
                    "type": "string"
                  },
                  "location": {
                    "description": "The location of the user",
                    "type": "string"
                  },
                  "admin": {
                    "description": "Flag indicating the user is an administrator",
                    "type": "boolean"
                  },
                  "can_create_group": {
                    "description": "Flag indicating the user can create groups",
                    "type": "boolean"
                  },
                  "confirm": {
                    "description": "Flag indicating the account needs to be confirmed",
                    "type": "boolean"
                  },
                  "external": {
                    "description": "Flag indicating the user is an external user",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update a user. Available only for admins.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserPublic" }
              }
            }
          }
        },
        "summary": "Update Users Id",
        "tags": ["users"]
      }
    },
    "/v3/users/{id}/block": {
      "put": {
        "description": "Block a user. Available only for admins.",
        "operationId": "putV3UsersIdBlock",
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": { "description": "Block a user. Available only for admins." }
        },
        "summary": "Update Users Id Block",
        "tags": ["users"]
      }
    },
    "/v3/users/{id}/emails": {
      "get": {
        "description": "Get the emails addresses of a specified user. Available only for admins.",
        "operationId": "getV3UsersIdEmails",
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get the emails addresses of a specified user. Available only for admins.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Email" }
              }
            }
          }
        },
        "summary": "Get Users Id Emails",
        "tags": ["users"]
      },
      "post": {
        "description": "Add an email address to a specified user. Available only for admins.",
        "operationId": "postV3UsersIdEmails",
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "description": "The email of the user",
                    "type": "string"
                  }
                },
                "required": ["email"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Add an email address to a specified user. Available only for admins.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Email" }
              }
            }
          }
        },
        "summary": "Create Users Id Emails",
        "tags": ["users"]
      }
    },
    "/v3/users/{id}/emails/{email_id}": {
      "delete": {
        "description": "Delete an email address of a specified user. Available only for admins.",
        "operationId": "deleteV3UsersIdEmailsEmailId",
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "The ID of the email",
            "in": "path",
            "name": "email_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete an email address of a specified user. Available only for admins.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Email" }
              }
            }
          }
        },
        "summary": "Delete Users Id Emails Email Id",
        "tags": ["users"]
      }
    },
    "/v3/users/{id}/events": {
      "get": {
        "description": "This feature was introduced in GitLab 8.13.",
        "operationId": "getV3UsersIdEvents",
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get the contribution events of a specified user",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Event" }
              }
            }
          }
        },
        "summary": "Get Users Id Events",
        "tags": ["users"]
      }
    },
    "/v3/users/{id}/keys": {
      "get": {
        "description": "Get the SSH keys of a specified user. Available only for admins.",
        "operationId": "getV3UsersIdKeys",
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get the SSH keys of a specified user. Available only for admins.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SSHKey" }
              }
            }
          }
        },
        "summary": "Get Users Id Keys",
        "tags": ["users"]
      },
      "post": {
        "description": "Add an SSH key to a specified user. Available only for admins.",
        "operationId": "postV3UsersIdKeys",
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": { "$ref": "#/components/requestBodies/postV3UserKeys" },
        "responses": {
          "201": {
            "description": "Add an SSH key to a specified user. Available only for admins.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SSHKey" }
              }
            }
          }
        },
        "summary": "Create Users Id Keys",
        "tags": ["users"]
      }
    },
    "/v3/users/{id}/keys/{key_id}": {
      "delete": {
        "description": "Delete an existing SSH key from a specified user. Available only for admins.",
        "operationId": "deleteV3UsersIdKeysKeyId",
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "description": "The ID of the SSH key",
            "in": "path",
            "name": "key_id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete an existing SSH key from a specified user. Available only for admins.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SSHKey" }
              }
            }
          }
        },
        "summary": "Delete Users Id Keys Key Id",
        "tags": ["users"]
      }
    },
    "/v3/users/{id}/unblock": {
      "put": {
        "description": "Unblock a user. Available only for admins.",
        "operationId": "putV3UsersIdUnblock",
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "200": { "description": "Unblock a user. Available only for admins." }
        },
        "summary": "Update Users Id Unblock",
        "tags": ["users"]
      }
    },
    "/v3/version": {
      "get": {
        "description": "This feature was introduced in GitLab 8.13.",
        "operationId": "getV3Version",
        "responses": {
          "200": {
            "description": "Get the version information of the GitLab instance."
          }
        },
        "summary": "Get Version",
        "tags": ["version"]
      }
    }
  },
  "servers": [{ "url": "https://gitlab.com/api" }],
  "components": {
    "requestBodies": {
      "putV3ProjectsIdMergeRequestMergeRequestId": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "description": "The title of the merge request",
                  "type": "string"
                },
                "target_branch": {
                  "description": "The target branch",
                  "type": "string"
                },
                "state_event": {
                  "description": "Status of the merge request",
                  "type": "string",
                  "enum": ["close", "reopen", "merge"]
                },
                "description": {
                  "description": "The description of the merge request",
                  "type": "string"
                },
                "assignee_id": {
                  "description": "The ID of a user to assign the merge request",
                  "type": "integer",
                  "format": "int32"
                },
                "milestone_id": {
                  "description": "The ID of a milestone to assign the merge request",
                  "type": "integer",
                  "format": "int32"
                },
                "labels": {
                  "description": "Comma-separated list of label names",
                  "type": "string"
                },
                "remove_source_branch": {
                  "description": "Remove source branch when merging",
                  "type": "boolean"
                }
              }
            }
          }
        }
      },
      "postV3ProjectsIdRepositoryFiles": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "type": "object",
              "properties": {
                "file_path": {
                  "description": "The path to new file. Ex. lib/class.rb",
                  "type": "string"
                },
                "branch_name": {
                  "description": "The name of branch",
                  "type": "string"
                },
                "commit_message": {
                  "description": "Commit Message",
                  "type": "string"
                },
                "author_email": {
                  "description": "The email of the author",
                  "type": "string"
                },
                "author_name": {
                  "description": "The name of the author",
                  "type": "string"
                },
                "content": { "description": "File content", "type": "string" },
                "encoding": {
                  "description": "File encoding",
                  "type": "string",
                  "enum": ["base64"]
                }
              },
              "required": [
                "file_path",
                "branch_name",
                "commit_message",
                "content"
              ]
            }
          }
        },
        "required": true
      },
      "putV3ProjectsIdServicesBugzilla": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "type": "object",
              "properties": {
                "new_issue_url": {
                  "description": "New issue URL",
                  "type": "string"
                },
                "issues_url": { "description": "Issues URL", "type": "string" },
                "project_url": {
                  "description": "Project URL",
                  "type": "string"
                },
                "description": {
                  "description": "Description",
                  "type": "string"
                },
                "title": { "description": "Title", "type": "string" },
                "push_events": {
                  "description": "Event will be triggered by a push to the repository",
                  "type": "string"
                }
              },
              "required": ["new_issue_url", "issues_url", "project_url"]
            }
          }
        },
        "required": true
      },
      "postV3ProjectsIdHooks": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "type": "object",
              "properties": {
                "url": {
                  "description": "The URL to send the request to",
                  "type": "string"
                },
                "push_events": {
                  "description": "Trigger hook on push events",
                  "type": "boolean"
                },
                "issues_events": {
                  "description": "Trigger hook on issues events",
                  "type": "boolean"
                },
                "merge_requests_events": {
                  "description": "Trigger hook on merge request events",
                  "type": "boolean"
                },
                "tag_push_events": {
                  "description": "Trigger hook on tag push events",
                  "type": "boolean"
                },
                "note_events": {
                  "description": "Trigger hook on note(comment) events",
                  "type": "boolean"
                },
                "build_events": {
                  "description": "Trigger hook on build events",
                  "type": "boolean"
                },
                "pipeline_events": {
                  "description": "Trigger hook on pipeline events",
                  "type": "boolean"
                },
                "wiki_page_events": {
                  "description": "Trigger hook on wiki events",
                  "type": "boolean"
                },
                "enable_ssl_verification": {
                  "description": "Do SSL verification when triggering the hook",
                  "type": "boolean"
                },
                "token": {
                  "description": "Secret token to validate received payloads; this will not be returned in the response",
                  "type": "string"
                }
              },
              "required": ["url"]
            }
          }
        },
        "required": true
      },
      "putV3ProjectsIdIssuesNoteableIdNotesNoteId": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "type": "object",
              "properties": {
                "body": {
                  "description": "The content of a note",
                  "type": "string"
                }
              },
              "required": ["body"]
            }
          }
        },
        "required": true
      },
      "putV3GroupsIdMembersUserId": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "type": "object",
              "properties": {
                "access_level": {
                  "description": "A valid access level",
                  "type": "integer",
                  "format": "int32"
                },
                "expires_at": {
                  "description": "Date string in the format YEAR-MONTH-DAY",
                  "type": "string",
                  "format": "date-time"
                }
              },
              "required": ["access_level"]
            }
          }
        },
        "required": true
      },
      "putV3ProjectsIdServicesSlackSlashCommands": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "type": "object",
              "properties": {
                "token": { "description": "The Slack token", "type": "string" }
              },
              "required": ["token"]
            }
          }
        },
        "required": true
      },
      "putV3ProjectsIdMergeRequestMergeRequestIdMerge": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "type": "object",
              "properties": {
                "merge_commit_message": {
                  "description": "Custom merge commit message",
                  "type": "string"
                },
                "should_remove_source_branch": {
                  "description": "When true, the source branch will be deleted if possible",
                  "type": "boolean"
                },
                "merge_when_build_succeeds": {
                  "description": "When true, this merge request will be merged when the pipeline succeeds",
                  "type": "boolean"
                },
                "sha": {
                  "description": "When present, must have the HEAD SHA of the source branch",
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "putV3ProjectsIdServicesMattermostSlashCommands": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "description": "The Mattermost token",
                  "type": "string"
                }
              },
              "required": ["token"]
            }
          }
        },
        "required": true
      },
      "postV3GroupsIdMembers": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "type": "object",
              "properties": {
                "user_id": {
                  "description": "The user ID of the new member",
                  "type": "integer",
                  "format": "int32"
                },
                "access_level": {
                  "description": "A valid access level (defaults: `30`, developer access level)",
                  "type": "integer",
                  "format": "int32"
                },
                "expires_at": {
                  "description": "Date string in the format YEAR-MONTH-DAY",
                  "type": "string",
                  "format": "date-time"
                }
              },
              "required": ["user_id", "access_level"]
            }
          }
        },
        "required": true
      },
      "postV3UserKeys": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "type": "object",
              "properties": {
                "key": { "description": "The new SSH key", "type": "string" },
                "title": {
                  "description": "The title of the new SSH key",
                  "type": "string"
                }
              },
              "required": ["key", "title"]
            }
          }
        },
        "required": true
      },
      "putV3GroupsIdAccessRequestsUserIdApprove": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "type": "object",
              "properties": {
                "access_level": {
                  "description": "A valid access level (defaults: `30`, developer access level)",
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      },
      "postV3ProjectsIdDeployKeys": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "type": "object",
              "properties": {
                "key": {
                  "description": "The new deploy key",
                  "type": "string"
                },
                "title": {
                  "description": "The name of the deploy key",
                  "type": "string"
                }
              },
              "required": ["key", "title"]
            }
          }
        },
        "required": true
      },
      "postV3ProjectsIdIssuesIssueIdAddSpentTime": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "type": "object",
              "properties": {
                "duration": {
                  "description": "The duration to be parsed",
                  "type": "string"
                }
              },
              "required": ["duration"]
            }
          }
        },
        "required": true
      },
      "postV3ProjectsIdIssuesIssueIdAwardEmoji": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "description": "The name of a award_emoji (without colons)",
                  "type": "string"
                }
              },
              "required": ["name"]
            }
          }
        },
        "required": true
      },
      "postV3ProjectsIdIssuesNoteableIdNotes": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "type": "object",
              "properties": {
                "body": {
                  "description": "The content of a note",
                  "type": "string"
                },
                "created_at": {
                  "description": "The creation date of the note",
                  "type": "string"
                }
              },
              "required": ["body"]
            }
          }
        },
        "required": true
      },
      "postV3ProjectsIdMergeRequestMergeRequestIdComments": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "type": "object",
              "properties": {
                "note": {
                  "description": "The text of the comment",
                  "type": "string"
                }
              },
              "required": ["note"]
            }
          }
        },
        "required": true
      },
      "postV3ProjectsIdRepositoryTagsTagNameRelease": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "type": "object",
              "properties": {
                "description": {
                  "description": "Release notes with markdown support",
                  "type": "string"
                }
              },
              "required": ["description"]
            }
          }
        },
        "required": true
      }
    },
    "securitySchemes": {
      "private_token_header": {
        "in": "header",
        "name": "PRIVATE_HEADER",
        "type": "apiKey"
      },
      "private_token_query": {
        "in": "query",
        "name": "private_token",
        "type": "apiKey"
      }
    },
    "schemas": {
      "AccessRequester": {
        "description": "This feature was introduced in GitLab 8.11.",
        "properties": {
          "avatar_url": { "type": "string" },
          "id": { "type": "string" },
          "name": { "type": "string" },
          "requested_at": { "type": "string" },
          "state": { "type": "string" },
          "username": { "type": "string" },
          "web_url": { "type": "string" }
        },
        "type": "object"
      },
      "ApplicationSetting": {
        "description": "Modify application settings",
        "properties": {
          "after_sign_out_path": { "type": "string" },
          "after_sign_up_text": { "type": "string" },
          "container_registry_token_expire_delay": { "type": "string" },
          "created_at": { "type": "string" },
          "default_branch_protection": { "type": "string" },
          "default_group_visibility": { "type": "string" },
          "default_project_visibility": { "type": "string" },
          "default_projects_limit": { "type": "string" },
          "default_snippet_visibility": { "type": "string" },
          "domain_blacklist": { "type": "string" },
          "domain_blacklist_enabled": { "type": "string" },
          "domain_whitelist": { "type": "string" },
          "gravatar_enabled": { "type": "string" },
          "home_page_url": { "type": "string" },
          "id": { "type": "string" },
          "koding_enabled": { "type": "string" },
          "koding_url": { "type": "string" },
          "max_attachment_size": { "type": "string" },
          "plantuml_enabled": { "type": "string" },
          "plantuml_url": { "type": "string" },
          "repository_storage": { "type": "string" },
          "repository_storages": { "type": "string" },
          "restricted_visibility_levels": { "type": "string" },
          "session_expire_delay": { "type": "string" },
          "sign_in_text": { "type": "string" },
          "signin_enabled": { "type": "string" },
          "signup_enabled": { "type": "string" },
          "updated_at": { "type": "string" },
          "user_oauth_applications": { "type": "string" }
        },
        "type": "object"
      },
      "AwardEmoji": {
        "description": "This feature was introduced in 8.9",
        "properties": {
          "awardable_id": { "type": "string" },
          "awardable_type": { "type": "string" },
          "created_at": { "type": "string" },
          "id": { "type": "string" },
          "name": { "type": "string" },
          "updated_at": { "type": "string" },
          "user": { "$ref": "#/components/schemas/UserBasic" }
        },
        "type": "object"
      },
      "BasicProjectDetails": {
        "description": "Get all projects for admin user",
        "properties": {
          "http_url_to_repo": { "type": "string" },
          "id": { "type": "string" },
          "name": { "type": "string" },
          "name_with_namespace": { "type": "string" },
          "path": { "type": "string" },
          "path_with_namespace": { "type": "string" },
          "web_url": { "type": "string" }
        },
        "type": "object"
      },
      "Board": {
        "description": "This feature was introduced in 8.13",
        "properties": {
          "id": { "type": "string" },
          "lists": { "$ref": "#/components/schemas/List" }
        },
        "type": "object"
      },
      "Build": {
        "description": "This feature was added in GitLab 8.11",
        "properties": {
          "artifacts_file": {
            "$ref": "#/components/schemas/BuildArtifactFile"
          },
          "commit": { "$ref": "#/components/schemas/RepoCommit" },
          "coverage": { "type": "string" },
          "created_at": { "type": "string" },
          "finished_at": { "type": "string" },
          "id": { "type": "string" },
          "name": { "type": "string" },
          "pipeline": { "$ref": "#/components/schemas/PipelineBasic" },
          "ref": { "type": "string" },
          "runner": { "$ref": "#/components/schemas/Runner" },
          "stage": { "type": "string" },
          "started_at": { "type": "string" },
          "status": { "type": "string" },
          "tag": { "type": "string" },
          "user": { "$ref": "#/components/schemas/User" }
        },
        "type": "object"
      },
      "BuildArtifactFile": {
        "properties": {
          "filename": { "type": "string" },
          "size": { "type": "string" }
        },
        "type": "object"
      },
      "CommitNote": {
        "description": "Post comment to commit",
        "properties": {
          "author": { "$ref": "#/components/schemas/UserBasic" },
          "created_at": { "type": "string" },
          "line": { "type": "string" },
          "line_type": { "type": "string" },
          "note": { "type": "string" },
          "path": { "type": "string" }
        },
        "type": "object"
      },
      "CommitStatus": {
        "description": "Post status to a commit",
        "properties": {
          "allow_failure": { "type": "string" },
          "author": { "$ref": "#/components/schemas/UserBasic" },
          "created_at": { "type": "string" },
          "description": { "type": "string" },
          "finished_at": { "type": "string" },
          "id": { "type": "string" },
          "name": { "type": "string" },
          "ref": { "type": "string" },
          "sha": { "type": "string" },
          "started_at": { "type": "string" },
          "status": { "type": "string" },
          "target_url": { "type": "string" }
        },
        "type": "object"
      },
      "Compare": {
        "description": "Compare two branches, tags, or commits",
        "properties": {
          "commit": { "$ref": "#/components/schemas/RepoCommit" },
          "commits": { "$ref": "#/components/schemas/RepoCommit" },
          "compare_same_ref": { "type": "string" },
          "compare_timeout": { "type": "string" },
          "diffs": { "$ref": "#/components/schemas/RepoDiff" }
        },
        "type": "object"
      },
      "Contributor": {
        "description": "Get repository contributors",
        "properties": {
          "additions": { "type": "string" },
          "commits": { "type": "string" },
          "deletions": { "type": "string" },
          "email": { "type": "string" },
          "name": { "type": "string" }
        },
        "type": "object"
      },
      "Deployment": {
        "description": "This feature was introduced in GitLab 8.11.",
        "properties": {
          "created_at": { "type": "string" },
          "deployable": { "$ref": "#/components/schemas/Build" },
          "environment": { "$ref": "#/components/schemas/EnvironmentBasic" },
          "id": { "type": "string" },
          "iid": { "type": "string" },
          "ref": { "type": "string" },
          "sha": { "type": "string" },
          "user": { "$ref": "#/components/schemas/UserBasic" }
        },
        "type": "object"
      },
      "Email": {
        "description": "Add new email address to the currently authenticated user",
        "properties": {
          "email": { "type": "string" },
          "id": { "type": "string" }
        },
        "type": "object"
      },
      "Environment": {
        "description": "This feature was introduced in GitLab 8.11.",
        "properties": {
          "external_url": { "type": "string" },
          "id": { "type": "string" },
          "name": { "type": "string" },
          "project": { "$ref": "#/components/schemas/Project" },
          "slug": { "type": "string" }
        },
        "type": "object"
      },
      "EnvironmentBasic": {
        "properties": {
          "external_url": { "type": "string" },
          "id": { "type": "string" },
          "name": { "type": "string" },
          "slug": { "type": "string" }
        },
        "type": "object"
      },
      "Event": {
        "description": "This feature was introduced in GitLab 8.13.",
        "properties": {
          "action_name": { "type": "string" },
          "author": { "$ref": "#/components/schemas/UserBasic" },
          "author_id": { "type": "string" },
          "author_username": { "type": "string" },
          "created_at": { "type": "string" },
          "data": { "type": "string" },
          "note": { "$ref": "#/components/schemas/Note" },
          "project_id": { "type": "string" },
          "target_id": { "type": "string" },
          "target_title": { "type": "string" },
          "target_type": { "type": "string" },
          "title": { "type": "string" }
        },
        "type": "object"
      },
      "GlobalNotificationSetting": {
        "description": "This feature was introduced in GitLab 8.12",
        "properties": {
          "events": { "type": "string" },
          "level": { "type": "string" },
          "notification_email": { "type": "string" }
        },
        "type": "object"
      },
      "Group": {
        "description": "Update a group. Available only for users who can administrate groups.",
        "properties": {
          "avatar_url": { "type": "string" },
          "description": { "type": "string" },
          "id": { "type": "string" },
          "lfs_enabled": { "type": "string" },
          "name": { "type": "string" },
          "path": { "type": "string" },
          "request_access_enabled": { "type": "string" },
          "statistics": { "type": "string" },
          "visibility_level": { "type": "string" },
          "web_url": { "type": "string" }
        },
        "type": "object"
      },
      "GroupDetail": {
        "description": "Transfer a project to the group namespace. Available only for admin.",
        "properties": {
          "avatar_url": { "type": "string" },
          "description": { "type": "string" },
          "id": { "type": "string" },
          "lfs_enabled": { "type": "string" },
          "name": { "type": "string" },
          "path": { "type": "string" },
          "projects": { "$ref": "#/components/schemas/Project" },
          "request_access_enabled": { "type": "string" },
          "shared_projects": { "$ref": "#/components/schemas/Project" },
          "statistics": { "type": "string" },
          "visibility_level": { "type": "string" },
          "web_url": { "type": "string" }
        },
        "type": "object"
      },
      "Hook": {
        "description": "Delete a hook",
        "properties": {
          "created_at": { "type": "string" },
          "enable_ssl_verification": { "type": "string" },
          "id": { "type": "string" },
          "push_events": { "type": "string" },
          "tag_push_events": { "type": "string" },
          "url": { "type": "string" }
        },
        "type": "object"
      },
      "Identity": {
        "properties": {
          "extern_uid": { "type": "string" },
          "provider": { "type": "string" }
        },
        "type": "object"
      },
      "Issue": {
        "description": "Get currently authenticated user's issues",
        "properties": {
          "assignee": { "$ref": "#/components/schemas/UserBasic" },
          "author": { "$ref": "#/components/schemas/UserBasic" },
          "confidential": { "type": "string" },
          "created_at": { "type": "string" },
          "description": { "type": "string" },
          "downvotes": { "type": "string" },
          "due_date": { "type": "string" },
          "id": { "type": "string" },
          "iid": { "type": "string" },
          "labels": { "type": "string" },
          "milestone": { "$ref": "#/components/schemas/Milestone" },
          "project_id": { "type": "string" },
          "state": { "type": "string" },
          "subscribed": { "type": "string" },
          "title": { "type": "string" },
          "updated_at": { "type": "string" },
          "upvotes": { "type": "string" },
          "user_notes_count": { "type": "string" },
          "web_url": { "type": "string" }
        },
        "type": "object"
      },
      "Label": {
        "description": "Unsubscribe from a resource",
        "properties": {
          "closed_issues_count": { "type": "string" },
          "color": { "type": "string" },
          "description": { "type": "string" },
          "id": { "type": "string" },
          "name": { "type": "string" },
          "open_issues_count": { "type": "string" },
          "open_merge_requests_count": { "type": "string" },
          "priority": { "type": "string" },
          "subscribed": { "type": "string" }
        },
        "type": "object"
      },
      "LabelBasic": {
        "properties": {
          "color": { "type": "string" },
          "description": { "type": "string" },
          "id": { "type": "string" },
          "name": { "type": "string" }
        },
        "type": "object"
      },
      "List": {
        "description": "This feature was introduced in 8.13",
        "properties": {
          "id": { "type": "string" },
          "label": { "$ref": "#/components/schemas/LabelBasic" },
          "position": { "type": "string" }
        },
        "type": "object"
      },
      "MRNote": {
        "description": "List issues that will be closed on merge",
        "properties": {
          "author": { "$ref": "#/components/schemas/UserBasic" },
          "note": { "type": "string" }
        },
        "type": "object"
      },
      "Member": {
        "description": "Updates a member of a group or project.",
        "properties": {
          "access_level": { "type": "string" },
          "avatar_url": { "type": "string" },
          "expires_at": { "type": "string" },
          "id": { "type": "string" },
          "name": { "type": "string" },
          "state": { "type": "string" },
          "username": { "type": "string" },
          "web_url": { "type": "string" }
        },
        "type": "object"
      },
      "MergeRequest": {
        "description": "Unsubscribe from a resource",
        "properties": {
          "assignee": { "$ref": "#/components/schemas/UserBasic" },
          "author": { "$ref": "#/components/schemas/UserBasic" },
          "created_at": { "type": "string" },
          "description": { "type": "string" },
          "downvotes": { "type": "string" },
          "force_remove_source_branch": { "type": "string" },
          "id": { "type": "string" },
          "iid": { "type": "string" },
          "labels": { "type": "string" },
          "merge_commit_sha": { "type": "string" },
          "merge_status": { "type": "string" },
          "merge_when_build_succeeds": { "type": "string" },
          "milestone": { "$ref": "#/components/schemas/Milestone" },
          "project_id": { "type": "string" },
          "sha": { "type": "string" },
          "should_remove_source_branch": { "type": "string" },
          "source_branch": { "type": "string" },
          "source_project_id": { "type": "string" },
          "state": { "type": "string" },
          "subscribed": { "type": "string" },
          "target_branch": { "type": "string" },
          "target_project_id": { "type": "string" },
          "title": { "type": "string" },
          "updated_at": { "type": "string" },
          "upvotes": { "type": "string" },
          "user_notes_count": { "type": "string" },
          "web_url": { "type": "string" },
          "work_in_progress": { "type": "string" }
        },
        "type": "object"
      },
      "MergeRequestChanges": {
        "description": "Show the merge request changes",
        "properties": {
          "assignee": { "$ref": "#/components/schemas/UserBasic" },
          "author": { "$ref": "#/components/schemas/UserBasic" },
          "changes": { "$ref": "#/components/schemas/RepoDiff" },
          "created_at": { "type": "string" },
          "description": { "type": "string" },
          "downvotes": { "type": "string" },
          "force_remove_source_branch": { "type": "string" },
          "id": { "type": "string" },
          "iid": { "type": "string" },
          "labels": { "type": "string" },
          "merge_commit_sha": { "type": "string" },
          "merge_status": { "type": "string" },
          "merge_when_build_succeeds": { "type": "string" },
          "milestone": { "$ref": "#/components/schemas/Milestone" },
          "project_id": { "type": "string" },
          "sha": { "type": "string" },
          "should_remove_source_branch": { "type": "string" },
          "source_branch": { "type": "string" },
          "source_project_id": { "type": "string" },
          "state": { "type": "string" },
          "subscribed": { "type": "string" },
          "target_branch": { "type": "string" },
          "target_project_id": { "type": "string" },
          "title": { "type": "string" },
          "updated_at": { "type": "string" },
          "upvotes": { "type": "string" },
          "user_notes_count": { "type": "string" },
          "web_url": { "type": "string" },
          "work_in_progress": { "type": "string" }
        },
        "type": "object"
      },
      "MergeRequestDiff": {
        "description": "This feature was introduced in GitLab 8.12.",
        "properties": {
          "base_commit_sha": { "type": "string" },
          "created_at": { "type": "string" },
          "head_commit_sha": { "type": "string" },
          "id": { "type": "string" },
          "merge_request_id": { "type": "string" },
          "real_size": { "type": "string" },
          "start_commit_sha": { "type": "string" },
          "state": { "type": "string" }
        },
        "type": "object"
      },
      "MergeRequestDiffFull": {
        "description": "This feature was introduced in GitLab 8.12.",
        "properties": {
          "base_commit_sha": { "type": "string" },
          "commits": { "$ref": "#/components/schemas/RepoCommit" },
          "created_at": { "type": "string" },
          "diffs": { "$ref": "#/components/schemas/RepoDiff" },
          "head_commit_sha": { "type": "string" },
          "id": { "type": "string" },
          "merge_request_id": { "type": "string" },
          "real_size": { "type": "string" },
          "start_commit_sha": { "type": "string" },
          "state": { "type": "string" }
        },
        "type": "object"
      },
      "Milestone": {
        "description": "Update an existing project milestone",
        "properties": {
          "created_at": { "type": "string" },
          "description": { "type": "string" },
          "due_date": { "type": "string" },
          "id": { "type": "string" },
          "iid": { "type": "string" },
          "project_id": { "type": "string" },
          "start_date": { "type": "string" },
          "state": { "type": "string" },
          "title": { "type": "string" },
          "updated_at": { "type": "string" }
        },
        "type": "object"
      },
      "Namespace": {
        "description": "Get a namespaces list",
        "properties": {
          "id": { "type": "string" },
          "kind": { "type": "string" },
          "name": { "type": "string" },
          "path": { "type": "string" }
        },
        "type": "object"
      },
      "Note": {
        "description": "Delete a +noteable+ note",
        "properties": {
          "attachment": { "type": "string" },
          "author": { "$ref": "#/components/schemas/UserBasic" },
          "body": { "type": "string" },
          "created_at": { "type": "string" },
          "downvote?": { "type": "string" },
          "id": { "type": "string" },
          "noteable_id": { "type": "string" },
          "noteable_type": { "type": "string" },
          "system": { "type": "string" },
          "updated_at": { "type": "string" },
          "upvote?": { "type": "string" }
        },
        "type": "object"
      },
      "NotificationSetting": {
        "description": "This feature was introduced in GitLab 8.12",
        "properties": {
          "events": { "type": "string" },
          "level": { "type": "string" }
        },
        "type": "object"
      },
      "PersonalSnippet": {
        "description": "This feature was introduced in GitLab 8.15.",
        "properties": {
          "author": { "$ref": "#/components/schemas/UserBasic" },
          "created_at": { "type": "string" },
          "file_name": { "type": "string" },
          "id": { "type": "string" },
          "raw_url": { "type": "string" },
          "title": { "type": "string" },
          "updated_at": { "type": "string" },
          "web_url": { "type": "string" }
        },
        "type": "object"
      },
      "Pipeline": {
        "description": "This feature was introduced in GitLab 8.11.",
        "properties": {
          "before_sha": { "type": "string" },
          "committed_at": { "type": "string" },
          "coverage": { "type": "string" },
          "created_at": { "type": "string" },
          "duration": { "type": "string" },
          "finished_at": { "type": "string" },
          "id": { "type": "string" },
          "ref": { "type": "string" },
          "sha": { "type": "string" },
          "started_at": { "type": "string" },
          "status": { "type": "string" },
          "tag": { "type": "string" },
          "updated_at": { "type": "string" },
          "user": { "$ref": "#/components/schemas/UserBasic" },
          "yaml_errors": { "type": "string" }
        },
        "type": "object"
      },
      "PipelineBasic": {
        "properties": {
          "id": { "type": "string" },
          "ref": { "type": "string" },
          "sha": { "type": "string" },
          "status": { "type": "string" }
        },
        "type": "object"
      },
      "Project": {
        "description": "Unstar a project",
        "properties": {
          "archived": { "type": "string" },
          "avatar_url": { "type": "string" },
          "builds_enabled": { "type": "string" },
          "container_registry_enabled": { "type": "string" },
          "created_at": { "type": "string" },
          "creator_id": { "type": "string" },
          "default_branch": { "type": "string" },
          "description": { "type": "string" },
          "forked_from_project": {
            "$ref": "#/components/schemas/BasicProjectDetails"
          },
          "forks_count": { "type": "string" },
          "http_url_to_repo": { "type": "string" },
          "id": { "type": "string" },
          "issues_enabled": { "type": "string" },
          "last_activity_at": { "type": "string" },
          "lfs_enabled": { "type": "string" },
          "merge_requests_enabled": { "type": "string" },
          "name": { "type": "string" },
          "name_with_namespace": { "type": "string" },
          "namespace": { "$ref": "#/components/schemas/Namespace" },
          "only_allow_merge_if_all_discussions_are_resolved": {
            "type": "string"
          },
          "only_allow_merge_if_build_succeeds": { "type": "string" },
          "open_issues_count": { "type": "string" },
          "owner": { "$ref": "#/components/schemas/UserBasic" },
          "path": { "type": "string" },
          "path_with_namespace": { "type": "string" },
          "public": { "type": "string" },
          "public_builds": { "type": "string" },
          "request_access_enabled": { "type": "string" },
          "runners_token": { "type": "string" },
          "shared_runners_enabled": { "type": "string" },
          "shared_with_groups": { "type": "string" },
          "snippets_enabled": { "type": "string" },
          "ssh_url_to_repo": { "type": "string" },
          "star_count": { "type": "string" },
          "statistics": { "$ref": "#/components/schemas/ProjectStatistics" },
          "tag_list": { "type": "string" },
          "visibility_level": { "type": "string" },
          "web_url": { "type": "string" },
          "wiki_enabled": { "type": "string" }
        },
        "type": "object"
      },
      "ProjectGroupLink": {
        "description": "Share the project with a group",
        "properties": {
          "expires_at": { "type": "string" },
          "group_access": { "type": "string" },
          "group_id": { "type": "string" },
          "id": { "type": "string" },
          "project_id": { "type": "string" }
        },
        "type": "object"
      },
      "ProjectHook": {
        "description": "Deletes project hook",
        "properties": {
          "build_events": { "type": "string" },
          "created_at": { "type": "string" },
          "enable_ssl_verification": { "type": "string" },
          "id": { "type": "string" },
          "issues_events": { "type": "string" },
          "merge_requests_events": { "type": "string" },
          "note_events": { "type": "string" },
          "pipeline_events": { "type": "string" },
          "project_id": { "type": "string" },
          "push_events": { "type": "string" },
          "tag_push_events": { "type": "string" },
          "url": { "type": "string" },
          "wiki_page_events": { "type": "string" }
        },
        "type": "object"
      },
      "ProjectService": {
        "description": "Get the service settings for project",
        "properties": {
          "active": { "type": "string" },
          "build_events": { "type": "string" },
          "created_at": { "type": "string" },
          "id": { "type": "string" },
          "issues_events": { "type": "string" },
          "merge_requests_events": { "type": "string" },
          "note_events": { "type": "string" },
          "pipeline_events": { "type": "string" },
          "properties": { "type": "string" },
          "push_events": { "type": "string" },
          "tag_push_events": { "type": "string" },
          "title": { "type": "string" },
          "updated_at": { "type": "string" }
        },
        "type": "object"
      },
      "ProjectSnippet": {
        "description": "Update an existing project snippet",
        "properties": {
          "author": { "$ref": "#/components/schemas/UserBasic" },
          "created_at": { "type": "string" },
          "expires_at": { "type": "string" },
          "file_name": { "type": "string" },
          "id": { "type": "string" },
          "title": { "type": "string" },
          "updated_at": { "type": "string" },
          "web_url": { "type": "string" }
        },
        "type": "object"
      },
      "ProjectStatistics": {
        "properties": {
          "build_artifacts_size": { "type": "string" },
          "commit_count": { "type": "string" },
          "lfs_objects_size": { "type": "string" },
          "repository_size": { "type": "string" },
          "storage_size": { "type": "string" }
        },
        "type": "object"
      },
      "ProjectWithAccess": {
        "description": "Get a single project",
        "properties": {
          "archived": { "type": "string" },
          "avatar_url": { "type": "string" },
          "builds_enabled": { "type": "string" },
          "container_registry_enabled": { "type": "string" },
          "created_at": { "type": "string" },
          "creator_id": { "type": "string" },
          "default_branch": { "type": "string" },
          "description": { "type": "string" },
          "forked_from_project": {
            "$ref": "#/components/schemas/BasicProjectDetails"
          },
          "forks_count": { "type": "string" },
          "http_url_to_repo": { "type": "string" },
          "id": { "type": "string" },
          "issues_enabled": { "type": "string" },
          "last_activity_at": { "type": "string" },
          "lfs_enabled": { "type": "string" },
          "merge_requests_enabled": { "type": "string" },
          "name": { "type": "string" },
          "name_with_namespace": { "type": "string" },
          "namespace": { "$ref": "#/components/schemas/Namespace" },
          "only_allow_merge_if_all_discussions_are_resolved": {
            "type": "string"
          },
          "only_allow_merge_if_build_succeeds": { "type": "string" },
          "open_issues_count": { "type": "string" },
          "owner": { "$ref": "#/components/schemas/UserBasic" },
          "path": { "type": "string" },
          "path_with_namespace": { "type": "string" },
          "permissions": { "type": "string" },
          "public": { "type": "string" },
          "public_builds": { "type": "string" },
          "request_access_enabled": { "type": "string" },
          "runners_token": { "type": "string" },
          "shared_runners_enabled": { "type": "string" },
          "shared_with_groups": { "type": "string" },
          "snippets_enabled": { "type": "string" },
          "ssh_url_to_repo": { "type": "string" },
          "star_count": { "type": "string" },
          "statistics": { "$ref": "#/components/schemas/ProjectStatistics" },
          "tag_list": { "type": "string" },
          "visibility_level": { "type": "string" },
          "web_url": { "type": "string" },
          "wiki_enabled": { "type": "string" }
        },
        "type": "object"
      },
      "Release": {
        "description": "Update a tag's release note",
        "properties": {
          "description": { "type": "string" },
          "tag_name": { "type": "string" }
        },
        "type": "object"
      },
      "RepoBranch": {
        "description": "Create branch",
        "properties": {
          "commit": { "type": "string" },
          "developers_can_merge": { "type": "string" },
          "developers_can_push": { "type": "string" },
          "merged": { "type": "string" },
          "name": { "type": "string" },
          "protected": { "type": "string" }
        },
        "type": "object"
      },
      "RepoCommit": {
        "description": "Get the commits of a merge request",
        "properties": {
          "author_email": { "type": "string" },
          "author_name": { "type": "string" },
          "committer_email": { "type": "string" },
          "committer_name": { "type": "string" },
          "created_at": { "type": "string" },
          "id": { "type": "string" },
          "message": { "type": "string" },
          "short_id": { "type": "string" },
          "title": { "type": "string" }
        },
        "type": "object"
      },
      "RepoCommitDetail": {
        "description": "Get a specific commit of a project",
        "properties": {
          "author_email": { "type": "string" },
          "author_name": { "type": "string" },
          "authored_date": { "type": "string" },
          "committed_date": { "type": "string" },
          "committer_email": { "type": "string" },
          "committer_name": { "type": "string" },
          "created_at": { "type": "string" },
          "id": { "type": "string" },
          "message": { "type": "string" },
          "parent_ids": { "type": "string" },
          "short_id": { "type": "string" },
          "stats": { "$ref": "#/components/schemas/RepoCommitStats" },
          "status": { "type": "string" },
          "title": { "type": "string" }
        },
        "type": "object"
      },
      "RepoCommitStats": {
        "properties": {
          "additions": { "type": "string" },
          "deletions": { "type": "string" },
          "total": { "type": "string" }
        },
        "type": "object"
      },
      "RepoDiff": {
        "properties": {
          "a_mode": { "type": "string" },
          "b_mode": { "type": "string" },
          "deleted_file": { "type": "string" },
          "diff": { "type": "string" },
          "new_file": { "type": "string" },
          "new_path": { "type": "string" },
          "old_path": { "type": "string" },
          "renamed_file": { "type": "string" }
        },
        "type": "object"
      },
      "RepoLicense": {
        "description": "This feature was introduced in GitLab 8.7.",
        "properties": {
          "conditions": { "type": "string" },
          "content": { "type": "string" },
          "description": { "type": "string" },
          "html_url": { "type": "string" },
          "key": { "type": "string" },
          "limitations": { "type": "string" },
          "name": { "type": "string" },
          "nickname": { "type": "string" },
          "permissions": { "type": "string" },
          "popular": { "type": "string" },
          "source_url": { "type": "string" }
        },
        "type": "object"
      },
      "RepoTag": {
        "description": "Create a new repository tag",
        "properties": {
          "commit": { "type": "string" },
          "message": { "type": "string" },
          "name": { "type": "string" },
          "release": { "$ref": "#/components/schemas/Release" }
        },
        "type": "object"
      },
      "RepoTreeObject": {
        "description": "Get a project repository tree",
        "properties": {
          "id": { "type": "string" },
          "mode": { "type": "string" },
          "name": { "type": "string" },
          "path": { "type": "string" },
          "type": { "type": "string" }
        },
        "type": "object"
      },
      "Runner": {
        "description": "Remove a runner",
        "properties": {
          "active": { "type": "string" },
          "description": { "type": "string" },
          "id": { "type": "string" },
          "is_shared": { "type": "string" },
          "name": { "type": "string" }
        },
        "type": "object"
      },
      "RunnerDetails": {
        "description": "Update runner's details",
        "properties": {
          "active": { "type": "string" },
          "architecture": { "type": "string" },
          "contacted_at": { "type": "string" },
          "description": { "type": "string" },
          "id": { "type": "string" },
          "is_shared": { "type": "string" },
          "locked": { "type": "string" },
          "name": { "type": "string" },
          "platform": { "type": "string" },
          "projects": { "$ref": "#/components/schemas/BasicProjectDetails" },
          "revision": { "type": "string" },
          "run_untagged": { "type": "string" },
          "tag_list": { "type": "string" },
          "token": { "type": "string" },
          "version": { "type": "string" }
        },
        "type": "object"
      },
      "SSHKey": {
        "description": "Delete an SSH key from the currently authenticated user",
        "properties": {
          "can_push": { "type": "string" },
          "created_at": { "type": "string" },
          "id": { "type": "string" },
          "key": { "type": "string" },
          "title": { "type": "string" }
        },
        "type": "object"
      },
      "SSHKeyWithUser": {
        "description": "Get single ssh key by id. Only available to admin users",
        "properties": {
          "can_push": { "type": "string" },
          "created_at": { "type": "string" },
          "id": { "type": "string" },
          "key": { "type": "string" },
          "title": { "type": "string" },
          "user": { "$ref": "#/components/schemas/UserPublic" }
        },
        "type": "object"
      },
      "Template": {
        "description": "This feature was introduced in GitLab 8.15. This endpoint is deprecated and will be removed in GitLab 9.0.",
        "properties": {
          "content": { "type": "string" },
          "name": { "type": "string" }
        },
        "type": "object"
      },
      "TemplatesList": {
        "description": "This feature was introduced in GitLab 8.15. This endpoint is deprecated and will be removed in GitLab 9.0.",
        "properties": { "name": { "type": "string" } },
        "type": "object"
      },
      "Todo": {
        "description": "Mark a todo as done",
        "properties": {
          "action_name": { "type": "string" },
          "author": { "$ref": "#/components/schemas/UserBasic" },
          "body": { "type": "string" },
          "created_at": { "type": "string" },
          "id": { "type": "string" },
          "project": { "$ref": "#/components/schemas/BasicProjectDetails" },
          "state": { "type": "string" },
          "target": { "type": "string" },
          "target_type": { "type": "string" },
          "target_url": { "type": "string" }
        },
        "type": "object"
      },
      "Trigger": {
        "description": "Delete a trigger",
        "properties": {
          "created_at": { "type": "string" },
          "deleted_at": { "type": "string" },
          "last_used": { "type": "string" },
          "token": { "type": "string" },
          "updated_at": { "type": "string" }
        },
        "type": "object"
      },
      "TriggerRequest": {
        "description": "Trigger a GitLab project build",
        "properties": {
          "id": { "type": "string" },
          "variables": { "type": "string" }
        },
        "type": "object"
      },
      "User": {
        "properties": {
          "avatar_url": { "type": "string" },
          "bio": { "type": "string" },
          "created_at": { "type": "string" },
          "id": { "type": "string" },
          "is_admin": { "type": "string" },
          "linkedin": { "type": "string" },
          "location": { "type": "string" },
          "name": { "type": "string" },
          "organization": { "type": "string" },
          "skype": { "type": "string" },
          "state": { "type": "string" },
          "twitter": { "type": "string" },
          "username": { "type": "string" },
          "web_url": { "type": "string" },
          "website_url": { "type": "string" }
        },
        "type": "object"
      },
      "UserBasic": {
        "description": "Get a single user",
        "properties": {
          "avatar_url": { "type": "string" },
          "id": { "type": "string" },
          "name": { "type": "string" },
          "state": { "type": "string" },
          "username": { "type": "string" },
          "web_url": { "type": "string" }
        },
        "type": "object"
      },
      "UserPublic": {
        "description": "Get the currently authenticated user",
        "properties": {
          "avatar_url": { "type": "string" },
          "bio": { "type": "string" },
          "can_create_group": { "type": "string" },
          "can_create_project": { "type": "string" },
          "color_scheme_id": { "type": "string" },
          "confirmed_at": { "type": "string" },
          "created_at": { "type": "string" },
          "current_sign_in_at": { "type": "string" },
          "email": { "type": "string" },
          "external": { "type": "string" },
          "id": { "type": "string" },
          "identities": { "$ref": "#/components/schemas/Identity" },
          "is_admin": { "type": "string" },
          "last_sign_in_at": { "type": "string" },
          "linkedin": { "type": "string" },
          "location": { "type": "string" },
          "name": { "type": "string" },
          "organization": { "type": "string" },
          "projects_limit": { "type": "string" },
          "skype": { "type": "string" },
          "state": { "type": "string" },
          "theme_id": { "type": "string" },
          "twitter": { "type": "string" },
          "two_factor_enabled": { "type": "string" },
          "username": { "type": "string" },
          "web_url": { "type": "string" },
          "website_url": { "type": "string" }
        },
        "type": "object"
      },
      "UserWithPrivateToken": {
        "description": "Login to get token",
        "properties": {
          "avatar_url": { "type": "string" },
          "bio": { "type": "string" },
          "can_create_group": { "type": "string" },
          "can_create_project": { "type": "string" },
          "color_scheme_id": { "type": "string" },
          "confirmed_at": { "type": "string" },
          "created_at": { "type": "string" },
          "current_sign_in_at": { "type": "string" },
          "email": { "type": "string" },
          "external": { "type": "string" },
          "id": { "type": "string" },
          "identities": { "$ref": "#/components/schemas/Identity" },
          "is_admin": { "type": "string" },
          "last_sign_in_at": { "type": "string" },
          "linkedin": { "type": "string" },
          "location": { "type": "string" },
          "name": { "type": "string" },
          "organization": { "type": "string" },
          "private_token": { "type": "string" },
          "projects_limit": { "type": "string" },
          "skype": { "type": "string" },
          "state": { "type": "string" },
          "theme_id": { "type": "string" },
          "twitter": { "type": "string" },
          "two_factor_enabled": { "type": "string" },
          "username": { "type": "string" },
          "web_url": { "type": "string" },
          "website_url": { "type": "string" }
        },
        "type": "object"
      },
      "Variable": {
        "description": "Delete an existing variable from a project",
        "properties": {
          "key": { "type": "string" },
          "value": { "type": "string" }
        },
        "type": "object"
      }
    }
  }
}
