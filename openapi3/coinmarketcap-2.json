{
  "openapi": "3.0.0",
  "info": {
    "title": "CoinMarketCap",
    "version": "2",
    "description": "# Introduction\nThe CoinMarketCap API is a suite of high-performance RESTful JSON endpoints that are specifically designed to meet the mission-critical demands of application developers, data scientists, and enterprise business platforms.\n\nThis API reference includes all technical documentation developers need to integrate third-party applications and platforms. Additional answers to common questions can be found in the CoinMarketCap API FAQ.\n\nQuick Start Guide\n\nFor developers eager to hit the ground running with the CoinMarketCap API here are a few quick steps to make your first call with the API.\n\nSign up for a free Developer Portal account. You can sign up at pro.coinmarketcap.com - This is our live production environment with the latest market data. Select the free Basic plan if it meets your needs or upgrade to a paid tier.\n\nCopy your API Key. Once you sign up you'll land on your Developer Portal account dashboard. Copy your API from the API Key box in the top left panel.\n\nMake a test call using your key. You may use the code examples provided below to make a test call with your programming language of choice. This example fetches all active cryptocurrencies by market cap and return market values in USD.\nBe sure to replace the API Key in sample code with your own and use API domain pro-api.coinmarketcap.com or use the test API Key b54bcf4d-1bca-4e8e-9a24-22ff2c3d462c for sandbox-api.coinmarketcap.com testing with our sandbox environment. Please note that our sandbox api has mock data and should not be used in your application.\n\nImplement your application. Now that you've confirmed your API Key is working, get familiar with the API by reading the rest of this API Reference and commence building your application!\n\n\\*Note: Making HTTP requests on the client side with Javascript is currently prohibited through CORS configuration. This is to protect your API Key which should not be visible to users of your application so your API Key is not stolen. Secure your API Key by routing calls through your own backend service.\\*\n\ncurl -H \"X-CMC_PRO_API_KEY: b54bcf4d-1bca-4e8e-9a24-22ff2c3d462c\" -H \"Accept: application/json\" -d \"start=1&limit=5000&convert=USD\" -G https&#x3A;//sandbox-api.coinmarketcap.com/v1/cryptocurrency/listings/latest\n\nfrom requests import Request, Session\nfrom requests.exceptions import ConnectionError, Timeout, TooManyRedirects\nimport json\n\nurl = 'https&#x3A;//sandbox-api.coinmarketcap.com/v1/cryptocurrency/listings/latest'\nparameters = {\n  'start':'1',\n  'limit':'5000',\n  'convert':'USD'\n}\nheaders = {\n  'Accepts': 'application/json',\n  'X-CMC_PRO_API_KEY': 'b54bcf4d-1bca-4e8e-9a24-22ff2c3d462c',\n}\n\nsession = Session()\nsession.headers.update(headers)\n\ntry:\n  response = session.get(url, params=parameters)\n  data = json.loads(response.text)\n  print(data)\nexcept (ConnectionError, Timeout, TooManyRedirects) as e:\n  print(e)\n\n/\\*\\* \n\nThis example uses the Apache HTTPComponents library. \n\\*/\n\nimport org.apache.http.HttpEntity;\nimport org.apache.http.HttpHeaders;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.methods.CloseableHttpResponse;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.utils.URIBuilder;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClients;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.util.EntityUtils;\n\nimport java.io.IOException;\nimport java.net.URISyntaxException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class JavaExample {\n\n  private static String apiKey = \"b54bcf4d-1bca-4e8e-9a24-22ff2c3d462c\";\n\n  public static void main(String\\[] args) {\n    String uri = \"https&#x3A;//sandbox-api.coinmarketcap.com/v1/cryptocurrency/listings/latest\";\n    List paratmers = new ArrayList();\n    paratmers.add(new BasicNameValuePair(\"start\",\"1\"));\n    paratmers.add(new BasicNameValuePair(\"limit\",\"5000\"));\n    paratmers.add(new BasicNameValuePair(\"convert\",\"USD\"));\n\n  }\n\n  public static String makeAPICall(String uri, List parameters)\n      throws URISyntaxException, IOException {\n    String response_content = \"\";\n\n  }\n\n}\n\npackage main\n\nimport (\n  \"fmt\"\n  \"io/ioutil\"\n  \"log\"\n  \"net/http\"\n  \"net/url\"\n  \"os\"\n)\n\nfunc main() {\n  client := &http.Client{}\n  req, err := http.NewRequest(\"GET\",\"https&#x3A;//sandbox-api.coinmarketcap.com/v1/cryptocurrency/listings/latest\", nil)\n  if err != nil {\n    log.Print(err)\n    os.Exit(1)\n  }\n\n  q := url.Values{}\n  q.Add(\"start\", \"1\")\n  q.Add(\"limit\", \"5000\")\n  q.Add(\"convert\", \"USD\")\n\n  req.Header.Set(\"Accepts\", \"application/json\")\n  req.Header.Add(\"X-CMC_PRO_API_KEY\", \"b54bcf4d-1bca-4e8e-9a24-22ff2c3d462c\")\n  req.URL.RawQuery = q.Encode()\n\n  resp, err := client.Do(req);\n  if err != nil {\n    fmt.Println(\"Error sending request to server\")\n    os.Exit(1)\n  }\n  fmt.Println(resp.Status);\n  respBody, \\_ := ioutil.ReadAll(resp.Body)\n  fmt.Println(string(respBody));\n\n}\n\n{\n  \"data\" : {\n    ...\n  },\n  \"status\": {\n    \"timestamp\": \"2018-06-06T07:52:27.273Z\",\n    \"error_code\": 400,\n    \"error_message\": \"Invalid value for \\\\\"id\\\\\"\",\n    \"elapsed\": 0,\n    \"credit_count\": 0\n  }\n}\n\n\"data\" : {\n    \"BTC\" : {\n      ...\n    },\n    \"ETH\" : {\n      ...\n    }\n}\n\n\"data\" : {\n    \"1\" : {\n      ...\n    },\n    \"1027\" : {\n      ...\n    }\n}",
    "contact": {
      "email": "api@coinmarketcap.com"
    },
    "termsOfService": "https://coinmarketcap.com/terms/",
    "x-categories": ["exchanges"]
  },
  "paths": {
    "/v1/cryptocurrency/airdrop": {
      "get": {
        "summary": "Airdrop",
        "operationId": "getV1CryptocurrencyAirdrop",
        "description": "Returns information about a single airdrop available on CoinMarketCap. Includes the cryptocurrency metadata. \n\n  **This endpoint is available on the following <a href=\"https://coinmarketcap.com/api/features\" target=\"_blank\">API plans</a>:**\n  - Hobbyist\n  - Startup\n  - Standard\n  - Professional\n  - Enterprise\n\n**Cache / Update frequency:** Data is updated only as needed, every 30 seconds.  \n**Plan credit use:** 1 API call credit per request no matter query size.  \n**CMC equivalent pages:** Our free airdrops page [coinmarketcap.com/airdrop/](https://coinmarketcap.com/airdrop/).",
        "parameters": [
          {
            "description": "Airdrop Unique ID. This can be found using the Airdrops API.",
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": ["cryptocurrency"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Airdrop_-_Response_Model"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_400_Error_Object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_401_Error_Object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_403_Error_Object"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_429_Error_Object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_500_Error_Object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/cryptocurrency/airdrops": {
      "get": {
        "x-triggerName": "New Airdrop",
        "summary": "Airdrops",
        "operationId": "getV1CryptocurrencyAirdrops",
        "description": "Returns a list of past, present, or future airdrops which have run on CoinMarketCap.\n\n  **This endpoint is available on the following <a href=\"https://coinmarketcap.com/api/features\" target=\"_blank\">API plans</a>:**\n  - Hobbyist\n  - Startup\n  - Standard\n  - Professional\n  - Enterprise\n\n**Cache / Update frequency:** Data is updated only as needed, every 30 seconds.  \n**Plan credit use:** 1 API call credit per request no matter query size.  \n**CMC equivalent pages:** Our free airdrops page [coinmarketcap.com/airdrop/](https://coinmarketcap.com/airdrop/).",
        "parameters": [
          {
            "description": "Optionally offset the start (1-based index) of the paginated list of items to return.",
            "name": "start",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "description": "Optionally specify the number of results to return. Use this parameter and the \"start\" parameter to determine your own pagination size.",
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 5000,
              "default": 100
            }
          },
          {
            "description": "What status of airdrops.",
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["ENDED", "ONGOING", "UPCOMING"],
              "default": "ONGOING"
            }
          },
          {
            "description": "Filtered airdrops by one cryptocurrency CoinMarketCap IDs. Example: 1",
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\d*$"
            }
          },
          {
            "description": "Alternatively filter airdrops by a cryptocurrency slug. Example: \"bitcoin\"",
            "name": "slug",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-z-]*$"
            }
          },
          {
            "description": "Alternatively filter airdrops one cryptocurrency symbol. Example: \"BTC\".",
            "name": "symbol",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-]*$"
            }
          }
        ],
        "tags": ["cryptocurrency"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Airdrops_-_Response_Model"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_400_Error_Object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_401_Error_Object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_403_Error_Object"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_429_Error_Object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_500_Error_Object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/cryptocurrency/categories": {
      "get": {
        "x-actionOnly": true,
        "summary": "Categories",
        "operationId": "getV1CryptocurrencyCategories",
        "description": "Returns information about all coin categories available on CoinMarketCap. Includes a paginated list of cryptocurrency quotes and metadata from each category.\n\n  **This endpoint is available on the following <a href=\"https://coinmarketcap.com/api/features\" target=\"_blank\">API plans</a>:**\n  - Free\n  - Hobbyist\n  - Startup\n  - Standard\n  - Professional\n  - Enterprise\n\n**Cache / Update frequency:** Data is updated only as needed, every 30 seconds.  \n**Plan credit use:** 1 API call credit per request + 1 call credit per 200 cryptocurrencies returned (rounded up) and 1 call credit per `convert` option beyond the first.  \n**CMC equivalent pages:** Our free airdrops page [coinmarketcap.com/cryptocurrency-category/](https://coinmarketcap.com/cryptocurrency-category/).",
        "parameters": [
          {
            "description": "Optionally offset the start (1-based index) of the paginated list of items to return.",
            "name": "start",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "description": "Optionally specify the number of results to return. Use this parameter and the \"start\" parameter to determine your own pagination size.",
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 5000
            }
          },
          {
            "description": "Filtered categories by one or more comma-separated cryptocurrency CoinMarketCap IDs. Example: 1,2",
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\d+(?:,\\d+)*$"
            }
          },
          {
            "description": "Alternatively filter categories by a comma-separated list of cryptocurrency slugs. Example: \"bitcoin,ethereum\"",
            "name": "slug",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-z-]+(?:,[0-9a-z-]+)*$"
            }
          },
          {
            "description": "Alternatively filter categories one or more comma-separated cryptocurrency symbols. Example: \"BTC,ETH\".",
            "name": "symbol",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-,]+(?:,[0-9A-Za-z$@\\-]+)*$"
            }
          }
        ],
        "tags": ["cryptocurrency"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Categories_-_Response_Model"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_400_Error_Object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_401_Error_Object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_403_Error_Object"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_429_Error_Object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_500_Error_Object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/cryptocurrency/category": {
      "get": {
        "summary": "Category",
        "operationId": "getV1CryptocurrencyCategory",
        "description": "Returns information about a single coin category available on CoinMarketCap. Includes a paginated list of the cryptocurrency quotes and metadata for the category.\n\n  **This endpoint is available on the following <a href=\"https://coinmarketcap.com/api/features\" target=\"_blank\">API plans</a>:**\n  - Free\n  - Hobbyist\n  - Startup\n  - Standard\n  - Professional\n  - Enterprise\n\n**Cache / Update frequency:** Data is updated only as needed, every 30 seconds.  \n**Plan credit use:** 1 API call credit per request + 1 call credit per 200 cryptocurrencies returned (rounded up) and 1 call credit per `convert` option beyond the first.  \n**CMC equivalent pages:** Our Cryptocurrency Category page [coinmarketcap.com/cryptocurrency-category/](https://coinmarketcap.com/cryptocurrency-category/).",
        "parameters": [
          {
            "description": "The Category ID. This can be found using the Categories API.",
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Optionally offset the start (1-based index) of the paginated list of coins to return.",
            "name": "start",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "description": "Optionally specify the number of coins to return. Use this parameter and the \"start\" parameter to determine your own pagination size.",
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 1000,
              "default": 100
            }
          },
          {
            "description": "Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \"quote\" object.",
            "name": "convert",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-,]+(?:,[0-9A-Za-z$@\\-]+)*$"
            }
          },
          {
            "description": "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to `convert` outside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used when `convert` is used.",
            "name": "convert_id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\d+(?:,\\d+)*$"
            }
          }
        ],
        "tags": ["cryptocurrency"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Category_-_Response_Model"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_400_Error_Object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_401_Error_Object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_403_Error_Object"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_429_Error_Object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_500_Error_Object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/cryptocurrency/info": {
      "get": {
        "summary": "Metadata v1 (deprecated)",
        "operationId": "getV1CryptocurrencyInfo",
        "description": "Returns all static metadata available for one or more cryptocurrencies. This information includes details like logo, description, official website URL, social links, and links to a cryptocurrency's technical documentation.\n\n\n**This endpoint is available on the following <a href=\"https://coinmarketcap.com/api/features\" target=\"_blank\">API plans</a>:**\n- Basic\n- Startup\n- Hobbyist\n- Standard\n- Professional\n- Enterprise\n\n**Cache / Update frequency:** Static data is updated only as needed, every 30 seconds.  \n**Plan credit use:** 1 call credit per 100 cryptocurrencies returned (rounded up).  \n**CMC equivalent pages:** Cryptocurrency detail page metadata like [coinmarketcap.com/currencies/bitcoin/](https://coinmarketcap.com/currencies/bitcoin/).  ",
        "parameters": [
          {
            "description": "One or more comma-separated CoinMarketCap cryptocurrency IDs. Example: \"1,2\"",
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\d+(?:,\\d+)*$"
            }
          },
          {
            "description": "Alternatively pass a comma-separated list of cryptocurrency slugs. Example: \"bitcoin,ethereum\"",
            "name": "slug",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-z-]+(?:,[0-9a-z-]+)*$"
            }
          },
          {
            "description": "Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \"BTC,ETH\". At least one \"id\" *or* \"slug\" *or* \"symbol\" is required for this request.",
            "name": "symbol",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-,]+(?:,[0-9A-Za-z$@\\-]+)*$"
            }
          },
          {
            "description": "Alternatively pass in a contract address. Example: \"0xc40af1e4fecfa05ce6bab79dcd8b373d2e436c4e\"",
            "name": "address",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Optionally specify a comma-separated list of supplemental data fields to return. Pass `urls,logo,description,tags,platform,date_added,notice,status` to include all auxiliary fields.",
            "name": "aux",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(urls|logo|description|tags|platform|date_added|notice|status)+(?:,(urls|logo|description|tags|platform|date_added|notice|status)+)*$",
              "default": "urls,logo,description,tags,platform,date_added,notice"
            }
          }
        ],
        "tags": ["deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Cryptocurrencies_Info_-_Response_Model"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_400_Error_Object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_401_Error_Object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_403_Error_Object"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_429_Error_Object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_500_Error_Object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/cryptocurrency/map": {
      "get": {
        "x-actionOnly": true,
        "summary": "CoinMarketCap ID Map",
        "operationId": "getV1CryptocurrencyMap",
        "description": "Returns a mapping of all cryptocurrencies to unique CoinMarketCap `id`s. Per our <a href=\"#section/Best-Practices\" target=\"_blank\">Best Practices</a> we recommend utilizing CMC ID instead of cryptocurrency symbols to securely identify cryptocurrencies with our other endpoints and in your own application logic.  Each cryptocurrency returned includes typical identifiers such as `name`, `symbol`, and `token_address` for flexible mapping to `id`.   \n  \n  By default this endpoint returns cryptocurrencies that have actively tracked markets on supported exchanges. You may receive a map of all inactive cryptocurrencies by passing `listing_status=inactive`. You may also receive a map of registered cryptocurrency projects that are listed but do not yet meet methodology requirements to have tracked markets via `listing_status=untracked`. Please review our <a target=\"_blank\" href=\"https://coinmarketcap.com/methodology/\">methodology documentation</a> for additional details on listing states. \n    \n  Cryptocurrencies returned include `first_historical_data` and `last_historical_data` timestamps to conveniently reference historical date ranges available to query with historical time-series data endpoints. You may also use the `aux` parameter to only include properties you require to slim down the payload if calling this endpoint frequently. \n\n  **This endpoint is available on the following <a href=\"https://coinmarketcap.com/api/features\" target=\"_blank\">API plans</a>:**\n  - Basic\n  - Hobbyist\n  - Startup\n  - Standard\n  - Professional\n  - Enterprise\n\n**Cache / Update frequency:** Mapping data is updated only as needed, every 30 seconds.  \n**Plan credit use:** 1 API call credit per request no matter query size.  \n**CMC equivalent pages:** No equivalent, this data is only available via API.",
        "parameters": [
          {
            "description": "Only active cryptocurrencies are returned by default. Pass `inactive` to get a list of cryptocurrencies that are no longer active. Pass `untracked` to get a list of cryptocurrencies that are listed but do not yet meet methodology requirements to have tracked markets available. You may pass one or more comma-separated values.",
            "name": "listing_status",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(active|inactive|untracked)+(?:,(active|inactive|untracked)+)*$",
              "default": "active"
            }
          },
          {
            "description": "Optionally offset the start (1-based index) of the paginated list of items to return.",
            "name": "start",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "description": "Optionally specify the number of results to return. Use this parameter and the \"start\" parameter to determine your own pagination size.",
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 5000
            }
          },
          {
            "description": "What field to sort the list of cryptocurrencies by.",
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["cmc_rank", "id"],
              "default": "id"
            }
          },
          {
            "description": "Optionally pass a comma-separated list of cryptocurrency symbols to return CoinMarketCap IDs for. If this option is passed, other options will be ignored.",
            "name": "symbol",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-,]+(?:,[0-9A-Za-z$@\\-]+)*$"
            }
          },
          {
            "description": "Optionally specify a comma-separated list of supplemental data fields to return. Pass `platform,first_historical_data,last_historical_data,is_active,status` to include all auxiliary fields.",
            "name": "aux",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(platform|first_historical_data|last_historical_data|is_active|status)+(?:,(platform|first_historical_data|last_historical_data|is_active|status)+)*$",
              "default": "platform,first_historical_data,last_historical_data,is_active"
            }
          }
        ],
        "tags": ["cryptocurrency"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Cryptocurrency_Map_-_Response_Model"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_400_Error_Object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_401_Error_Object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_403_Error_Object"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_429_Error_Object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_500_Error_Object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/exchange/info": {
      "get": {
        "summary": "Metadata",
        "operationId": "getV1ExchangeInfo",
        "description": "Returns all static metadata for one or more exchanges. This information includes details like launch date, logo, official website URL, social links, and market fee documentation URL.\n\n  **This endpoint is available on the following <a href=\"https://coinmarketcap.com/api/features\" target=\"_blank\">API plans</a>:**\n  - Basic\n  - Hobbyist\n  - Startup\n  - Standard\n  - Professional\n  - Enterprise\n\n**Cache / Update frequency:** Static data is updated only as needed, every 30 seconds.  \n**Plan credit use:** 1 call credit per 100 exchanges returned (rounded up).  \n**CMC equivalent pages:** Exchange detail page metadata like [coinmarketcap.com/exchanges/binance/](https://coinmarketcap.com/exchanges/binance/).  ",
        "parameters": [
          {
            "description": "One or more comma-separated CoinMarketCap cryptocurrency exchange ids. Example: \"1,2\"",
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\d+(?:,\\d+)*$"
            }
          },
          {
            "description": "Alternatively, one or more comma-separated exchange names in URL friendly shorthand \"slug\" format (all lowercase, spaces replaced with hyphens). Example: \"binance,gdax\". At least one \"id\" *or* \"slug\" is required.",
            "name": "slug",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-z-]+(?:,[0-9a-z-]+)*$"
            }
          },
          {
            "description": "Optionally specify a comma-separated list of supplemental data fields to return. Pass `urls,logo,description,date_launched,notice,status` to include all auxiliary fields.",
            "name": "aux",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(urls|logo|description|date_launched|notice|status)+(?:,(urls|logo|description|date_launched|notice|status)+)*$",
              "default": "urls,logo,description,date_launched,notice"
            }
          }
        ],
        "tags": ["exchange"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Exchanges_Info_-_Response_Model"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_400_Error_Object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_401_Error_Object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_403_Error_Object"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_429_Error_Object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_500_Error_Object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/exchange/map": {
      "get": {
        "x-actionOnly": true,
        "summary": "CoinMarketCap ID Map",
        "operationId": "getV1ExchangeMap",
        "description": "Returns a paginated list of all active cryptocurrency exchanges by CoinMarketCap ID. We recommend using this convenience endpoint to lookup and utilize our unique exchange `id` across all endpoints as typical exchange identifiers may change over time. As a convenience you may pass a comma-separated list of exchanges by `slug` to filter this list to only those you require or the `aux` parameter to slim down the payload.\n\nBy default this endpoint returns exchanges that have at least 1 actively tracked market. You may receive a map of all inactive cryptocurrencies by passing `listing_status=inactive`. You may also receive a map of registered exchanges that are listed but do not yet meet methodology requirements to have tracked markets available via `listing_status=untracked`. Please review **(3) Listing Tiers** in our <a target=\"_blank\" href=\"https://coinmarketcap.com/methodology/\">methodology documentation</a> for additional details on listing states. \n\n**This endpoint is available on the following <a href=\"https://coinmarketcap.com/api/features\" target=\"_blank\">API plans</a>:**\n  - Basic\n  - Hobbyist\n  - Startup\n  - Standard\n  - Professional\n  - Enterprise\n\n**Cache / Update frequency:** Mapping data is updated only as needed, every 30 seconds.  \n**Plan credit use:** 1 call credit per call.  \n**CMC equivalent pages:** No equivalent, this data is only available via API.  ",
        "parameters": [
          {
            "description": "Only active exchanges are returned by default. Pass `inactive` to get a list of exchanges that are no longer active. Pass `untracked` to get a list of exchanges that are registered but do not currently meet methodology requirements to have active markets tracked. You may pass one or more comma-separated values.",
            "name": "listing_status",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(active|inactive|untracked)+(?:,(active|inactive|untracked)+)*$",
              "default": "active"
            }
          },
          {
            "description": "Optionally pass a comma-separated list of exchange slugs (lowercase URL friendly shorthand name with spaces replaced with dashes) to return CoinMarketCap IDs for. If this option is passed, other options will be ignored.",
            "name": "slug",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-z-]+(?:,[0-9a-z-]+)*$"
            }
          },
          {
            "description": "Optionally offset the start (1-based index) of the paginated list of items to return.",
            "name": "start",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "description": "Optionally specify the number of results to return. Use this parameter and the \"start\" parameter to determine your own pagination size.",
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 5000
            }
          },
          {
            "description": "What field to sort the list of exchanges by.",
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["volume_24h", "id"],
              "default": "id"
            }
          },
          {
            "description": "Optionally specify a comma-separated list of supplemental data fields to return. Pass `first_historical_data,last_historical_data,is_active,status` to include all auxiliary fields.",
            "name": "aux",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(first_historical_data|last_historical_data|is_active|status)+(?:,(first_historical_data|last_historical_data|is_active|status)+)*$",
              "default": "first_historical_data,last_historical_data,is_active"
            }
          },
          {
            "description": "Optionally include one fiat or cryptocurrency IDs to filter market pairs by. For example `?crypto_id=1` would only return exchanges that have BTC.",
            "name": "crypto_id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\d*$"
            }
          }
        ],
        "tags": ["exchange"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Exchange_Map_-_Response_Model"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_400_Error_Object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_401_Error_Object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_403_Error_Object"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_429_Error_Object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_500_Error_Object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/fiat/map": {
      "get": {
        "x-actionOnly": true,
        "summary": "CoinMarketCap ID Map",
        "operationId": "getV1FiatMap",
        "description": "Returns a mapping of all supported fiat currencies to unique CoinMarketCap ids. Per our Best Practices we recommend utilizing CMC ID instead of currency symbols to securely identify assets with our other endpoints and in your own application logic. \n\n  **This endpoint is available on the following <a href=\"https://coinmarketcap.com/api/features\" target=\"_blank\">API plans</a>:**\n  - Basic\n  - Hobbyist\n  - Startup\n  - Standard\n  - Professional\n  - Enterprise\n\n**Cache / Update frequency:** Mapping data is updated only as needed, every 30 seconds.  \n**Plan credit use:** 1 API call credit per request no matter query size.  \n**CMC equivalent pages:** No equivalent, this data is only available via API.",
        "parameters": [
          {
            "description": "Optionally offset the start (1-based index) of the paginated list of items to return.",
            "name": "start",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "description": "Optionally specify the number of results to return. Use this parameter and the \"start\" parameter to determine your own pagination size.",
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 5000
            }
          },
          {
            "description": "What field to sort the list by.",
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["name", "id"],
              "default": "id"
            }
          },
          {
            "description": "Pass `true` to include precious metals.",
            "name": "include_metals",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": ["fiat"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Fiat_Map_-_Response_Model"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_400_Error_Object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_401_Error_Object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_403_Error_Object"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_429_Error_Object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_500_Error_Object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/key/info": {
      "get": {
        "summary": "Key Info",
        "operationId": "getV1KeyInfo",
        "description": "Returns API key details and usage stats. This endpoint can be used to programmatically monitor your key usage compared to the rate limit and daily/monthly credit limits available to your API plan. You may use the Developer Portal's account dashboard as an alternative to this endpoint.\n\n  **This endpoint is available on the following <a href=\"https://coinmarketcap.com/api/features\" target=\"_blank\">API plans</a>:**\n  - Basic\n  - Hobbyist\n  - Startup\n  - Standard\n  - Professional\n  - Enterprise\n\n  **Cache / Update frequency:** No cache, this endpoint updates as requests are made with your key.  \n  **Plan credit use:** No API credit cost. Requests to this endpoint do contribute to your minute based rate limit however.  \n  **CMC equivalent pages:** Our Developer Portal dashboard for your API Key at [pro.coinmarketcap.com/account](https://pro.coinmarketcap.com/account).",
        "tags": ["key"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Account_Info_-_Response_Model"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_400_Error_Object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_401_Error_Object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_403_Error_Object"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_429_Error_Object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_500_Error_Object"
                }
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/v1/tools/price-conversion": {
      "get": {
        "summary": "Price Conversion v1 (deprecated)",
        "operationId": "getV1ToolsPriceconversion",
        "description": "Convert an amount of one cryptocurrency or fiat currency into one or more different currencies utilizing the latest market rate for each currency. You may optionally pass a historical timestamp as `time` to convert values based on historical rates (as your API plan supports). \n  \n  \n**Technical Notes**\n- Latest market rate conversions are accurate to 1 minute of specificity. Historical conversions are accurate to 1 minute of specificity outside of non-USD fiat conversions which have 5 minute specificity. \n- You may reference a current list of all supported cryptocurrencies via the <a href=\"/api/v1/#section/Standards-and-Conventions\" target=\"_blank\">cryptocurrency/map</a> endpoint. This endpoint also returns the supported date ranges for historical conversions via the `first_historical_data` and `last_historical_data` properties.   \n- Conversions are supported in 93 different fiat currencies and 4 precious metals <a href=\"/api/v1/#section/Standards-and-Conventions\" target=\"_blank\">as outlined here</a>. Historical fiat conversions are supported as far back as 2013-04-28.\n- A `last_updated` timestamp is included for both your source currency and each conversion currency. This is the timestamp of the closest market rate record referenced for each currency during the conversion.  \n\n**This endpoint is available on the following <a href=\"https://coinmarketcap.com/api/features\" target=\"_blank\">API plans</a>:**\n- Basic (Latest market price conversions)\n- Hobbyist (Latest market price conversions + 1 month historical)\n- Startup (Latest market price conversions + 1 month historical)\n- Standard (Latest market price conversions + 3 months historical)\n- Professional (Latest market price conversions + 12 months historical)\n- Enterprise (Latest market price conversions + up to 6 years historical)\n\n**Cache / Update frequency:** Every 60 seconds for the lastest cryptocurrency and fiat currency rates.    \n**Plan credit use:** 1 call credit per call and 1 call credit per `convert` option beyond the first.  \n**CMC equivalent pages:** Our cryptocurrency conversion page at [coinmarketcap.com/converter/](https://coinmarketcap.com/converter/).  ",
        "parameters": [
          {
            "description": "An amount of currency to convert. Example: 10.43",
            "name": "amount",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number",
              "minimum": 1e-8,
              "maximum": 1000000000000
            }
          },
          {
            "description": "The CoinMarketCap currency ID of the base cryptocurrency or fiat to convert from. Example: \"1\"",
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\d*$"
            }
          },
          {
            "description": "Alternatively the currency symbol of the base cryptocurrency or fiat to convert from. Example: \"BTC\". One \"id\" *or* \"symbol\" is required.",
            "name": "symbol",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-]*$"
            }
          },
          {
            "description": "Optional timestamp (Unix or ISO 8601) to reference historical pricing during conversion. If not passed, the current time will be used. If passed, we'll reference the closest historic values available for this conversion.",
            "name": "time",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Pass up to 120 comma-separated fiat or cryptocurrency symbols to convert the source amount to.",
            "name": "convert",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-,]+(?:,[0-9A-Za-z$@\\-]+)*$"
            }
          },
          {
            "description": "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to `convert` outside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used when `convert` is used.",
            "name": "convert_id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\d+(?:,\\d+)*$"
            }
          }
        ],
        "tags": ["deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Tools_Price_Conversion_-_Response_Model"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_400_Error_Object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_401_Error_Object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_403_Error_Object"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_429_Error_Object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_500_Error_Object"
                }
              }
            }
          }
        }
      }
    },
    "/v2/cryptocurrency/info": {
      "get": {
        "summary": "Metadata v2",
        "operationId": "getV2CryptocurrencyInfo",
        "description": "Returns all static metadata available for one or more cryptocurrencies. This information includes details like logo, description, official website URL, social links, and links to a cryptocurrency's technical documentation.\n\n**Please note**: This documentation relates to our updated V2 endpoint, which may be incompatible with our V1 versions. Documentation for deprecated endpoints can be found <a href=\"#tag/deprecated\">here</a>.<br><br>\n**This endpoint is available on the following <a href=\"https://coinmarketcap.com/api/features\" target=\"_blank\">API plans</a>:**\n- Basic\n- Startup\n- Hobbyist\n- Standard\n- Professional\n- Enterprise\n\n**Cache / Update frequency:** Static data is updated only as needed, every 30 seconds.  \n**Plan credit use:** 1 call credit per 100 cryptocurrencies returned (rounded up).  \n**CMC equivalent pages:** Cryptocurrency detail page metadata like [coinmarketcap.com/currencies/bitcoin/](https://coinmarketcap.com/currencies/bitcoin/).  ",
        "parameters": [
          {
            "description": "One or more comma-separated CoinMarketCap cryptocurrency IDs. Example: \"1,2\"",
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\d+(?:,\\d+)*$"
            }
          },
          {
            "description": "Alternatively pass a comma-separated list of cryptocurrency slugs. Example: \"bitcoin,ethereum\"",
            "name": "slug",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-z-]+(?:,[0-9a-z-]+)*$"
            }
          },
          {
            "description": "Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \"BTC,ETH\". At least one \"id\" *or* \"slug\" *or* \"symbol\" is required for this request.",
            "name": "symbol",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-,]+(?:,[0-9A-Za-z$@\\-]+)*$"
            }
          },
          {
            "description": "Alternatively pass in a contract address. Example: \"0xc40af1e4fecfa05ce6bab79dcd8b373d2e436c4e\"",
            "name": "address",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Optionally specify a comma-separated list of supplemental data fields to return. Pass `urls,logo,description,tags,platform,date_added,notice,status` to include all auxiliary fields.",
            "name": "aux",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(urls|logo|description|tags|platform|date_added|notice|status)+(?:,(urls|logo|description|tags|platform|date_added|notice|status)+)*$",
              "default": "urls,logo,description,tags,platform,date_added,notice"
            }
          }
        ],
        "tags": ["cryptocurrency"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Cryptocurrencies_Info_-_Response_Model"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_400_Error_Object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_401_Error_Object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_403_Error_Object"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_429_Error_Object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_500_Error_Object"
                }
              }
            }
          }
        }
      }
    },
    "/v2/tools/price-conversion": {
      "get": {
        "summary": "Price Conversion v2",
        "operationId": "getV2ToolsPriceconversion",
        "description": "Convert an amount of one cryptocurrency or fiat currency into one or more different currencies utilizing the latest market rate for each currency. You may optionally pass a historical timestamp as `time` to convert values based on historical rates (as your API plan supports). \n  \n  **Please note**: This documentation relates to our updated V2 endpoint, which may be incompatible with our V1 versions. Documentation for deprecated endpoints can be found <a href=\"#tag/deprecated\">here</a>.<br><br>\n**Technical Notes**\n- Latest market rate conversions are accurate to 1 minute of specificity. Historical conversions are accurate to 1 minute of specificity outside of non-USD fiat conversions which have 5 minute specificity. \n- You may reference a current list of all supported cryptocurrencies via the <a href=\"/api/v1/#section/Standards-and-Conventions\" target=\"_blank\">cryptocurrency/map</a> endpoint. This endpoint also returns the supported date ranges for historical conversions via the `first_historical_data` and `last_historical_data` properties.   \n- Conversions are supported in 93 different fiat currencies and 4 precious metals <a href=\"/api/v1/#section/Standards-and-Conventions\" target=\"_blank\">as outlined here</a>. Historical fiat conversions are supported as far back as 2013-04-28.\n- A `last_updated` timestamp is included for both your source currency and each conversion currency. This is the timestamp of the closest market rate record referenced for each currency during the conversion.  \n\n**This endpoint is available on the following <a href=\"https://coinmarketcap.com/api/features\" target=\"_blank\">API plans</a>:**\n- Basic (Latest market price conversions)\n- Hobbyist (Latest market price conversions + 1 month historical)\n- Startup (Latest market price conversions + 1 month historical)\n- Standard (Latest market price conversions + 3 months historical)\n- Professional (Latest market price conversions + 12 months historical)\n- Enterprise (Latest market price conversions + up to 6 years historical)\n\n**Cache / Update frequency:** Every 60 seconds for the lastest cryptocurrency and fiat currency rates.    \n**Plan credit use:** 1 call credit per call and 1 call credit per `convert` option beyond the first.  \n**CMC equivalent pages:** Our cryptocurrency conversion page at [coinmarketcap.com/converter/](https://coinmarketcap.com/converter/).  ",
        "parameters": [
          {
            "description": "An amount of currency to convert. Example: 10.43",
            "name": "amount",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number",
              "minimum": 1e-8,
              "maximum": 1000000000000
            }
          },
          {
            "description": "The CoinMarketCap currency ID of the base cryptocurrency or fiat to convert from. Example: \"1\"",
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\d*$"
            }
          },
          {
            "description": "Alternatively the currency symbol of the base cryptocurrency or fiat to convert from. Example: \"BTC\". One \"id\" *or* \"symbol\" is required.",
            "name": "symbol",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-]*$"
            }
          },
          {
            "description": "Optional timestamp (Unix or ISO 8601) to reference historical pricing during conversion. If not passed, the current time will be used. If passed, we'll reference the closest historic values available for this conversion.",
            "name": "time",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Pass up to 120 comma-separated fiat or cryptocurrency symbols to convert the source amount to.",
            "name": "convert",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-,]+(?:,[0-9A-Za-z$@\\-]+)*$"
            }
          },
          {
            "description": "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to `convert` outside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used when `convert` is used.",
            "name": "convert_id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\d+(?:,\\d+)*$"
            }
          }
        ],
        "tags": ["tools"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Tools_Price_Conversion_-_Response_Model"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_400_Error_Object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_401_Error_Object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_403_Error_Object"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_429_Error_Object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_500_Error_Object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/blockchain/statistics/latest": {
      "get": {
        "summary": "Statistics Latest",
        "operationId": "getV1BlockchainStatisticsLatest",
        "description": "Returns the latest blockchain statistics data for 1 or more blockchains. Bitcoin, Litecoin, and Ethereum are currently supported. Additional blockchains will be made available on a regular basis.  \n\n\n \n  **This endpoint is available on the following <a href=\"https://coinmarketcap.com/api/features\" target=\"_blank\">API plans</a>:**\n  - ~~Basic~~\n  - ~~Hobbyist~~\n  - ~~Startup~~\n  - ~~Standard~~\n  - ~~Professional~~\n  - Enterprise\n\n**Cache / Update frequency:** Every 15 seconds.  \n**Plan credit use:** 1 call credit per request.  \n**CMC equivalent pages:** Our blockchain explorer pages like [blockchain.coinmarketcap.com/](https://blockchain.coinmarketcap.com/).",
        "parameters": [
          {
            "description": "One or more comma-separated cryptocurrency CoinMarketCap IDs to return blockchain data for. Pass `1,2,1027` to request all currently supported blockchains.",
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\d+(?:,\\d+)*$"
            }
          },
          {
            "description": "Alternatively pass one or more comma-separated cryptocurrency symbols. Pass `BTC,LTC,ETH` to request all currently supported blockchains.",
            "name": "symbol",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-,]+(?:,[0-9A-Za-z$@\\-]+)*$"
            }
          },
          {
            "description": "Alternatively pass a comma-separated list of cryptocurrency slugs. Pass `bitcoin,litecoin,ethereum` to request all currently supported blockchains.",
            "name": "slug",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-z-]+(?:,[0-9a-z-]+)*$"
            }
          }
        ],
        "tags": ["blockchain"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Blockchain_Statistics_Latest_-_Response_Model"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_400_Error_Object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_401_Error_Object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_403_Error_Object"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_429_Error_Object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_500_Error_Object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/cryptocurrency/listings/historical": {
      "get": {
        "x-actionOnly": true,
        "summary": "Listings Historical",
        "operationId": "getV1CryptocurrencyListingsHistorical",
        "description": "Returns a ranked and sorted list of all cryptocurrencies for a historical UTC date.  \n\n\n**Technical Notes**\n- This endpoint is identical in format to our [/cryptocurrency/listings/latest](#operation/getV1CryptocurrencyListingsLatest) endpoint but is used to retrieve historical daily ranking snapshots from the end of each UTC day.  \n- Daily snapshots reflect market data at the end of each UTC day and may be requested as far back as 2013-04-28 (as supported by your plan's historical limits).  \n- The required \"date\" parameter can be passed as a Unix timestamp or ISO 8601 date but only the date portion of the timestamp will be referenced. It is recommended to send an ISO date format like \"2019-10-10\" without time.\n- This endpoint is for retrieving paginated and sorted lists of all currencies. If you require historical market data on specific cryptocurrencies you should use [/cryptocurrency/quotes/historical](#operation/getV1CryptocurrencyQuotesHistorical).\n   \n\n\nCryptocurrencies are listed by cmc_rank by default. You may optionally sort against any of the following:  \n**cmc_rank**: CoinMarketCap's market cap rank as outlined in <a href=\"https://coinmarketcap.com/methodology/\" target=\"_blank\">our methodology</a>.  \n**name**: The cryptocurrency name.  \n**symbol**: The cryptocurrency symbol.  \n**market_cap**: market cap (latest trade price x circulating supply).  \n**price**: latest average trade price across markets.  \n**circulating_supply**: approximate number of coins currently in circulation.  \n**total_supply**: approximate total amount of coins in existence right now (minus any coins that have been verifiably burned).  \n**max_supply**: our best approximation of the maximum amount of coins that will ever exist in the lifetime of the currency.  \n**num_market_pairs**: number of market pairs across all exchanges trading each currency.  \n**volume_24h**: 24 hour trading volume for each currency.  \n**percent_change_1h**: 1 hour trading price percentage change for each currency.  \n**percent_change_24h**: 24 hour trading price percentage change for each currency.  \n**percent_change_7d**: 7 day trading price percentage change for each currency.  \n \n  **This endpoint is available on the following <a href=\"https://coinmarketcap.com/api/features\" target=\"_blank\">API plans</a>:**\n  - ~~Basic~~\n  - ~~Hobbyist~~\n  - ~~Startup~~\n  - Standard (3 months)\n  - Professional (12 months)\n  - Enterprise (Up to 6 years)\n\n**Cache / Update frequency:** The last completed UTC day is available 30 minutes after midnight on the next UTC day.  \n**Plan credit use:** 1 call credit per 100 cryptocurrencies returned (rounded up) and 1 call credit per `convert` option beyond the first.  \n**CMC equivalent pages:** Our historical daily crypto ranking snapshot pages like this one on [February 02, 2014](https://coinmarketcap.com/historical/20140202/).",
        "parameters": [
          {
            "description": "date (Unix or ISO 8601) to reference day of snapshot.",
            "name": "date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Optionally offset the start (1-based index) of the paginated list of items to return.",
            "name": "start",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "description": "Optionally specify the number of results to return. Use this parameter and the \"start\" parameter to determine your own pagination size.",
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 5000,
              "default": 100
            }
          },
          {
            "description": "Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \"quote\" object.",
            "name": "convert",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-,]+(?:,[0-9A-Za-z$@\\-]+)*$"
            }
          },
          {
            "description": "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to `convert` outside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used when `convert` is used.",
            "name": "convert_id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\d+(?:,\\d+)*$"
            }
          },
          {
            "description": "What field to sort the list of cryptocurrencies by.",
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "cmc_rank",
                "name",
                "symbol",
                "market_cap",
                "price",
                "circulating_supply",
                "total_supply",
                "max_supply",
                "num_market_pairs",
                "volume_24h",
                "percent_change_1h",
                "percent_change_24h",
                "percent_change_7d"
              ],
              "default": "cmc_rank"
            }
          },
          {
            "description": "The direction in which to order cryptocurrencies against the specified sort.",
            "name": "sort_dir",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"]
            }
          },
          {
            "description": "The type of cryptocurrency to include.",
            "name": "cryptocurrency_type",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["all", "coins", "tokens"],
              "default": "all"
            }
          },
          {
            "description": "Optionally specify a comma-separated list of supplemental data fields to return. Pass `platform,tags,date_added,circulating_supply,total_supply,max_supply,cmc_rank,num_market_pairs` to include all auxiliary fields.",
            "name": "aux",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(platform|tags|date_added|circulating_supply|total_supply|max_supply|cmc_rank|num_market_pairs)+(?:,(platform|tags|date_added|circulating_supply|total_supply|max_supply|cmc_rank|num_market_pairs)+)*$",
              "default": "platform,tags,date_added,circulating_supply,total_supply,max_supply,cmc_rank,num_market_pairs"
            }
          }
        ],
        "tags": ["cryptocurrency"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Cryptocurrency_Listings_Latest_-_Response_Model"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_400_Error_Object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_401_Error_Object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_403_Error_Object"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_429_Error_Object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_500_Error_Object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/cryptocurrency/listings/latest": {
      "get": {
        "x-actionOnly": true,
        "summary": "Listings Latest",
        "operationId": "getV1CryptocurrencyListingsLatest",
        "description": "Returns a paginated list of all active cryptocurrencies with latest market data. The default \"market_cap\" sort returns cryptocurrency in order of CoinMarketCap's market cap rank (as outlined in <a href=\"https://coinmarketcap.com/methodology/\" target=\"_blank\">our methodology</a>) but you may configure this call to order by another market ranking field. Use the \"convert\" option to return market values in multiple fiat and cryptocurrency conversions in the same call.\n\n\nYou may sort against any of the following:  \n**market_cap**: CoinMarketCap's market cap rank as outlined in <a href=\"https://coinmarketcap.com/methodology/\" target=\"_blank\">our methodology</a>.  \n**market_cap_strict**: A strict market cap sort (latest trade price x circulating supply).  \n**name**: The cryptocurrency name.  \n**symbol**: The cryptocurrency symbol.  \n**date_added**: Date cryptocurrency was added to the system.  \n**price**: latest average trade price across markets.  \n**circulating_supply**: approximate number of coins currently in circulation.  \n**total_supply**: approximate total amount of coins in existence right now (minus any coins that have been verifiably burned).  \n**max_supply**: our best approximation of the maximum amount of coins that will ever exist in the lifetime of the currency.  \n**num_market_pairs**: number of market pairs across all exchanges trading each currency.  \n**market_cap_by_total_supply_strict**: market cap by total supply.  \n**volume_24h**: rolling 24 hour adjusted trading volume.  \n**volume_7d**: rolling 24 hour adjusted trading volume.  \n**volume_30d**: rolling 24 hour adjusted trading volume.  \n**percent_change_1h**: 1 hour trading price percentage change for each currency.  \n**percent_change_24h**: 24 hour trading price percentage change for each currency.  \n**percent_change_7d**: 7 day trading price percentage change for each currency.  \n\n  **This endpoint is available on the following <a href=\"https://coinmarketcap.com/api/features\" target=\"_blank\">API plans</a>:**\n  - Basic\n  - Hobbyist\n  - Startup\n  - Standard\n  - Professional\n  - Enterprise\n\n**Cache / Update frequency:** Every 60 seconds.  \n**Plan credit use:** 1 call credit per 200 cryptocurrencies returned (rounded up) and 1 call credit per `convert` option beyond the first.\n**CMC equivalent pages:** Our latest cryptocurrency listing and ranking pages like [coinmarketcap.com/all/views/all/](https://coinmarketcap.com/all/views/all/), [coinmarketcap.com/tokens/](https://coinmarketcap.com/tokens/), [coinmarketcap.com/gainers-losers/](https://coinmarketcap.com/gainers-losers/), [coinmarketcap.com/new/](https://coinmarketcap.com/new/).     \n  \n***NOTE:** Use this endpoint if you need a sorted and paginated list of all cryptocurrencies. If you want to query for market data on a few specific cryptocurrencies use [/v1/cryptocurrency/quotes/latest](#operation/getV1CryptocurrencyQuotesLatest) which is optimized for that purpose. The response data between these endpoints is otherwise the same.* ",
        "parameters": [
          {
            "description": "Optionally offset the start (1-based index) of the paginated list of items to return.",
            "name": "start",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "description": "Optionally specify the number of results to return. Use this parameter and the \"start\" parameter to determine your own pagination size.",
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 5000,
              "default": 100
            }
          },
          {
            "description": "Optionally specify a threshold of minimum USD price to filter results by.",
            "name": "price_min",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 0,
              "maximum": 100000000000000000
            }
          },
          {
            "description": "Optionally specify a threshold of maximum USD price to filter results by.",
            "name": "price_max",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 0,
              "maximum": 100000000000000000
            }
          },
          {
            "description": "Optionally specify a threshold of minimum market cap to filter results by.",
            "name": "market_cap_min",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 0,
              "maximum": 100000000000000000
            }
          },
          {
            "description": "Optionally specify a threshold of maximum market cap to filter results by.",
            "name": "market_cap_max",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 0,
              "maximum": 100000000000000000
            }
          },
          {
            "description": "Optionally specify a threshold of minimum 24 hour USD volume to filter results by.",
            "name": "volume_24h_min",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 0,
              "maximum": 100000000000000000
            }
          },
          {
            "description": "Optionally specify a threshold of maximum 24 hour USD volume to filter results by.",
            "name": "volume_24h_max",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 0,
              "maximum": 100000000000000000
            }
          },
          {
            "description": "Optionally specify a threshold of minimum circulating supply to filter results by.",
            "name": "circulating_supply_min",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 0,
              "maximum": 100000000000000000
            }
          },
          {
            "description": "Optionally specify a threshold of maximum circulating supply to filter results by.",
            "name": "circulating_supply_max",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 0,
              "maximum": 100000000000000000
            }
          },
          {
            "description": "Optionally specify a threshold of minimum 24 hour percent change to filter results by.",
            "name": "percent_change_24h_min",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": -100
            }
          },
          {
            "description": "Optionally specify a threshold of maximum 24 hour percent change to filter results by.",
            "name": "percent_change_24h_max",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": -100
            }
          },
          {
            "description": "Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \"quote\" object.",
            "name": "convert",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-,]+(?:,[0-9A-Za-z$@\\-]+)*$"
            }
          },
          {
            "description": "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to `convert` outside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used when `convert` is used.",
            "name": "convert_id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\d+(?:,\\d+)*$"
            }
          },
          {
            "description": "What field to sort the list of cryptocurrencies by.",
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "symbol",
                "date_added",
                "market_cap",
                "market_cap_strict",
                "price",
                "circulating_supply",
                "total_supply",
                "max_supply",
                "num_market_pairs",
                "volume_24h",
                "percent_change_1h",
                "percent_change_24h",
                "percent_change_7d",
                "market_cap_by_total_supply_strict",
                "volume_7d",
                "volume_30d"
              ],
              "default": "market_cap"
            }
          },
          {
            "description": "The direction in which to order cryptocurrencies against the specified sort.",
            "name": "sort_dir",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"]
            }
          },
          {
            "description": "The type of cryptocurrency to include.",
            "name": "cryptocurrency_type",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["all", "coins", "tokens"],
              "default": "all"
            }
          },
          {
            "description": "The tag of cryptocurrency to include.",
            "name": "tag",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["all", "defi", "filesharing"],
              "default": "all"
            }
          },
          {
            "description": "Optionally specify a comma-separated list of supplemental data fields to return. Pass `num_market_pairs,cmc_rank,date_added,tags,platform,max_supply,circulating_supply,total_supply,market_cap_by_total_supply,volume_24h_reported,volume_7d,volume_7d_reported,volume_30d,volume_30d_reported,is_market_cap_included_in_calc` to include all auxiliary fields.",
            "name": "aux",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(num_market_pairs|cmc_rank|date_added|tags|platform|max_supply|circulating_supply|total_supply|market_cap_by_total_supply|volume_24h_reported|volume_7d|volume_7d_reported|volume_30d|volume_30d_reported|is_market_cap_included_in_calc)+(?:,(num_market_pairs|cmc_rank|date_added|tags|platform|max_supply|circulating_supply|total_supply|market_cap_by_total_supply|volume_24h_reported|volume_7d|volume_7d_reported|volume_30d|volume_30d_reported|is_market_cap_included_in_calc)+)*$",
              "default": "num_market_pairs,cmc_rank,date_added,tags,platform,max_supply,circulating_supply,total_supply"
            }
          }
        ],
        "tags": ["cryptocurrency"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Cryptocurrency_Listings_Latest_-_Response_Model_1"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_400_Error_Object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_401_Error_Object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_403_Error_Object"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_429_Error_Object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_500_Error_Object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/cryptocurrency/listings/new": {
      "get": {
        "x-triggerName": "New Listing",
        "summary": "Listings New",
        "operationId": "getV1CryptocurrencyListingsNew",
        "description": "Returns a paginated list of most recently added cryptocurrencies.\n\n\n  **This endpoint is available on the following <a href=\"https://coinmarketcap.com/api/features\" target=\"_blank\">API plans</a>:**\n  - Startup\n  - Standard\n  - Professional\n  - Enterprise\n\n**Cache / Update frequency:** Every 60 seconds.  \n**Plan credit use:** 1 call credit per 200 cryptocurrencies returned (rounded up) and 1 call credit per `convert` option beyond the first.  \n**CMC equivalent pages:** Our \"new\" cryptocurrency page [coinmarketcap.com/new/](https://coinmarketcap.com/new)\n  \n***NOTE:** Use this endpoint if you need a sorted and paginated list of all recently added cryptocurrencies.* ",
        "parameters": [
          {
            "description": "Optionally offset the start (1-based index) of the paginated list of items to return.",
            "name": "start",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "description": "Optionally specify the number of results to return. Use this parameter and the \"start\" parameter to determine your own pagination size.",
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 5000,
              "default": 100
            }
          },
          {
            "description": "Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \"quote\" object.",
            "name": "convert",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-,]+(?:,[0-9A-Za-z$@\\-]+)*$"
            }
          },
          {
            "description": "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to `convert` outside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used when `convert` is used.",
            "name": "convert_id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\d+(?:,\\d+)*$"
            }
          },
          {
            "description": "The direction in which to order cryptocurrencies against the specified sort.",
            "name": "sort_dir",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"]
            }
          }
        ],
        "tags": ["cryptocurrency"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Cryptocurrency_Listings_New_-_Response_Model"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_400_Error_Object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_401_Error_Object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_403_Error_Object"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_429_Error_Object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_500_Error_Object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/cryptocurrency/market-pairs/latest": {
      "get": {
        "summary": "Market Pairs Latest v1 (deprecated)",
        "operationId": "getV1CryptocurrencyMarketpairsLatest",
        "description": "Lists all active market pairs that CoinMarketCap tracks for a given cryptocurrency or fiat currency. All markets with this currency as the pair base *or* pair quote will be returned. The latest price and volume information is returned for each market. Use the \"convert\" option to return market values in multiple fiat and cryptocurrency conversions in the same call.\n\n\n\n  **This endpoint is available on the following <a href=\"https://coinmarketcap.com/api/features\" target=\"_blank\">API plans</a>:**\n  - ~~Basic~~\n  - ~~Hobbyist~~\n  - ~~Startup~~\n  - Standard\n  - Professional\n  - Enterprise\n\n**Cache / Update frequency:** Every 1 minute.  \n**Plan credit use:** 1 call credit per 100 market pairs returned (rounded up) and 1 call credit per `convert` option beyond the first.  \n**CMC equivalent pages:** Our active cryptocurrency markets pages like [coinmarketcap.com/currencies/bitcoin/#markets](https://coinmarketcap.com/currencies/bitcoin/#markets).  ",
        "parameters": [
          {
            "description": "A cryptocurrency or fiat currency by CoinMarketCap ID to list market pairs for. Example: \"1\"",
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Alternatively pass a cryptocurrency by slug. Example: \"bitcoin\"",
            "name": "slug",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-z-]*$"
            }
          },
          {
            "description": "Alternatively pass a cryptocurrency by symbol. Fiat currencies are not supported by this field. Example: \"BTC\". A single cryptocurrency \"id\", \"slug\", *or* \"symbol\" is required.",
            "name": "symbol",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-]*$"
            }
          },
          {
            "description": "Optionally offset the start (1-based index) of the paginated list of items to return.",
            "name": "start",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "description": "Optionally specify the number of results to return. Use this parameter and the \"start\" parameter to determine your own pagination size.",
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 5000,
              "default": 100
            }
          },
          {
            "description": "Optionally specify the sort direction of markets returned.",
            "name": "sort_dir",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            }
          },
          {
            "description": "Optionally specify the sort order of markets returned. By default we return a strict sort on 24 hour reported volume. Pass `cmc_rank` to return a CMC methodology based sort where markets with excluded volumes are returned last.",
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "volume_24h_strict",
                "cmc_rank",
                "cmc_rank_advanced",
                "effective_liquidity",
                "market_score",
                "market_reputation"
              ],
              "default": "volume_24h_strict"
            }
          },
          {
            "description": "Optionally specify a comma-separated list of supplemental data fields to return. Pass `num_market_pairs,category,fee_type,market_url,currency_name,currency_slug,price_quote,notice,cmc_rank,effective_liquidity,market_score,market_reputation` to include all auxiliary fields.",
            "name": "aux",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(num_market_pairs|category|fee_type|market_url|currency_name|currency_slug|price_quote|notice|cmc_rank|effective_liquidity|market_score|market_reputation)+(?:,(num_market_pairs|category|fee_type|market_url|currency_name|currency_slug|price_quote|notice|cmc_rank|effective_liquidity|market_score|market_reputation)+)*$",
              "default": "num_market_pairs,category,fee_type"
            }
          },
          {
            "description": "Optionally include one or more fiat or cryptocurrency IDs to filter market pairs by. For example `?id=1&matched_id=2781` would only return BTC markets that matched: \"BTC/USD\" or \"USD/BTC\". This parameter cannot be used when `matched_symbol` is used.",
            "name": "matched_id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\d+(?:,\\d+)*$"
            }
          },
          {
            "description": "Optionally include one or more fiat or cryptocurrency symbols to filter market pairs by. For example `?symbol=BTC&matched_symbol=USD` would only return BTC markets that matched: \"BTC/USD\" or \"USD/BTC\". This parameter cannot be used when `matched_id` is used.",
            "name": "matched_symbol",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-,]+(?:,[0-9A-Za-z$@\\-]+)*$"
            }
          },
          {
            "description": "The category of trading this market falls under. Spot markets are the most common but options include derivatives and OTC.",
            "name": "category",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["all", "spot", "derivatives", "otc", "perpetual"],
              "default": "all"
            }
          },
          {
            "description": "The fee type the exchange enforces for this market.",
            "name": "fee_type",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["all", "percentage", "no-fees", "transactional-mining", "unknown"],
              "default": "all"
            }
          },
          {
            "description": "Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \"quote\" object.",
            "name": "convert",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-,]+(?:,[0-9A-Za-z$@\\-]+)*$"
            }
          },
          {
            "description": "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to `convert` outside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used when `convert` is used.",
            "name": "convert_id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\d+(?:,\\d+)*$"
            }
          }
        ],
        "tags": ["deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Cryptocurrency_Market_Pairs_Latest_-_Response_Model"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_400_Error_Object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_401_Error_Object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_403_Error_Object"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_429_Error_Object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_500_Error_Object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/cryptocurrency/ohlcv/historical": {
      "get": {
        "summary": "OHLCV Historical v1 (deprecated)",
        "operationId": "getV1CryptocurrencyOhlcvHistorical",
        "description": "Returns historical OHLCV (Open, High, Low, Close, Volume) data along with market cap for any cryptocurrency using time interval parameters. Currently daily and hourly OHLCV periods are supported. Volume is not currently supported for hourly OHLCV intervals before 2020-09-22.\n\n  \n**Technical Notes**\n- Only the date portion of the timestamp is used for daily OHLCV so it's recommended to send an ISO date format like \"2018-09-19\" without time for this \"time_period\". \n- One OHLCV quote will be returned for every \"time_period\" between your \"time_start\" (exclusive) and \"time_end\" (inclusive).  \n- If a \"time_start\" is not supplied, the \"time_period\" will be calculated in reverse from \"time_end\" using the \"count\" parameter which defaults to 10 results.  \n- If \"time_end\" is not supplied, it defaults to the current time.   \n- If you don't need every \"time_period\" between your dates you may adjust the frequency that \"time_period\" is sampled using the \"interval\" parameter. For example with \"time_period\" set to \"daily\" you may set \"interval\" to \"2d\" to get the daily OHLCV for every other day. You could set \"interval\" to \"monthly\" to get the first daily OHLCV for each month, or set it to \"yearly\" to get the daily OHLCV value against the same date every year.  \n\n**Implementation Tips**\n- If querying for a specific OHLCV date your \"time_start\" should specify a timestamp of 1 interval prior as \"time_start\" is an exclusive time parameter (as opposed to \"time_end\" which is inclusive to the search). This means that when you pass a \"time_start\" results will be returned for the *next* complete \"time_period\". For example, if you are querying for a daily OHLCV datapoint for 2018-11-30 your \"time_start\" should be \"2018-11-29\".   \n- If only specifying a \"count\" parameter to return latest OHLCV periods, your \"count\" should be 1 number higher than the number of results you expect to receive. \"Count\" defines the number of \"time_period\" intervals queried, *not* the number of results to return, and this includes the currently active time period which is incomplete when working backwards from current time. For example, if you want the last daily OHLCV value available simply pass \"count=2\" to skip the incomplete active time period.\n- This endpoint supports requesting multiple cryptocurrencies in the same call. Please note the API response will be wrapped in an additional object in this case.  \n  \n**Interval Options**  \n  \nThere are 2 types of time interval formats that may be used for \"time_period\" and \"interval\" parameters. For \"time_period\" these return aggregate OHLCV data from the beginning to end of each interval period. Apply these time intervals to \"interval\" to adjust how frequently \"time_period\" is sampled.  \n  \nThe first are calendar year and time constants in UTC time:  \n**\"hourly\"** - Hour intervals in UTC.  \n**\"daily\"** - Calendar day intervals for each UTC day.  \n**\"weekly\"** - Calendar week intervals for each calendar week.  \n**\"monthly\"** - Calendar month intervals for each calendar month.    \n**\"yearly\"** - Calendar year intervals for each calendar year.  \n  \nThe second are relative time intervals.  \n**\"h\"**: Get the first quote available every \"h\" hours (3600 second intervals). Supported hour intervals are: \"1h\", \"2h\", \"3h\", \"4h\", \"6h\", \"12h\".  \n**\"d\"**: Time periods that repeat every \"d\" days (86400 second intervals). Supported day intervals are: \"1d\", \"2d\", \"3d\", \"7d\", \"14d\", \"15d\", \"30d\", \"60d\", \"90d\", \"365d\".  \n  \nPlease note that \"time_period\" currently supports the \"daily\" and \"hourly\" options. \"interval\" supports all interval options.  \n  \n**This endpoint is available on the following <a href=\"https://coinmarketcap.com/api/features\" target=\"_blank\">API plans</a>:**  \n- ~~Basic~~\n- ~~Hobbyist~~\n- Startup (1 month)\n- Standard (3 months)\n- Professional (12 months)\n- Enterprise (Up to 6 years)\n\n**Cache / Update frequency:** Latest Daily OHLCV record is available ~5 to ~10 minutes after each midnight UTC. The latest hourly OHLCV record is available 5 minutes after each UTC hour.  \n**Plan credit use:** 1 call credit per 100 OHLCV data points returned (rounded up) and 1 call credit per `convert` option beyond the first.  \n**CMC equivalent pages:** Our historical cryptocurrency data pages like [coinmarketcap.com/currencies/bitcoin/historical-data/](https://coinmarketcap.com/currencies/bitcoin/historical-data/).",
        "parameters": [
          {
            "description": "One or more comma-separated CoinMarketCap cryptocurrency IDs. Example: \"1,1027\"",
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\d+(?:,\\d+)*$"
            }
          },
          {
            "description": "Alternatively pass a comma-separated list of cryptocurrency slugs. Example: \"bitcoin,ethereum\"",
            "name": "slug",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-z-]+(?:,[0-9a-z-]+)*$"
            }
          },
          {
            "description": "Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \"BTC,ETH\". At least one \"id\" *or* \"slug\" *or* \"symbol\" is required for this request.",
            "name": "symbol",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-,]+(?:,[0-9A-Za-z$@\\-]+)*$"
            }
          },
          {
            "description": "Time period to return OHLCV data for. The default is \"daily\". See the main endpoint description for details.",
            "name": "time_period",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["daily", "hourly"],
              "default": "daily"
            }
          },
          {
            "description": "Timestamp (Unix or ISO 8601) to start returning OHLCV time periods for. Only the date portion of the timestamp is used for daily OHLCV so it's recommended to send an ISO date format like \"2018-09-19\" without time.",
            "name": "time_start",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Timestamp (Unix or ISO 8601) to stop returning OHLCV time periods for (inclusive). Optional, if not passed we'll default to the current time. Only the date portion of the timestamp is used for daily OHLCV so it's recommended to send an ISO date format like \"2018-09-19\" without time.",
            "name": "time_end",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Optionally limit the number of time periods to return results for. The default is 10 items. The current query limit is 10000 items.",
            "name": "count",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 10000,
              "default": 10
            }
          },
          {
            "description": "Optionally adjust the interval that \"time_period\" is sampled. See main endpoint description for available options.",
            "name": "interval",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "hourly",
                "daily",
                "weekly",
                "monthly",
                "yearly",
                "1h",
                "2h",
                "3h",
                "4h",
                "6h",
                "12h",
                "1d",
                "2d",
                "3d",
                "7d",
                "14d",
                "15d",
                "30d",
                "60d",
                "90d",
                "365d"
              ],
              "default": "daily"
            }
          },
          {
            "description": "By default market quotes are returned in USD. Optionally calculate market quotes in up to 3 fiat currencies or cryptocurrencies.",
            "name": "convert",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-,]+(?:,[0-9A-Za-z$@\\-]+)*$"
            }
          },
          {
            "description": "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to `convert` outside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used when `convert` is used.",
            "name": "convert_id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\d+(?:,\\d+)*$"
            }
          },
          {
            "description": "Pass `true` to relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if any invalid cryptocurrencies are requested or a cryptocurrency does not have matching records in the requested timeframe. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned.",
            "name": "skip_invalid",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "tags": ["deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Cryptocurrency_OHLCV_Historical_-_Response_Model"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_400_Error_Object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_401_Error_Object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_403_Error_Object"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_429_Error_Object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_500_Error_Object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/cryptocurrency/ohlcv/latest": {
      "get": {
        "summary": "OHLCV Latest v1 (deprecated)",
        "operationId": "getV1CryptocurrencyOhlcvLatest",
        "description": "Returns the latest OHLCV (Open, High, Low, Close, Volume) market values for one or more cryptocurrencies for the current UTC day. Since the current UTC day is still active these values are updated frequently. You can find the final calculated OHLCV values for the last completed UTC day along with all historic days using /cryptocurrency/ohlcv/historical. \n\n\n  **This endpoint is available on the following <a href=\"https://coinmarketcap.com/api/features\" target=\"_blank\">API plans</a>:**\n  - ~~Basic~~\n  - ~~Hobbyist~~\n  - Startup\n  - Standard\n  - Professional\n  - Enterprise\n\n  **Cache / Update frequency:** Every 10 minutes. Additional OHLCV intervals and 1 minute updates will be available in the future.  \n  **Plan credit use:** 1 call credit per 100 OHLCV values returned (rounded up) and 1 call credit per `convert` option beyond the first.  \n  **CMC equivalent pages:** No equivalent, this data is only available via API.",
        "parameters": [
          {
            "description": "One or more comma-separated cryptocurrency CoinMarketCap IDs. Example: 1,2",
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\d+(?:,\\d+)*$"
            }
          },
          {
            "description": "Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \"BTC,ETH\". At least one \"id\" *or* \"symbol\" is required.",
            "name": "symbol",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-,]+(?:,[0-9A-Za-z$@\\-]+)*$"
            }
          },
          {
            "description": "Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \"quote\" object.",
            "name": "convert",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-,]+(?:,[0-9A-Za-z$@\\-]+)*$"
            }
          },
          {
            "description": "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to `convert` outside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used when `convert` is used.",
            "name": "convert_id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\d+(?:,\\d+)*$"
            }
          },
          {
            "description": "Pass `true` to relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if any invalid cryptocurrencies are requested or a cryptocurrency does not have matching records in the requested timeframe. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned.",
            "name": "skip_invalid",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "tags": ["deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Cryptocurrency_OHLCV_Latest_-_Response_Model"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_400_Error_Object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_401_Error_Object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_403_Error_Object"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_429_Error_Object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_500_Error_Object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/cryptocurrency/price-performance-stats/latest": {
      "get": {
        "summary": "Price Performance Stats v1 (deprecated)",
        "operationId": "getV1CryptocurrencyPriceperformancestatsLatest",
        "description": "Returns price performance statistics for one or more cryptocurrencies including launch price ROI and all-time high / all-time low. Stats are returned for an `all_time` period by default. UTC `yesterday` and a number of *rolling time periods* may be requested using the `time_period` parameter. Utilize the `convert` parameter to translate values into multiple fiats or cryptocurrencies using historical rates.\n\n\n\n  **This endpoint is available on the following <a href=\"https://coinmarketcap.com/api/features\" target=\"_blank\">API plans</a>:**\n  - ~~Basic~~\n  - ~~Hobbyist~~\n  - Startup\n  - Standard\n  - Professional\n  - Enterprise\n\n**Cache / Update frequency:** Every 60 seconds.  \n**Plan credit use:** 1 call credit per 100 cryptocurrencies returned (rounded up) and 1 call credit per `convert` option beyond the first.  \n**CMC equivalent pages:** The statistics module displayed on cryptocurrency pages like [Bitcoin](https://coinmarketcap.com/currencies/bitcoin/).     \n  \n***NOTE:** You may also use [/cryptocurrency/ohlcv/historical](#operation/getV1CryptocurrencyOhlcvHistorical) for traditional OHLCV data at historical daily and hourly intervals. You may also use [/v1/cryptocurrency/ohlcv/latest](#operation/getV1CryptocurrencyOhlcvLatest) for OHLCV data for the current UTC day.* ",
        "parameters": [
          {
            "description": "One or more comma-separated cryptocurrency CoinMarketCap IDs. Example: 1,2",
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\d+(?:,\\d+)*$"
            }
          },
          {
            "description": "Alternatively pass a comma-separated list of cryptocurrency slugs. Example: \"bitcoin,ethereum\"",
            "name": "slug",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-z-]+(?:,[0-9a-z-]+)*$"
            }
          },
          {
            "description": "Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \"BTC,ETH\". At least one \"id\" *or* \"slug\" *or* \"symbol\" is required for this request.",
            "name": "symbol",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-,]+(?:,[0-9A-Za-z$@\\-]+)*$"
            }
          },
          {
            "description": "Specify one or more comma-delimited time periods to return stats for. `all_time` is the default. Pass `all_time,yesterday,24h,7d,30d,90d,365d` to return all supported time periods. All rolling periods have a rolling close time of the current request time. For example `24h` would have a close time of now and an open time of 24 hours before now. *Please note: `yesterday` is a UTC period and currently does not currently support `high` and `low` timestamps.*",
            "name": "time_period",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(all_time|yesterday|24h|7d|30d|90d|365d)+(?:,(all_time|yesterday|24h|7d|30d|90d|365d)+)*$",
              "default": "all_time"
            }
          },
          {
            "description": "Optionally calculate quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \"quote\" object.",
            "name": "convert",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-,]+(?:,[0-9A-Za-z$@\\-]+)*$"
            }
          },
          {
            "description": "Optionally calculate quotes by CoinMarketCap ID instead of symbol. This option is identical to `convert` outside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used when `convert` is used.",
            "name": "convert_id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\d+(?:,\\d+)*$"
            }
          },
          {
            "description": "Pass `true` to relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if no match is found for 1 or more requested cryptocurrencies. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned.",
            "name": "skip_invalid",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "tags": ["deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Cryptocurrency_Price_Performance_Stats_Latest_-_Response_Model"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_400_Error_Object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_401_Error_Object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_403_Error_Object"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_429_Error_Object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_500_Error_Object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/cryptocurrency/quotes/historical": {
      "get": {
        "summary": "Quotes Historical v1 (deprecated)",
        "operationId": "getV1CryptocurrencyQuotesHistorical",
        "description": "Returns an interval of historic market quotes for any cryptocurrency based on time and interval parameters.\n\n\n**Technical Notes**  \n- A historic quote for every \"interval\" period between your \"time_start\" and \"time_end\" will be returned.  \n- If a \"time_start\" is not supplied, the \"interval\" will be applied in reverse from \"time_end\".  \n- If \"time_end\" is not supplied, it defaults to the current time.  \n- At each \"interval\" period, the historic quote that is closest in time to the requested time will be returned.  \n- If no historic quotes are available in a given \"interval\" period up until the next interval period, it will be skipped.  \n\n**Implementation Tips**\n- Want to get the last quote of each UTC day? Don't use \"interval=daily\" as that returns the first quote. Instead use \"interval=24h\" to repeat a specific timestamp search every 24 hours and pass ex. \"time_start=2019-01-04T23:59:00.000Z\" to query for the last record of each UTC day.\n- This endpoint supports requesting multiple cryptocurrencies in the same call. Please note the API response will be wrapped in an additional object in this case.  \n  \n**Interval Options**  \nThere are 2 types of time interval formats that may be used for \"interval\".\n\nThe first are calendar year and time constants in UTC time:  \n**\"hourly\"** - Get the first quote available at the beginning of each calendar hour.  \n**\"daily\"** - Get the first quote available at the beginning of each calendar day.  \n**\"weekly\"** - Get the first quote available at the beginning of each calendar week.  \n**\"monthly\"** - Get the first quote available at the beginning of each calendar month.  \n**\"yearly\"** - Get the first quote available at the beginning of each calendar year.  \n\nThe second are relative time intervals.  \n**\"m\"**: Get the first quote available every \"m\" minutes (60 second intervals). Supported minutes are: \"5m\", \"10m\", \"15m\", \"30m\", \"45m\".  \n**\"h\"**: Get the first quote available every \"h\" hours (3600 second intervals). Supported hour intervals are: \"1h\", \"2h\", \"3h\", \"4h\", \"6h\", \"12h\".  \n**\"d\"**: Get the first quote available every \"d\" days (86400 second intervals). Supported day intervals are: \"1d\", \"2d\", \"3d\", \"7d\", \"14d\", \"15d\", \"30d\", \"60d\", \"90d\", \"365d\".  \n\n**This endpoint is available on the following <a href=\"https://coinmarketcap.com/api/features\" target=\"_blank\">API plans</a>:**\n- ~~Basic~~\n- ~~Hobbyist~~\n- ~~Startup~~\n- Standard (3 month)\n- Professional (12 months)\n- Enterprise (Up to 6 years)\n\n**Cache / Update frequency:** Every 5 minutes.    \n**Plan credit use:** 1 call credit per 100 historical data points returned (rounded up) and 1 call credit per `convert` option beyond the first.  \n**CMC equivalent pages:** Our historical cryptocurrency charts like [coinmarketcap.com/currencies/bitcoin/#charts](https://coinmarketcap.com/currencies/bitcoin/#charts).  ",
        "parameters": [
          {
            "description": "One or more comma-separated CoinMarketCap cryptocurrency IDs. Example: \"1,2\"",
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\d+(?:,\\d+)*$"
            }
          },
          {
            "description": "Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \"BTC,ETH\". At least one \"id\" *or* \"symbol\" is required for this request.",
            "name": "symbol",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-,]+(?:,[0-9A-Za-z$@\\-]+)*$"
            }
          },
          {
            "description": "Timestamp (Unix or ISO 8601) to start returning quotes for. Optional, if not passed, we'll return quotes calculated in reverse from \"time_end\".",
            "name": "time_start",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Timestamp (Unix or ISO 8601) to stop returning quotes for (inclusive). Optional, if not passed, we'll default to the current time. If no \"time_start\" is passed, we return quotes in reverse order starting from this time.",
            "name": "time_end",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of interval periods to return results for. Optional, required if both \"time_start\" and \"time_end\" aren't supplied. The default is 10 items. The current query limit is 10000.",
            "name": "count",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 10000,
              "default": 10
            }
          },
          {
            "description": "Interval of time to return data points for. See details in endpoint description.",
            "name": "interval",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "yearly",
                "monthly",
                "weekly",
                "daily",
                "hourly",
                "5m",
                "10m",
                "15m",
                "30m",
                "45m",
                "1h",
                "2h",
                "3h",
                "4h",
                "6h",
                "12h",
                "24h",
                "1d",
                "2d",
                "3d",
                "7d",
                "14d",
                "15d",
                "30d",
                "60d",
                "90d",
                "365d"
              ],
              "default": "5m"
            }
          },
          {
            "description": "By default market quotes are returned in USD. Optionally calculate market quotes in up to 3 other fiat currencies or cryptocurrencies.",
            "name": "convert",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-,]+(?:,[0-9A-Za-z$@\\-]+)*$"
            }
          },
          {
            "description": "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to `convert` outside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used when `convert` is used.",
            "name": "convert_id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "(^\\d+(?:,\\d+)*$|(\\d,)*PLATFORM_ID+(?:,\\d+)*$)"
            }
          },
          {
            "description": "Optionally specify a comma-separated list of supplemental data fields to return. Pass `price,volume,market_cap,circulating_supply,total_supply,quote_timestamp,is_active,is_fiat,search_interval` to include all auxiliary fields.",
            "name": "aux",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(price|volume|market_cap|circulating_supply|total_supply|quote_timestamp|is_active|is_fiat|search_interval)+(?:,(price|volume|market_cap|circulating_supply|total_supply|quote_timestamp|is_active|is_fiat|search_interval)+)*$",
              "default": "price,volume,market_cap,circulating_supply,total_supply,quote_timestamp,is_active,is_fiat"
            }
          },
          {
            "description": "Pass `true` to relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if no match is found for 1 or more requested cryptocurrencies. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned.",
            "name": "skip_invalid",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "tags": ["deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Cryptocurrency_Quotes_Historical_-_Response_Model"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_400_Error_Object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_401_Error_Object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_403_Error_Object"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_429_Error_Object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_500_Error_Object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/cryptocurrency/quotes/latest": {
      "get": {
        "summary": "Quotes Latest v1 (deprecated)",
        "operationId": "getV1CryptocurrencyQuotesLatest",
        "description": "Returns the latest market quote for 1 or more cryptocurrencies. Use the \"convert\" option to return market values in multiple fiat and cryptocurrency conversions in the same call.\n\n\n**This endpoint is available on the following <a href=\"https://coinmarketcap.com/api/features\" target=\"_blank\">API plans</a>:**\n- Basic\n- Startup\n- Hobbyist\n- Standard\n- Professional\n- Enterprise\n\n**Cache / Update frequency:** Every 60 seconds.  \n**Plan credit use:** 1 call credit per 100 cryptocurrencies returned (rounded up) and 1 call credit per `convert` option beyond the first.  \n**CMC equivalent pages:** Latest market data pages for specific cryptocurrencies like [coinmarketcap.com/currencies/bitcoin/](https://coinmarketcap.com/currencies/bitcoin/).  \n   \n***NOTE:** Use this endpoint to request the latest quote for specific cryptocurrencies. If you need to request all cryptocurrencies use [/v1/cryptocurrency/listings/latest](#operation/getV1CryptocurrencyListingsLatest) which is optimized for that purpose. The response data between these endpoints is otherwise the same.*",
        "parameters": [
          {
            "description": "One or more comma-separated cryptocurrency CoinMarketCap IDs. Example: 1,2",
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\d+(?:,\\d+)*$"
            }
          },
          {
            "description": "Alternatively pass a comma-separated list of cryptocurrency slugs. Example: \"bitcoin,ethereum\"",
            "name": "slug",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-z-]+(?:,[0-9a-z-]+)*$"
            }
          },
          {
            "description": "Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \"BTC,ETH\". At least one \"id\" *or* \"slug\" *or* \"symbol\" is required for this request.",
            "name": "symbol",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-,]+(?:,[0-9A-Za-z$@\\-]+)*$"
            }
          },
          {
            "description": "Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \"quote\" object.",
            "name": "convert",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-,]+(?:,[0-9A-Za-z$@\\-]+)*$"
            }
          },
          {
            "description": "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to `convert` outside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used when `convert` is used.",
            "name": "convert_id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "(^\\d+(?:,\\d+)*$|(\\d,)*PLATFORM_ID+(?:,\\d+)*$)"
            }
          },
          {
            "description": "Optionally specify a comma-separated list of supplemental data fields to return. Pass `num_market_pairs,cmc_rank,date_added,tags,platform,max_supply,circulating_supply,total_supply,market_cap_by_total_supply,volume_24h_reported,volume_7d,volume_7d_reported,volume_30d,volume_30d_reported,is_active,is_fiat` to include all auxiliary fields.",
            "name": "aux",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(num_market_pairs|cmc_rank|date_added|tags|platform|max_supply|circulating_supply|total_supply|market_cap_by_total_supply|volume_24h_reported|volume_7d|volume_7d_reported|volume_30d|volume_30d_reported|is_active|is_fiat)+(?:,(num_market_pairs|cmc_rank|date_added|tags|platform|max_supply|circulating_supply|total_supply|market_cap_by_total_supply|volume_24h_reported|volume_7d|volume_7d_reported|volume_30d|volume_30d_reported|is_active|is_fiat)+)*$",
              "default": "num_market_pairs,cmc_rank,date_added,tags,platform,max_supply,circulating_supply,total_supply,is_active,is_fiat"
            }
          },
          {
            "description": "Pass `true` to relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if no match is found for 1 or more requested cryptocurrencies. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned.",
            "name": "skip_invalid",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "tags": ["deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Cryptocurrency_Quotes_Latest_-_Response_Model"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_400_Error_Object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_401_Error_Object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_403_Error_Object"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_429_Error_Object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_500_Error_Object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/cryptocurrency/trending/gainers-losers": {
      "get": {
        "summary": "Trending Gainers & Losers",
        "operationId": "getV1CryptocurrencyTrendingGainerslosers",
        "description": "Returns a paginated list of all trending cryptocurrencies, determined and sorted by the largest price gains or losses.\n\n\nYou may sort against any of the following:  \n**percent_change_24h**: 24 hour trading price percentage change for each currency.\n\n**This endpoint is available on the following <a href=\"https://coinmarketcap.com/api/features\" target=\"_blank\">API plans</a>:**\n  - Startup\n  - Standard\n  - Professional\n  - Enterprise\n\n**Cache / Update frequency:** Every 10 minutes.  \n**Plan credit use:** 1 call credit per 200 cryptocurrencies returned (rounded up) and 1 call credit per `convert` option beyond the first.  \n**CMC equivalent pages:** Our cryptocurrency Gainers & Losers page [coinmarketcap.com/gainers-losers/](https://coinmarketcap.com/gainers-losers/).",
        "parameters": [
          {
            "description": "Optionally offset the start (1-based index) of the paginated list of items to return.",
            "name": "start",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "description": "Optionally specify the number of results to return. Use this parameter and the \"start\" parameter to determine your own pagination size.",
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 1000,
              "default": 100
            }
          },
          {
            "description": "Adjusts the overall window of time for the biggest gainers and losers.",
            "name": "time_period",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["1h", "24h", "30d", "7d"],
              "default": "24h"
            }
          },
          {
            "description": "Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \"quote\" object.",
            "name": "convert",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-,]+(?:,[0-9A-Za-z$@\\-]+)*$"
            }
          },
          {
            "description": "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to `convert` outside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used when `convert` is used.",
            "name": "convert_id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\d+(?:,\\d+)*$"
            }
          },
          {
            "description": "What field to sort the list of cryptocurrencies by.",
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["percent_change_24h"],
              "default": "percent_change_24h"
            }
          },
          {
            "description": "The direction in which to order cryptocurrencies against the specified sort.",
            "name": "sort_dir",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"]
            }
          }
        ],
        "tags": ["cryptocurrency"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Cryptocurrency_Trending_Gainers_Losers_-_Response_Model"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_400_Error_Object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_401_Error_Object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_403_Error_Object"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_429_Error_Object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_500_Error_Object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/cryptocurrency/trending/latest": {
      "get": {
        "summary": "Trending Latest",
        "operationId": "getV1CryptocurrencyTrendingLatest",
        "description": "Returns a paginated list of all trending cryptocurrency market data, determined and sorted by CoinMarketCap search volume.\n\n\n\n  **This endpoint is available on the following <a href=\"https://coinmarketcap.com/api/features\" target=\"_blank\">API plans</a>:**\n  - Startup\n  - Standard\n  - Professional\n  - Enterprise\n\n**Cache / Update frequency:** Every 10 minutes.  \n**Plan credit use:** 1 call credit per 200 cryptocurrencies returned (rounded up) and 1 call credit per `convert` option beyond the first.  \n**CMC equivalent pages:** Our cryptocurrency Trending page [coinmarketcap.com/trending-cryptocurrencies/](https://coinmarketcap.com/trending-cryptocurrencies/).",
        "parameters": [
          {
            "description": "Optionally offset the start (1-based index) of the paginated list of items to return.",
            "name": "start",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "description": "Optionally specify the number of results to return. Use this parameter and the \"start\" parameter to determine your own pagination size.",
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 1000,
              "default": 100
            }
          },
          {
            "description": "Adjusts the overall window of time for the latest trending coins.",
            "name": "time_period",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["24h", "30d", "7d"],
              "default": "24h"
            }
          },
          {
            "description": "Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \"quote\" object.",
            "name": "convert",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-,]+(?:,[0-9A-Za-z$@\\-]+)*$"
            }
          },
          {
            "description": "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to `convert` outside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used when `convert` is used.",
            "name": "convert_id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\d+(?:,\\d+)*$"
            }
          }
        ],
        "tags": ["cryptocurrency"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Cryptocurrency_Trending_Latest_-_Response_Model"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_400_Error_Object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_401_Error_Object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_403_Error_Object"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_429_Error_Object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_500_Error_Object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/cryptocurrency/trending/most-visited": {
      "get": {
        "summary": "Trending Most Visited",
        "operationId": "getV1CryptocurrencyTrendingMostvisited",
        "description": "Returns a paginated list of all trending cryptocurrency market data, determined and sorted by traffic to coin detail pages.\n\n\n\n  **This endpoint is available on the following <a href=\"https://coinmarketcap.com/api/features\" target=\"_blank\">API plans</a>:**\n  - Startup\n  - Standard\n  - Professional\n  - Enterprise\n\n**Cache / Update frequency:** Every 10 minutes.  \n**Plan credit use:** 1 call credit per 200 cryptocurrencies returned (rounded up) and 1 call credit per `convert` option beyond the first.  \n**CMC equivalent pages:** The CoinMarketCap “Most Visited” trending list. [coinmarketcap.com/most-viewed-pages/](https://coinmarketcap.com/most-viewed-pages/).",
        "parameters": [
          {
            "description": "Optionally offset the start (1-based index) of the paginated list of items to return.",
            "name": "start",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "description": "Optionally specify the number of results to return. Use this parameter and the \"start\" parameter to determine your own pagination size.",
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 1000,
              "default": 100
            }
          },
          {
            "description": "Adjusts the overall window of time for most visited currencies.",
            "name": "time_period",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["24h", "30d", "7d"],
              "default": "24h"
            }
          },
          {
            "description": "Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \"quote\" object.",
            "name": "convert",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-,]+(?:,[0-9A-Za-z$@\\-]+)*$"
            }
          },
          {
            "description": "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to `convert` outside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used when `convert` is used.",
            "name": "convert_id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\d+(?:,\\d+)*$"
            }
          }
        ],
        "tags": ["cryptocurrency"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Cryptocurrency_Trending_Most_Visited_-_Response_Model"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_400_Error_Object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_401_Error_Object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_403_Error_Object"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_429_Error_Object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_500_Error_Object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/exchange/listings/latest": {
      "get": {
        "x-actionOnly": true,
        "summary": "Listings Latest",
        "operationId": "getV1ExchangeListingsLatest",
        "description": "Returns a paginated list of all cryptocurrency exchanges including the latest aggregate market data for each exchange. Use the \"convert\" option to return market values in multiple fiat and cryptocurrency conversions in the same call.  \n  \n**This endpoint is available on the following <a href=\"https://coinmarketcap.com/api/features\" target=\"_blank\">API plans</a>:**\n  - ~~Basic~~\n  - ~~Hobbyist~~\n  - ~~Startup~~\n  - Standard\n  - Professional\n  - Enterprise\n\n**Cache / Update frequency:** Every 1 minute.  \n**Plan credit use:** 1 call credit per 100 exchanges returned (rounded up) and 1 call credit per `convert` option beyond the first.  \n**CMC equivalent pages:** Our latest exchange listing and ranking pages like [coinmarketcap.com/rankings/exchanges/](https://coinmarketcap.com/rankings/exchanges/).    \n  \n  ***NOTE:** Use this endpoint if you need a sorted and paginated list of exchanges. If you want to query for market data on a few specific exchanges use /v1/exchange/quotes/latest which is optimized for that purpose. The response data between these endpoints is otherwise the same.*  ",
        "parameters": [
          {
            "description": "Optionally offset the start (1-based index) of the paginated list of items to return.",
            "name": "start",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "description": "Optionally specify the number of results to return. Use this parameter and the \"start\" parameter to determine your own pagination size.",
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 5000,
              "default": 100
            }
          },
          {
            "description": "What field to sort the list of exchanges by.",
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["name", "volume_24h", "volume_24h_adjusted", "exchange_score"],
              "default": "volume_24h"
            }
          },
          {
            "description": "The direction in which to order exchanges against the specified sort.",
            "name": "sort_dir",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"]
            }
          },
          {
            "description": "The type of exchange markets to include in rankings. This field is deprecated. Please use \"all\" for accurate sorting.",
            "name": "market_type",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["fees", "no_fees", "all"],
              "default": "all"
            }
          },
          {
            "description": "The category for this exchange.",
            "name": "category",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["all", "spot", "derivatives", "dex", "lending"],
              "default": "all"
            }
          },
          {
            "description": "Optionally specify a comma-separated list of supplemental data fields to return. Pass `num_market_pairs,traffic_score,rank,exchange_score,effective_liquidity_24h,date_launched,fiats` to include all auxiliary fields.",
            "name": "aux",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(num_market_pairs|traffic_score|rank|exchange_score|effective_liquidity_24h|date_launched|fiats)+(?:,(num_market_pairs|traffic_score|rank|exchange_score|effective_liquidity_24h|date_launched|fiats)+)*$",
              "default": "num_market_pairs,traffic_score,rank,exchange_score,effective_liquidity_24h"
            }
          },
          {
            "description": "Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \"quote\" object.",
            "name": "convert",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-,]+(?:,[0-9A-Za-z$@\\-]+)*$"
            }
          },
          {
            "description": "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to `convert` outside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used when `convert` is used.",
            "name": "convert_id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\d+(?:,\\d+)*$"
            }
          }
        ],
        "tags": ["exchange"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Exchange_Listings_Latest_-_Response_Model"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_400_Error_Object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_401_Error_Object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_403_Error_Object"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_429_Error_Object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_500_Error_Object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/exchange/market-pairs/latest": {
      "get": {
        "summary": "Market Pairs Latest",
        "operationId": "getV1ExchangeMarketpairsLatest",
        "description": "Returns all active market pairs that CoinMarketCap tracks for a given exchange. The latest price and volume information is returned for each market. Use the \"convert\" option to return market values in multiple fiat and cryptocurrency conversions in the same call.'\n\n  **This endpoint is available on the following <a href=\"https://coinmarketcap.com/api/features\" target=\"_blank\">API plans</a>:**\n  - ~~Basic~~\n  - ~~Hobbyist~~\n  - ~~Startup~~\n  - Standard\n  - Professional\n  - Enterprise\n\n**Cache / Update frequency:** Every 60 seconds.  \n**Plan credit use:** 1 call credit per 100 market pairs returned (rounded up) and 1 call credit per `convert` option beyond the first.  \n**CMC equivalent pages:** Our exchange level active markets pages like [coinmarketcap.com/exchanges/binance/](https://coinmarketcap.com/exchanges/binance/).  ",
        "parameters": [
          {
            "description": "A CoinMarketCap exchange ID. Example: \"1\"",
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\d*$"
            }
          },
          {
            "description": "Alternatively pass an exchange \"slug\" (URL friendly all lowercase shorthand version of name with spaces replaced with hyphens). Example: \"binance\". One \"id\" *or* \"slug\" is required.",
            "name": "slug",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-z-]*$"
            }
          },
          {
            "description": "Optionally offset the start (1-based index) of the paginated list of items to return.",
            "name": "start",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "description": "Optionally specify the number of results to return. Use this parameter and the \"start\" parameter to determine your own pagination size.",
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 5000,
              "default": 100
            }
          },
          {
            "description": "Optionally specify a comma-separated list of supplemental data fields to return. Pass `num_market_pairs,category,fee_type,market_url,currency_name,currency_slug,price_quote,effective_liquidity,market_score,market_reputation` to include all auxiliary fields.",
            "name": "aux",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(num_market_pairs|category|fee_type|market_url|currency_name|currency_slug|price_quote|effective_liquidity|market_score|market_reputation)+(?:,(num_market_pairs|category|fee_type|market_url|currency_name|currency_slug|price_quote|effective_liquidity|market_score|market_reputation)+)*$",
              "default": "num_market_pairs,category,fee_type"
            }
          },
          {
            "description": "Optionally include one or more comma-delimited fiat or cryptocurrency IDs to filter market pairs by. For example `?matched_id=2781` would only return BTC markets that matched: \"BTC/USD\" or \"USD/BTC\" for the requested exchange. This parameter cannot be used when `matched_symbol` is used.",
            "name": "matched_id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\d+(?:,\\d+)*$"
            }
          },
          {
            "description": "Optionally include one or more comma-delimited fiat or cryptocurrency symbols to filter market pairs by. For example `?matched_symbol=USD` would only return BTC markets that matched: \"BTC/USD\" or \"USD/BTC\" for the requested exchange. This parameter cannot be used when `matched_id` is used.",
            "name": "matched_symbol",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-,]+(?:,[0-9A-Za-z$@\\-]+)*$"
            }
          },
          {
            "description": "The category of trading this market falls under. Spot markets are the most common but options include derivatives and OTC.",
            "name": "category",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["all", "spot", "derivatives", "otc", "futures", "perpetual"],
              "default": "all"
            }
          },
          {
            "description": "The fee type the exchange enforces for this market.",
            "name": "fee_type",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["all", "percentage", "no-fees", "transactional-mining", "unknown"],
              "default": "all"
            }
          },
          {
            "description": "Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \"quote\" object.",
            "name": "convert",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-,]+(?:,[0-9A-Za-z$@\\-]+)*$"
            }
          },
          {
            "description": "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to `convert` outside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used when `convert` is used.",
            "name": "convert_id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\d+(?:,\\d+)*$"
            }
          }
        ],
        "tags": ["exchange"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Exchange_Market_Pairs_Latest_-_Response_Model"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_400_Error_Object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_401_Error_Object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_403_Error_Object"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_429_Error_Object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_500_Error_Object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/exchange/quotes/historical": {
      "get": {
        "summary": "Quotes Historical",
        "operationId": "getV1ExchangeQuotesHistorical",
        "description": "Returns an interval of historic quotes for any exchange based on time and interval parameters.\n\n**Technical Notes**\n- A historic quote for every \"interval\" period between your \"time_start\" and \"time_end\" will be returned.  \n- If a \"time_start\" is not supplied, the \"interval\" will be applied in reverse from \"time_end\".  \n- If \"time_end\" is not supplied, it defaults to the current time.  \n- At each \"interval\" period, the historic quote that is closest in time to the requested time will be returned.  \n- If no historic quotes are available in a given \"interval\" period up until the next interval period, it will be skipped. \n- This endpoint supports requesting multiple exchanges in the same call. Please note the API response will be wrapped in an additional object in this case.   \n\n**Interval Options**  \nThere are 2 types of time interval formats that may be used for \"interval\".  \n\nThe first are calendar year and time constants in UTC time:  \n**\"hourly\"** - Get the first quote available at the beginning of each calendar hour.  \n**\"daily\"** - Get the first quote available at the beginning of each calendar day.  \n**\"weekly\"** - Get the first quote available at the beginning of each calendar week.  \n**\"monthly\"** - Get the first quote available at the beginning of each calendar month.  \n**\"yearly\"** - Get the first quote available at the beginning of each calendar year.  \n\nThe second are relative time intervals.  \n**\"m\"**: Get the first quote available every \"m\" minutes (60 second intervals). Supported minutes are: \"5m\", \"10m\", \"15m\", \"30m\", \"45m\".  \n**\"h\"**: Get the first quote available every \"h\" hours (3600 second intervals). Supported hour intervals are: \"1h\", \"2h\", \"3h\", \"4h\", \"6h\", \"12h\".  \n**\"d\"**: Get the first quote available every \"d\" days (86400 second intervals). Supported day intervals are: \"1d\", \"2d\", \"3d\", \"7d\", \"14d\", \"15d\", \"30d\", \"60d\", \"90d\", \"365d\".  \n\n**This endpoint is available on the following <a href=\"https://coinmarketcap.com/api/features\" target=\"_blank\">API plans</a>:**\n  - ~~Basic~~\n  - ~~Hobbyist~~\n  - ~~Startup~~\n  - Standard (3 months)\n  - Professional (Up to 12 months)\n  - Enterprise (Up to 6 years)\n\n**Note:** You may use the /exchange/map endpoint to receive a list of earliest historical dates that may be fetched for each exchange as  `first_historical_data`. This timestamp will either be the date CoinMarketCap first started tracking the exchange or 2018-04-26T00:45:00.000Z, the earliest date this type of historical data is available for.\n  \n**Cache / Update frequency:** Every 5 minutes.  \n**Plan credit use:** 1 call credit per 100 historical data points returned (rounded up) and 1 call credit per `convert` option beyond the first.  \n**CMC equivalent pages:** No equivalent, this data is only available via API outside of our volume sparkline charts in [coinmarketcap.com/rankings/exchanges/](https://coinmarketcap.com/rankings/exchanges/).  ",
        "parameters": [
          {
            "description": "One or more comma-separated exchange CoinMarketCap ids. Example: \"24,270\"",
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\d+(?:,\\d+)*$"
            }
          },
          {
            "description": "Alternatively, one or more comma-separated exchange names in URL friendly shorthand \"slug\" format (all lowercase, spaces replaced with hyphens). Example: \"binance,kraken\". At least one \"id\" *or* \"slug\" is required.",
            "name": "slug",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-z-]+(?:,[0-9a-z-]+)*$"
            }
          },
          {
            "description": "Timestamp (Unix or ISO 8601) to start returning quotes for. Optional, if not passed, we'll return quotes calculated in reverse from \"time_end\".",
            "name": "time_start",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Timestamp (Unix or ISO 8601) to stop returning quotes for (inclusive). Optional, if not passed, we'll default to the current time. If no \"time_start\" is passed, we return quotes in reverse order starting from this time.",
            "name": "time_end",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of interval periods to return results for. Optional, required if both \"time_start\" and \"time_end\" aren't supplied. The default is 10 items. The current query limit is 10000.",
            "name": "count",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 10000,
              "default": 10
            }
          },
          {
            "description": "Interval of time to return data points for. See details in endpoint description.",
            "name": "interval",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "yearly",
                "monthly",
                "weekly",
                "daily",
                "hourly",
                "5m",
                "10m",
                "15m",
                "30m",
                "45m",
                "1h",
                "2h",
                "3h",
                "4h",
                "6h",
                "12h",
                "24h",
                "1d",
                "2d",
                "3d",
                "7d",
                "14d",
                "15d",
                "30d",
                "60d",
                "90d",
                "365d"
              ],
              "default": "5m"
            }
          },
          {
            "description": "By default market quotes are returned in USD. Optionally calculate market quotes in up to 3 other fiat currencies or cryptocurrencies.",
            "name": "convert",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-,]+(?:,[0-9A-Za-z$@\\-]+)*$"
            }
          },
          {
            "description": "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to `convert` outside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used when `convert` is used.",
            "name": "convert_id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\d+(?:,\\d+)*$"
            }
          }
        ],
        "tags": ["exchange"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Exchange_Historical_Quotes_-_Response_Model"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_400_Error_Object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_401_Error_Object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_403_Error_Object"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_429_Error_Object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_500_Error_Object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/exchange/quotes/latest": {
      "get": {
        "summary": "Quotes Latest",
        "operationId": "getV1ExchangeQuotesLatest",
        "description": "Returns the latest aggregate market data for 1 or more exchanges. Use the \"convert\" option to return market values in multiple fiat and cryptocurrency conversions in the same call.\n\n**This endpoint is available on the following <a href=\"https://coinmarketcap.com/api/features\" target=\"_blank\">API plans</a>:**\n- ~~Basic~~\n- ~~Hobbyist~~\n- ~~Startup~~\n- Standard\n- Professional\n- Enterprise\n\n**Cache / Update frequency:** Every 60 seconds.  \n**Plan credit use:** 1 call credit per 100 exchanges returned (rounded up) and 1 call credit per `convert` option beyond the first.  \n**CMC equivalent pages:** Latest market data summary for specific exchanges like [coinmarketcap.com/rankings/exchanges/](https://coinmarketcap.com/rankings/exchanges/).  ",
        "parameters": [
          {
            "description": "One or more comma-separated CoinMarketCap exchange IDs. Example: \"1,2\"",
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\d+(?:,\\d+)*$"
            }
          },
          {
            "description": "Alternatively, pass a comma-separated list of exchange \"slugs\" (URL friendly all lowercase shorthand version of name with spaces replaced with hyphens). Example: \"binance,gdax\". At least one \"id\" *or* \"slug\" is required.",
            "name": "slug",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-z-]+(?:,[0-9a-z-]+)*$"
            }
          },
          {
            "description": "Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \"quote\" object.",
            "name": "convert",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-,]+(?:,[0-9A-Za-z$@\\-]+)*$"
            }
          },
          {
            "description": "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to `convert` outside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used when `convert` is used.",
            "name": "convert_id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\d+(?:,\\d+)*$"
            }
          },
          {
            "description": "Optionally specify a comma-separated list of supplemental data fields to return. Pass `num_market_pairs,traffic_score,rank,exchange_score,liquidity_score,effective_liquidity_24h` to include all auxiliary fields.",
            "name": "aux",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(num_market_pairs|traffic_score|rank|exchange_score|liquidity_score|effective_liquidity_24h)+(?:,(num_market_pairs|traffic_score|rank|exchange_score|liquidity_score|effective_liquidity_24h)+)*$",
              "default": "num_market_pairs,traffic_score,rank,exchange_score,liquidity_score,effective_liquidity_24h"
            }
          }
        ],
        "tags": ["exchange"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Exchange_Quotes_Latest_-_Response_Model"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_400_Error_Object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_401_Error_Object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_403_Error_Object"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_429_Error_Object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_500_Error_Object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/global-metrics/quotes/historical": {
      "get": {
        "summary": "Quotes Historical",
        "operationId": "getV1GlobalmetricsQuotesHistorical",
        "description": "Returns an interval of historical global cryptocurrency market metrics based on time and interval parameters.\n\n**Technical Notes**\n- A historic quote for every \"interval\" period between your \"time_start\" and \"time_end\" will be returned.\n- If a \"time_start\" is not supplied, the \"interval\" will be applied in reverse from \"time_end\".\n- If \"time_end\" is not supplied, it defaults to the current time.\n- At each \"interval\" period, the historic quote that is closest in time to the requested time will be returned.\n- If no historic quotes are available in a given \"interval\" period up until the next interval period, it will be skipped.\n\n**Interval Options**  \nThere are 2 types of time interval formats that may be used for \"interval\".  \n\nThe first are calendar year and time constants in UTC time:  \n**\"hourly\"** - Get the first quote available at the beginning of each calendar hour.  \n**\"daily\"** - Get the first quote available at the beginning of each calendar day.  \n**\"weekly\"** - Get the first quote available at the beginning of each calendar week.  \n**\"monthly\"** - Get the first quote available at the beginning of each calendar month.  \n**\"yearly\"** - Get the first quote available at the beginning of each calendar year.  \n  \nThe second are relative time intervals.  \n**\"m\"**: Get the first quote available every \"m\" minutes (60 second intervals). Supported minutes are: \"5m\", \"10m\", \"15m\", \"30m\", \"45m\".  \n**\"h\"**: Get the first quote available every \"h\" hours (3600 second intervals). Supported hour intervals are: \"1h\", \"2h\", \"3h\", \"4h\", \"6h\", \"12h\".  \n**\"d\"**: Get the first quote available every \"d\" days (86400 second intervals). Supported day intervals are: \"1d\", \"2d\", \"3d\", \"7d\", \"14d\", \"15d\", \"30d\", \"60d\", \"90d\", \"365d\".  \n\n**This endpoint is available on the following <a href=\"https://coinmarketcap.com/api/features\" target=\"_blank\">API plans</a>:**\n- ~~Basic~~\n- ~~Hobbyist~~\n- ~~Startup~~\n- Standard (3 months)\n- Professional (12 months)\n- Enterprise (Up to 6 years)\n\n**Cache / Update frequency:** Every 5 minutes.  \n**Plan credit use:** 1 call credit per 100 historical data points returned (rounded up).  \n**CMC equivalent pages:** Our Total Market Capitalization global chart [coinmarketcap.com/charts/](https://coinmarketcap.com/charts/).  ",
        "parameters": [
          {
            "description": "Timestamp (Unix or ISO 8601) to start returning quotes for. Optional, if not passed, we'll return quotes calculated in reverse from \"time_end\".",
            "name": "time_start",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Timestamp (Unix or ISO 8601) to stop returning quotes for (inclusive). Optional, if not passed, we'll default to the current time. If no \"time_start\" is passed, we return quotes in reverse order starting from this time.",
            "name": "time_end",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of interval periods to return results for. Optional, required if both \"time_start\" and \"time_end\" aren't supplied. The default is 10 items. The current query limit is 10000.",
            "name": "count",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 10000,
              "default": 10
            }
          },
          {
            "description": "Interval of time to return data points for. See details in endpoint description.",
            "name": "interval",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "yearly",
                "monthly",
                "weekly",
                "daily",
                "hourly",
                "5m",
                "10m",
                "15m",
                "30m",
                "45m",
                "1h",
                "2h",
                "3h",
                "4h",
                "6h",
                "12h",
                "24h",
                "1d",
                "2d",
                "3d",
                "7d",
                "14d",
                "15d",
                "30d",
                "60d",
                "90d",
                "365d"
              ],
              "default": "1d"
            }
          },
          {
            "description": "By default market quotes are returned in USD. Optionally calculate market quotes in up to 3 other fiat currencies or cryptocurrencies.",
            "name": "convert",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-,]+(?:,[0-9A-Za-z$@\\-]+)*$"
            }
          },
          {
            "description": "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to `convert` outside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used when `convert` is used.",
            "name": "convert_id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\d+(?:,\\d+)*$"
            }
          },
          {
            "description": "Optionally specify a comma-separated list of supplemental data fields to return. Pass `btc_dominance,active_cryptocurrencies,active_exchanges,active_market_pairs,total_volume_24h,total_volume_24h_reported,altcoin_market_cap,altcoin_volume_24h,altcoin_volume_24h_reported,search_interval` to include all auxiliary fields.",
            "name": "aux",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(btc_dominance|active_cryptocurrencies|active_exchanges|active_market_pairs|total_volume_24h|total_volume_24h_reported|altcoin_market_cap|altcoin_volume_24h|altcoin_volume_24h_reported|search_interval)+(?:,(btc_dominance|active_cryptocurrencies|active_exchanges|active_market_pairs|total_volume_24h|total_volume_24h_reported|altcoin_market_cap|altcoin_volume_24h|altcoin_volume_24h_reported|search_interval)+)*$",
              "default": "btc_dominance,active_cryptocurrencies,active_exchanges,active_market_pairs,total_volume_24h,total_volume_24h_reported,altcoin_market_cap,altcoin_volume_24h,altcoin_volume_24h_reported"
            }
          }
        ],
        "tags": ["global-metrics"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Global_Metrics_Quotes_Historic_-_Response_Model"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_400_Error_Object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_401_Error_Object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_403_Error_Object"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_429_Error_Object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_500_Error_Object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/global-metrics/quotes/latest": {
      "get": {
        "summary": "Quotes Latest",
        "operationId": "getV1GlobalmetricsQuotesLatest",
        "description": "Returns the latest global cryptocurrency market metrics. Use the \"convert\" option to return market values in multiple fiat and cryptocurrency conversions in the same call.\n\n**This endpoint is available on the following <a href=\"https://coinmarketcap.com/api/features\" target=\"_blank\">API plans</a>:**\n- Basic\n- Hobbyist\n- Startup\n- Standard\n- Professional\n- Enterprise\n\n**Cache / Update frequency:** Every 5 minute.   \n**Plan credit use:** 1 call credit per call and 1 call credit per `convert` option beyond the first.   \n**CMC equivalent pages:** The latest aggregate global market stats ticker across all CMC pages like [coinmarketcap.com](https://coinmarketcap.com/).  ",
        "parameters": [
          {
            "description": "Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \"quote\" object.",
            "name": "convert",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-,]+(?:,[0-9A-Za-z$@\\-]+)*$"
            }
          },
          {
            "description": "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to `convert` outside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used when `convert` is used.",
            "name": "convert_id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\d+(?:,\\d+)*$"
            }
          }
        ],
        "tags": ["global-metrics"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Global_Metrics_Quotes_Latest_-_Response_Model"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_400_Error_Object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_401_Error_Object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_403_Error_Object"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_429_Error_Object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_500_Error_Object"
                }
              }
            }
          }
        }
      }
    },
    "/v2/cryptocurrency/market-pairs/latest": {
      "get": {
        "summary": "Market Pairs Latest v2",
        "operationId": "getV2CryptocurrencyMarketpairsLatest",
        "description": "Lists all active market pairs that CoinMarketCap tracks for a given cryptocurrency or fiat currency. All markets with this currency as the pair base *or* pair quote will be returned. The latest price and volume information is returned for each market. Use the \"convert\" option to return market values in multiple fiat and cryptocurrency conversions in the same call.\n\n\n**Please note**: This documentation relates to our updated V2 endpoint, which may be incompatible with our V1 versions. Documentation for deprecated endpoints can be found <a href=\"#tag/deprecated\">here</a>.<br><br>\n  **This endpoint is available on the following <a href=\"https://coinmarketcap.com/api/features\" target=\"_blank\">API plans</a>:**\n  - ~~Basic~~\n  - ~~Hobbyist~~\n  - ~~Startup~~\n  - Standard\n  - Professional\n  - Enterprise\n\n**Cache / Update frequency:** Every 1 minute.  \n**Plan credit use:** 1 call credit per 100 market pairs returned (rounded up) and 1 call credit per `convert` option beyond the first.  \n**CMC equivalent pages:** Our active cryptocurrency markets pages like [coinmarketcap.com/currencies/bitcoin/#markets](https://coinmarketcap.com/currencies/bitcoin/#markets).  ",
        "parameters": [
          {
            "description": "A cryptocurrency or fiat currency by CoinMarketCap ID to list market pairs for. Example: \"1\"",
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Alternatively pass a cryptocurrency by slug. Example: \"bitcoin\"",
            "name": "slug",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-z-]*$"
            }
          },
          {
            "description": "Alternatively pass a cryptocurrency by symbol. Fiat currencies are not supported by this field. Example: \"BTC\". A single cryptocurrency \"id\", \"slug\", *or* \"symbol\" is required.",
            "name": "symbol",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-]*$"
            }
          },
          {
            "description": "Optionally offset the start (1-based index) of the paginated list of items to return.",
            "name": "start",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "description": "Optionally specify the number of results to return. Use this parameter and the \"start\" parameter to determine your own pagination size.",
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 5000,
              "default": 100
            }
          },
          {
            "description": "Optionally specify the sort direction of markets returned.",
            "name": "sort_dir",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "default": "desc"
            }
          },
          {
            "description": "Optionally specify the sort order of markets returned. By default we return a strict sort on 24 hour reported volume. Pass `cmc_rank` to return a CMC methodology based sort where markets with excluded volumes are returned last.",
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "volume_24h_strict",
                "cmc_rank",
                "cmc_rank_advanced",
                "effective_liquidity",
                "market_score",
                "market_reputation"
              ],
              "default": "volume_24h_strict"
            }
          },
          {
            "description": "Optionally specify a comma-separated list of supplemental data fields to return. Pass `num_market_pairs,category,fee_type,market_url,currency_name,currency_slug,price_quote,notice,cmc_rank,effective_liquidity,market_score,market_reputation` to include all auxiliary fields.",
            "name": "aux",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(num_market_pairs|category|fee_type|market_url|currency_name|currency_slug|price_quote|notice|cmc_rank|effective_liquidity|market_score|market_reputation)+(?:,(num_market_pairs|category|fee_type|market_url|currency_name|currency_slug|price_quote|notice|cmc_rank|effective_liquidity|market_score|market_reputation)+)*$",
              "default": "num_market_pairs,category,fee_type"
            }
          },
          {
            "description": "Optionally include one or more fiat or cryptocurrency IDs to filter market pairs by. For example `?id=1&matched_id=2781` would only return BTC markets that matched: \"BTC/USD\" or \"USD/BTC\". This parameter cannot be used when `matched_symbol` is used.",
            "name": "matched_id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\d+(?:,\\d+)*$"
            }
          },
          {
            "description": "Optionally include one or more fiat or cryptocurrency symbols to filter market pairs by. For example `?symbol=BTC&matched_symbol=USD` would only return BTC markets that matched: \"BTC/USD\" or \"USD/BTC\". This parameter cannot be used when `matched_id` is used.",
            "name": "matched_symbol",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-,]+(?:,[0-9A-Za-z$@\\-]+)*$"
            }
          },
          {
            "description": "The category of trading this market falls under. Spot markets are the most common but options include derivatives and OTC.",
            "name": "category",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["all", "spot", "derivatives", "otc", "perpetual"],
              "default": "all"
            }
          },
          {
            "description": "The fee type the exchange enforces for this market.",
            "name": "fee_type",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["all", "percentage", "no-fees", "transactional-mining", "unknown"],
              "default": "all"
            }
          },
          {
            "description": "Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \"quote\" object.",
            "name": "convert",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-,]+(?:,[0-9A-Za-z$@\\-]+)*$"
            }
          },
          {
            "description": "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to `convert` outside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used when `convert` is used.",
            "name": "convert_id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\d+(?:,\\d+)*$"
            }
          }
        ],
        "tags": ["cryptocurrency"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Cryptocurrency_Market_Pairs_Latest_-_Response_Model"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_400_Error_Object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_401_Error_Object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_403_Error_Object"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_429_Error_Object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_500_Error_Object"
                }
              }
            }
          }
        }
      }
    },
    "/v2/cryptocurrency/ohlcv/historical": {
      "get": {
        "summary": "OHLCV Historical v2",
        "operationId": "getV2CryptocurrencyOhlcvHistorical",
        "description": "Returns historical OHLCV (Open, High, Low, Close, Volume) data along with market cap for any cryptocurrency using time interval parameters. Currently daily and hourly OHLCV periods are supported. Volume is not currently supported for hourly OHLCV intervals before 2020-09-22.\n\n**Please note**: This documentation relates to our updated V2 endpoint, which may be incompatible with our V1 versions. Documentation for deprecated endpoints can be found <a href=\"#tag/deprecated\">here</a>.<br><br>  \n**Technical Notes**\n- Only the date portion of the timestamp is used for daily OHLCV so it's recommended to send an ISO date format like \"2018-09-19\" without time for this \"time_period\". \n- One OHLCV quote will be returned for every \"time_period\" between your \"time_start\" (exclusive) and \"time_end\" (inclusive).  \n- If a \"time_start\" is not supplied, the \"time_period\" will be calculated in reverse from \"time_end\" using the \"count\" parameter which defaults to 10 results.  \n- If \"time_end\" is not supplied, it defaults to the current time.   \n- If you don't need every \"time_period\" between your dates you may adjust the frequency that \"time_period\" is sampled using the \"interval\" parameter. For example with \"time_period\" set to \"daily\" you may set \"interval\" to \"2d\" to get the daily OHLCV for every other day. You could set \"interval\" to \"monthly\" to get the first daily OHLCV for each month, or set it to \"yearly\" to get the daily OHLCV value against the same date every year.  \n\n**Implementation Tips**\n- If querying for a specific OHLCV date your \"time_start\" should specify a timestamp of 1 interval prior as \"time_start\" is an exclusive time parameter (as opposed to \"time_end\" which is inclusive to the search). This means that when you pass a \"time_start\" results will be returned for the *next* complete \"time_period\". For example, if you are querying for a daily OHLCV datapoint for 2018-11-30 your \"time_start\" should be \"2018-11-29\".   \n- If only specifying a \"count\" parameter to return latest OHLCV periods, your \"count\" should be 1 number higher than the number of results you expect to receive. \"Count\" defines the number of \"time_period\" intervals queried, *not* the number of results to return, and this includes the currently active time period which is incomplete when working backwards from current time. For example, if you want the last daily OHLCV value available simply pass \"count=2\" to skip the incomplete active time period.\n- This endpoint supports requesting multiple cryptocurrencies in the same call. Please note the API response will be wrapped in an additional object in this case.  \n  \n**Interval Options**  \n  \nThere are 2 types of time interval formats that may be used for \"time_period\" and \"interval\" parameters. For \"time_period\" these return aggregate OHLCV data from the beginning to end of each interval period. Apply these time intervals to \"interval\" to adjust how frequently \"time_period\" is sampled.  \n  \nThe first are calendar year and time constants in UTC time:  \n**\"hourly\"** - Hour intervals in UTC.  \n**\"daily\"** - Calendar day intervals for each UTC day.  \n**\"weekly\"** - Calendar week intervals for each calendar week.  \n**\"monthly\"** - Calendar month intervals for each calendar month.    \n**\"yearly\"** - Calendar year intervals for each calendar year.  \n  \nThe second are relative time intervals.  \n**\"h\"**: Get the first quote available every \"h\" hours (3600 second intervals). Supported hour intervals are: \"1h\", \"2h\", \"3h\", \"4h\", \"6h\", \"12h\".  \n**\"d\"**: Time periods that repeat every \"d\" days (86400 second intervals). Supported day intervals are: \"1d\", \"2d\", \"3d\", \"7d\", \"14d\", \"15d\", \"30d\", \"60d\", \"90d\", \"365d\".  \n  \nPlease note that \"time_period\" currently supports the \"daily\" and \"hourly\" options. \"interval\" supports all interval options.  \n  \n**This endpoint is available on the following <a href=\"https://coinmarketcap.com/api/features\" target=\"_blank\">API plans</a>:**  \n- ~~Basic~~\n- ~~Hobbyist~~\n- Startup (1 month)\n- Standard (3 months)\n- Professional (12 months)\n- Enterprise (Up to 6 years)\n\n**Cache / Update frequency:** Latest Daily OHLCV record is available ~5 to ~10 minutes after each midnight UTC. The latest hourly OHLCV record is available 5 minutes after each UTC hour.  \n**Plan credit use:** 1 call credit per 100 OHLCV data points returned (rounded up) and 1 call credit per `convert` option beyond the first.  \n**CMC equivalent pages:** Our historical cryptocurrency data pages like [coinmarketcap.com/currencies/bitcoin/historical-data/](https://coinmarketcap.com/currencies/bitcoin/historical-data/).",
        "parameters": [
          {
            "description": "One or more comma-separated CoinMarketCap cryptocurrency IDs. Example: \"1,1027\"",
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\d+(?:,\\d+)*$"
            }
          },
          {
            "description": "Alternatively pass a comma-separated list of cryptocurrency slugs. Example: \"bitcoin,ethereum\"",
            "name": "slug",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-z-]+(?:,[0-9a-z-]+)*$"
            }
          },
          {
            "description": "Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \"BTC,ETH\". At least one \"id\" *or* \"slug\" *or* \"symbol\" is required for this request.",
            "name": "symbol",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-,]+(?:,[0-9A-Za-z$@\\-]+)*$"
            }
          },
          {
            "description": "Time period to return OHLCV data for. The default is \"daily\". See the main endpoint description for details.",
            "name": "time_period",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["daily", "hourly"],
              "default": "daily"
            }
          },
          {
            "description": "Timestamp (Unix or ISO 8601) to start returning OHLCV time periods for. Only the date portion of the timestamp is used for daily OHLCV so it's recommended to send an ISO date format like \"2018-09-19\" without time.",
            "name": "time_start",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Timestamp (Unix or ISO 8601) to stop returning OHLCV time periods for (inclusive). Optional, if not passed we'll default to the current time. Only the date portion of the timestamp is used for daily OHLCV so it's recommended to send an ISO date format like \"2018-09-19\" without time.",
            "name": "time_end",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Optionally limit the number of time periods to return results for. The default is 10 items. The current query limit is 10000 items.",
            "name": "count",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 10000,
              "default": 10
            }
          },
          {
            "description": "Optionally adjust the interval that \"time_period\" is sampled. See main endpoint description for available options.",
            "name": "interval",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "hourly",
                "daily",
                "weekly",
                "monthly",
                "yearly",
                "1h",
                "2h",
                "3h",
                "4h",
                "6h",
                "12h",
                "1d",
                "2d",
                "3d",
                "7d",
                "14d",
                "15d",
                "30d",
                "60d",
                "90d",
                "365d"
              ],
              "default": "daily"
            }
          },
          {
            "description": "By default market quotes are returned in USD. Optionally calculate market quotes in up to 3 fiat currencies or cryptocurrencies.",
            "name": "convert",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-,]+(?:,[0-9A-Za-z$@\\-]+)*$"
            }
          },
          {
            "description": "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to `convert` outside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used when `convert` is used.",
            "name": "convert_id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\d+(?:,\\d+)*$"
            }
          },
          {
            "description": "Pass `true` to relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if any invalid cryptocurrencies are requested or a cryptocurrency does not have matching records in the requested timeframe. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned.",
            "name": "skip_invalid",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "tags": ["cryptocurrency"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Cryptocurrency_OHLCV_Historical_-_Response_Model"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_400_Error_Object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_401_Error_Object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_403_Error_Object"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_429_Error_Object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_500_Error_Object"
                }
              }
            }
          }
        }
      }
    },
    "/v2/cryptocurrency/ohlcv/latest": {
      "get": {
        "summary": "OHLCV Latest v2",
        "operationId": "getV2CryptocurrencyOhlcvLatest",
        "description": "Returns the latest OHLCV (Open, High, Low, Close, Volume) market values for one or more cryptocurrencies for the current UTC day. Since the current UTC day is still active these values are updated frequently. You can find the final calculated OHLCV values for the last completed UTC day along with all historic days using /cryptocurrency/ohlcv/historical. \n\n**Please note**: This documentation relates to our updated V2 endpoint, which may be incompatible with our V1 versions. Documentation for deprecated endpoints can be found <a href=\"#tag/deprecated\">here</a>.<br><br>\n  **This endpoint is available on the following <a href=\"https://coinmarketcap.com/api/features\" target=\"_blank\">API plans</a>:**\n  - ~~Basic~~\n  - ~~Hobbyist~~\n  - Startup\n  - Standard\n  - Professional\n  - Enterprise\n\n  **Cache / Update frequency:** Every 10 minutes. Additional OHLCV intervals and 1 minute updates will be available in the future.  \n  **Plan credit use:** 1 call credit per 100 OHLCV values returned (rounded up) and 1 call credit per `convert` option beyond the first.  \n  **CMC equivalent pages:** No equivalent, this data is only available via API.",
        "parameters": [
          {
            "description": "One or more comma-separated cryptocurrency CoinMarketCap IDs. Example: 1,2",
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\d+(?:,\\d+)*$"
            }
          },
          {
            "description": "Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \"BTC,ETH\". At least one \"id\" *or* \"symbol\" is required.",
            "name": "symbol",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-,]+(?:,[0-9A-Za-z$@\\-]+)*$"
            }
          },
          {
            "description": "Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \"quote\" object.",
            "name": "convert",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-,]+(?:,[0-9A-Za-z$@\\-]+)*$"
            }
          },
          {
            "description": "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to `convert` outside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used when `convert` is used.",
            "name": "convert_id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\d+(?:,\\d+)*$"
            }
          },
          {
            "description": "Pass `true` to relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if any invalid cryptocurrencies are requested or a cryptocurrency does not have matching records in the requested timeframe. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned.",
            "name": "skip_invalid",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "tags": ["cryptocurrency"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Cryptocurrency_OHLCV_Latest_-_Response_Model"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_400_Error_Object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_401_Error_Object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_403_Error_Object"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_429_Error_Object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_500_Error_Object"
                }
              }
            }
          }
        }
      }
    },
    "/v2/cryptocurrency/price-performance-stats/latest": {
      "get": {
        "summary": "Price Performance Stats v2",
        "operationId": "getV2CryptocurrencyPriceperformancestatsLatest",
        "description": "Returns price performance statistics for one or more cryptocurrencies including launch price ROI and all-time high / all-time low. Stats are returned for an `all_time` period by default. UTC `yesterday` and a number of *rolling time periods* may be requested using the `time_period` parameter. Utilize the `convert` parameter to translate values into multiple fiats or cryptocurrencies using historical rates.\n\n\n**Please note**: This documentation relates to our updated V2 endpoint, which may be incompatible with our V1 versions. Documentation for deprecated endpoints can be found <a href=\"#tag/deprecated\">here</a>.<br><br>\n  **This endpoint is available on the following <a href=\"https://coinmarketcap.com/api/features\" target=\"_blank\">API plans</a>:**\n  - ~~Basic~~\n  - ~~Hobbyist~~\n  - Startup\n  - Standard\n  - Professional\n  - Enterprise\n\n**Cache / Update frequency:** Every 60 seconds.  \n**Plan credit use:** 1 call credit per 100 cryptocurrencies returned (rounded up) and 1 call credit per `convert` option beyond the first.  \n**CMC equivalent pages:** The statistics module displayed on cryptocurrency pages like [Bitcoin](https://coinmarketcap.com/currencies/bitcoin/).     \n  \n***NOTE:** You may also use [/cryptocurrency/ohlcv/historical](#operation/getV1CryptocurrencyOhlcvHistorical) for traditional OHLCV data at historical daily and hourly intervals. You may also use [/v1/cryptocurrency/ohlcv/latest](#operation/getV1CryptocurrencyOhlcvLatest) for OHLCV data for the current UTC day.* ",
        "parameters": [
          {
            "description": "One or more comma-separated cryptocurrency CoinMarketCap IDs. Example: 1,2",
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\d+(?:,\\d+)*$"
            }
          },
          {
            "description": "Alternatively pass a comma-separated list of cryptocurrency slugs. Example: \"bitcoin,ethereum\"",
            "name": "slug",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-z-]+(?:,[0-9a-z-]+)*$"
            }
          },
          {
            "description": "Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \"BTC,ETH\". At least one \"id\" *or* \"slug\" *or* \"symbol\" is required for this request.",
            "name": "symbol",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-,]+(?:,[0-9A-Za-z$@\\-]+)*$"
            }
          },
          {
            "description": "Specify one or more comma-delimited time periods to return stats for. `all_time` is the default. Pass `all_time,yesterday,24h,7d,30d,90d,365d` to return all supported time periods. All rolling periods have a rolling close time of the current request time. For example `24h` would have a close time of now and an open time of 24 hours before now. *Please note: `yesterday` is a UTC period and currently does not currently support `high` and `low` timestamps.*",
            "name": "time_period",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(all_time|yesterday|24h|7d|30d|90d|365d)+(?:,(all_time|yesterday|24h|7d|30d|90d|365d)+)*$",
              "default": "all_time"
            }
          },
          {
            "description": "Optionally calculate quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \"quote\" object.",
            "name": "convert",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-,]+(?:,[0-9A-Za-z$@\\-]+)*$"
            }
          },
          {
            "description": "Optionally calculate quotes by CoinMarketCap ID instead of symbol. This option is identical to `convert` outside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used when `convert` is used.",
            "name": "convert_id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\d+(?:,\\d+)*$"
            }
          },
          {
            "description": "Pass `true` to relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if no match is found for 1 or more requested cryptocurrencies. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned.",
            "name": "skip_invalid",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "tags": ["cryptocurrency"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Cryptocurrency_Price_Performance_Stats_Latest_-_Response_Model"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_400_Error_Object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_401_Error_Object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_403_Error_Object"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_429_Error_Object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_500_Error_Object"
                }
              }
            }
          }
        }
      }
    },
    "/v2/cryptocurrency/quotes/historical": {
      "get": {
        "summary": "Quotes Historical v2",
        "operationId": "getV2CryptocurrencyQuotesHistorical",
        "description": "Returns an interval of historic market quotes for any cryptocurrency based on time and interval parameters.\n\n**Please note**: This documentation relates to our updated V2 endpoint, which may be incompatible with our V1 versions. Documentation for deprecated endpoints can be found <a href=\"#tag/deprecated\">here</a>.<br><br>\n**Technical Notes**  \n- A historic quote for every \"interval\" period between your \"time_start\" and \"time_end\" will be returned.  \n- If a \"time_start\" is not supplied, the \"interval\" will be applied in reverse from \"time_end\".  \n- If \"time_end\" is not supplied, it defaults to the current time.  \n- At each \"interval\" period, the historic quote that is closest in time to the requested time will be returned.  \n- If no historic quotes are available in a given \"interval\" period up until the next interval period, it will be skipped.  \n\n**Implementation Tips**\n- Want to get the last quote of each UTC day? Don't use \"interval=daily\" as that returns the first quote. Instead use \"interval=24h\" to repeat a specific timestamp search every 24 hours and pass ex. \"time_start=2019-01-04T23:59:00.000Z\" to query for the last record of each UTC day.\n- This endpoint supports requesting multiple cryptocurrencies in the same call. Please note the API response will be wrapped in an additional object in this case.  \n  \n**Interval Options**  \nThere are 2 types of time interval formats that may be used for \"interval\".\n\nThe first are calendar year and time constants in UTC time:  \n**\"hourly\"** - Get the first quote available at the beginning of each calendar hour.  \n**\"daily\"** - Get the first quote available at the beginning of each calendar day.  \n**\"weekly\"** - Get the first quote available at the beginning of each calendar week.  \n**\"monthly\"** - Get the first quote available at the beginning of each calendar month.  \n**\"yearly\"** - Get the first quote available at the beginning of each calendar year.  \n\nThe second are relative time intervals.  \n**\"m\"**: Get the first quote available every \"m\" minutes (60 second intervals). Supported minutes are: \"5m\", \"10m\", \"15m\", \"30m\", \"45m\".  \n**\"h\"**: Get the first quote available every \"h\" hours (3600 second intervals). Supported hour intervals are: \"1h\", \"2h\", \"3h\", \"4h\", \"6h\", \"12h\".  \n**\"d\"**: Get the first quote available every \"d\" days (86400 second intervals). Supported day intervals are: \"1d\", \"2d\", \"3d\", \"7d\", \"14d\", \"15d\", \"30d\", \"60d\", \"90d\", \"365d\".  \n\n**This endpoint is available on the following <a href=\"https://coinmarketcap.com/api/features\" target=\"_blank\">API plans</a>:**\n- ~~Basic~~\n- ~~Hobbyist~~\n- ~~Startup~~\n- Standard (3 month)\n- Professional (12 months)\n- Enterprise (Up to 6 years)\n\n**Cache / Update frequency:** Every 5 minutes.    \n**Plan credit use:** 1 call credit per 100 historical data points returned (rounded up) and 1 call credit per `convert` option beyond the first.  \n**CMC equivalent pages:** Our historical cryptocurrency charts like [coinmarketcap.com/currencies/bitcoin/#charts](https://coinmarketcap.com/currencies/bitcoin/#charts).  ",
        "parameters": [
          {
            "description": "One or more comma-separated CoinMarketCap cryptocurrency IDs. Example: \"1,2\"",
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\d+(?:,\\d+)*$"
            }
          },
          {
            "description": "Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \"BTC,ETH\". At least one \"id\" *or* \"symbol\" is required for this request.",
            "name": "symbol",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-,]+(?:,[0-9A-Za-z$@\\-]+)*$"
            }
          },
          {
            "description": "Timestamp (Unix or ISO 8601) to start returning quotes for. Optional, if not passed, we'll return quotes calculated in reverse from \"time_end\".",
            "name": "time_start",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Timestamp (Unix or ISO 8601) to stop returning quotes for (inclusive). Optional, if not passed, we'll default to the current time. If no \"time_start\" is passed, we return quotes in reverse order starting from this time.",
            "name": "time_end",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of interval periods to return results for. Optional, required if both \"time_start\" and \"time_end\" aren't supplied. The default is 10 items. The current query limit is 10000.",
            "name": "count",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 10000,
              "default": 10
            }
          },
          {
            "description": "Interval of time to return data points for. See details in endpoint description.",
            "name": "interval",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "yearly",
                "monthly",
                "weekly",
                "daily",
                "hourly",
                "5m",
                "10m",
                "15m",
                "30m",
                "45m",
                "1h",
                "2h",
                "3h",
                "4h",
                "6h",
                "12h",
                "24h",
                "1d",
                "2d",
                "3d",
                "7d",
                "14d",
                "15d",
                "30d",
                "60d",
                "90d",
                "365d"
              ],
              "default": "5m"
            }
          },
          {
            "description": "By default market quotes are returned in USD. Optionally calculate market quotes in up to 3 other fiat currencies or cryptocurrencies.",
            "name": "convert",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-,]+(?:,[0-9A-Za-z$@\\-]+)*$"
            }
          },
          {
            "description": "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to `convert` outside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used when `convert` is used.",
            "name": "convert_id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "(^\\d+(?:,\\d+)*$|(\\d,)*PLATFORM_ID+(?:,\\d+)*$)"
            }
          },
          {
            "description": "Optionally specify a comma-separated list of supplemental data fields to return. Pass `price,volume,market_cap,circulating_supply,total_supply,quote_timestamp,is_active,is_fiat,search_interval` to include all auxiliary fields.",
            "name": "aux",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(price|volume|market_cap|circulating_supply|total_supply|quote_timestamp|is_active|is_fiat|search_interval)+(?:,(price|volume|market_cap|circulating_supply|total_supply|quote_timestamp|is_active|is_fiat|search_interval)+)*$",
              "default": "price,volume,market_cap,circulating_supply,total_supply,quote_timestamp,is_active,is_fiat"
            }
          },
          {
            "description": "Pass `true` to relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if no match is found for 1 or more requested cryptocurrencies. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned.",
            "name": "skip_invalid",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "tags": ["cryptocurrency"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Cryptocurrency_Quotes_Historical_-_Response_Model"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_400_Error_Object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_401_Error_Object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_403_Error_Object"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_429_Error_Object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_500_Error_Object"
                }
              }
            }
          }
        }
      }
    },
    "/v2/cryptocurrency/quotes/latest": {
      "get": {
        "summary": "Quotes Latest v2",
        "operationId": "getV2CryptocurrencyQuotesLatest",
        "description": "Returns the latest market quote for 1 or more cryptocurrencies. Use the \"convert\" option to return market values in multiple fiat and cryptocurrency conversions in the same call.\n\n**Please note**: This documentation relates to our updated V2 endpoint, which may be incompatible with our V1 versions. Documentation for deprecated endpoints can be found <a href=\"#tag/deprecated\">here</a>.<br><br>\n**This endpoint is available on the following <a href=\"https://coinmarketcap.com/api/features\" target=\"_blank\">API plans</a>:**\n- Basic\n- Startup\n- Hobbyist\n- Standard\n- Professional\n- Enterprise\n\n**Cache / Update frequency:** Every 60 seconds.  \n**Plan credit use:** 1 call credit per 100 cryptocurrencies returned (rounded up) and 1 call credit per `convert` option beyond the first.  \n**CMC equivalent pages:** Latest market data pages for specific cryptocurrencies like [coinmarketcap.com/currencies/bitcoin/](https://coinmarketcap.com/currencies/bitcoin/).  \n   \n***NOTE:** Use this endpoint to request the latest quote for specific cryptocurrencies. If you need to request all cryptocurrencies use [/v1/cryptocurrency/listings/latest](#operation/getV1CryptocurrencyListingsLatest) which is optimized for that purpose. The response data between these endpoints is otherwise the same.*",
        "parameters": [
          {
            "description": "One or more comma-separated cryptocurrency CoinMarketCap IDs. Example: 1,2",
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\d+(?:,\\d+)*$"
            }
          },
          {
            "description": "Alternatively pass a comma-separated list of cryptocurrency slugs. Example: \"bitcoin,ethereum\"",
            "name": "slug",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-z-]+(?:,[0-9a-z-]+)*$"
            }
          },
          {
            "description": "Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \"BTC,ETH\". At least one \"id\" *or* \"slug\" *or* \"symbol\" is required for this request.",
            "name": "symbol",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-,]+(?:,[0-9A-Za-z$@\\-]+)*$"
            }
          },
          {
            "description": "Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. A list of supported fiat options can be found [here](#section/Standards-and-Conventions). Each conversion is returned in its own \"quote\" object.",
            "name": "convert",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-,]+(?:,[0-9A-Za-z$@\\-]+)*$"
            }
          },
          {
            "description": "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option is identical to `convert` outside of ID format. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used when `convert` is used.",
            "name": "convert_id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "(^\\d+(?:,\\d+)*$|(\\d,)*PLATFORM_ID+(?:,\\d+)*$)"
            }
          },
          {
            "description": "Optionally specify a comma-separated list of supplemental data fields to return. Pass `num_market_pairs,cmc_rank,date_added,tags,platform,max_supply,circulating_supply,total_supply,market_cap_by_total_supply,volume_24h_reported,volume_7d,volume_7d_reported,volume_30d,volume_30d_reported,is_active,is_fiat` to include all auxiliary fields.",
            "name": "aux",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(num_market_pairs|cmc_rank|date_added|tags|platform|max_supply|circulating_supply|total_supply|market_cap_by_total_supply|volume_24h_reported|volume_7d|volume_7d_reported|volume_30d|volume_30d_reported|is_active|is_fiat)+(?:,(num_market_pairs|cmc_rank|date_added|tags|platform|max_supply|circulating_supply|total_supply|market_cap_by_total_supply|volume_24h_reported|volume_7d|volume_7d_reported|volume_30d|volume_30d_reported|is_active|is_fiat)+)*$",
              "default": "num_market_pairs,cmc_rank,date_added,tags,platform,max_supply,circulating_supply,total_supply,is_active,is_fiat"
            }
          },
          {
            "description": "Pass `true` to relax request validation rules. When requesting records on multiple cryptocurrencies an error is returned if no match is found for 1 or more requested cryptocurrencies. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned.",
            "name": "skip_invalid",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "tags": ["cryptocurrency"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Cryptocurrency_Quotes_Latest_-_Response_Model"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_400_Error_Object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_401_Error_Object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_403_Error_Object"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_429_Error_Object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_500_Error_Object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/partners/flipside-crypto/fcas/listings/latest": {
      "get": {
        "x-actionOnly": true,
        "summary": "FCAS Listings Latest (deprecated)",
        "operationId": "getV1PartnersFlipsidecryptoFcasListingsLatest",
        "description": "Returns a paginated list of FCAS scores for all cryptocurrencies currently supported by FCAS. FCAS ratings are on a 0-1000 point scale with a corresponding letter grade and is updated once a day at UTC midnight.    \n\n\n   \nFCAS stands for Fundamental Crypto Asset Score, a single, consistently comparable value for measuring cryptocurrency project health. FCAS measures User Activity, Developer Behavior and Market Maturity and is provided by <a rel=\"noopener noreferrer\" href=\"https://www.flipsidecrypto.com/\" target=\"_blank\">FlipSide Crypto</a>. Find out more about <a rel=\"noopener noreferrer\" href=\"https://www.flipsidecrypto.com/fcas-explained\" target=\"_blank\">FCAS methodology</a>. Users interested in FCAS historical data including sub-component scoring may inquire through our <a rel=\"noopener noreferrer\" href=\"https://pro.coinmarketcap.com/contact-data/\" target=\"_blank\">CSV Data Delivery</a> request form.  \n  \n*Disclaimer: Ratings that are calculated by third party organizations and are not influenced or endorsed by CoinMarketCap in any way.*  \n  \n  **This endpoint is available on the following <a href=\"https://coinmarketcap.com/api/features\" target=\"_blank\">API plans</a>:**\n  - Basic\n  - Hobbyist\n  - Startup\n  - Standard\n  - Professional\n  - Enterprise\n\n**Cache / Update frequency:** Once a day at UTC midnight.  \n**Plan credit use:** 1 call credit per 100 FCAS scores returned (rounded up).  \n**CMC equivalent pages:** The FCAS ratings available under our cryptocurrency ratings tab like [coinmarketcap.com/currencies/bitcoin/#ratings](https://coinmarketcap.com/currencies/bitcoin/#ratings).     \n  \n***NOTE:** Use this endpoint to request the latest FCAS score for all supported cryptocurrencies at the same time. If you require FCAS for only specific cryptocurrencies use [/v1/partners/flipside-crypto/fcas/quotes/latest](#operation/getV1PartnersFlipsidecryptoFcasQuotesLatest) which is optimized for that purpose. The response data between these endpoints is otherwise the same.* ",
        "parameters": [
          {
            "description": "Optionally offset the start (1-based index) of the paginated list of items to return.",
            "name": "start",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "description": "Optionally specify the number of results to return. Use this parameter and the \"start\" parameter to determine your own pagination size.",
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 5000,
              "default": 100
            }
          },
          {
            "description": "Optionally specify a comma-separated list of supplemental data fields to return. Pass `point_change_24h,percent_change_24h` to include all auxiliary fields.",
            "name": "aux",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(point_change_24h|percent_change_24h)+(?:,(point_change_24h|percent_change_24h)+)*$",
              "default": "point_change_24h,percent_change_24h"
            }
          }
        ],
        "tags": ["deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FCAS_Listings_Latest_-_Response_Model"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_400_Error_Object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_401_Error_Object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_403_Error_Object"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_429_Error_Object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_500_Error_Object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/partners/flipside-crypto/fcas/quotes/latest": {
      "get": {
        "summary": "FCAS Quotes Latest (deprecated)",
        "operationId": "getV1PartnersFlipsidecryptoFcasQuotesLatest",
        "description": "Returns the latest FCAS score for 1 or more cryptocurrencies. FCAS ratings are on a 0-1000 point scale with a corresponding letter grade and is updated once a day at UTC midnight.    \n\n\n   \nFCAS stands for Fundamental Crypto Asset Score, a single, consistently comparable value for measuring cryptocurrency project health. FCAS measures User Activity, Developer Behavior and Market Maturity and is provided by <a rel=\"noopener noreferrer\" href=\"https://www.flipsidecrypto.com/\" target=\"_blank\">FlipSide Crypto</a>. Find out more about <a rel=\"noopener noreferrer\" href=\"https://www.flipsidecrypto.com/fcas-explained\" target=\"_blank\">FCAS methodology</a>. Users interested in FCAS historical data including sub-component scoring may inquire through our <a rel=\"noopener noreferrer\" href=\"https://pro.coinmarketcap.com/contact-data/\" target=\"_blank\">CSV Data Delivery</a> request form.  \n\n*Disclaimer: Ratings that are calculated by third party organizations and are not influenced or endorsed by CoinMarketCap in any way.*  \n  \n  **This endpoint is available on the following <a href=\"https://coinmarketcap.com/api/features\" target=\"_blank\">API plans</a>:**\n  - Basic\n  - Hobbyist\n  - Startup\n  - Standard\n  - Professional\n  - Enterprise\n\n**Cache / Update frequency:** Once a day at UTC midnight.  \n**Plan credit use:** 1 call credit per 100 FCAS scores returned (rounded up).  \n**CMC equivalent pages:** The FCAS ratings available under our cryptocurrency ratings tab like [coinmarketcap.com/currencies/bitcoin/#ratings](https://coinmarketcap.com/currencies/bitcoin/#ratings).     \n   \n***NOTE:** Use this endpoint to request the latest FCAS score for specific cryptocurrencies. If you require FCAS for all supported cryptocurrencies use [/v1/partners/flipside-crypto/fcas/listings/latest](#operation/getV1PartnersFlipsidecryptoFcasListingsLatest) which is optimized for that purpose. The response data between these endpoints is otherwise the same.*",
        "parameters": [
          {
            "description": "One or more comma-separated cryptocurrency CoinMarketCap IDs. Example: 1,2",
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^\\d+(?:,\\d+)*$"
            }
          },
          {
            "description": "Alternatively pass a comma-separated list of cryptocurrency slugs. Example: \"bitcoin,ethereum\"",
            "name": "slug",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-z-]+(?:,[0-9a-z-]+)*$"
            }
          },
          {
            "description": "Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \"BTC,ETH\". At least one \"id\" *or* \"slug\" *or* \"symbol\" is required for this request.",
            "name": "symbol",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[0-9A-Za-z$@\\-,]+(?:,[0-9A-Za-z$@\\-]+)*$"
            }
          },
          {
            "description": "Optionally specify a comma-separated list of supplemental data fields to return. Pass `point_change_24h,percent_change_24h` to include all auxiliary fields.",
            "name": "aux",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(point_change_24h|percent_change_24h)+(?:,(point_change_24h|percent_change_24h)+)*$",
              "default": "point_change_24h,percent_change_24h"
            }
          }
        ],
        "tags": ["deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FCAS_Quote_Latest_-_Response_Model"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_400_Error_Object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_401_Error_Object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_403_Error_Object"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_429_Error_Object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_500_Error_Object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tools/postman": {
      "get": {
        "summary": "Postman Conversion v1",
        "operationId": "getV1ToolsPostman",
        "description": "Convert APIs into postman format.\n  \n  \n**Technical Notes**\n- Set the env variables in the postman: {{baseUrl}}, {{API_KEY}}",
        "tags": ["tools"],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_400_Error_Object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_401_Error_Object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_403_Error_Object"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_429_Error_Object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP_Status_500_Error_Object"
                }
              }
            }
          }
        },
        "parameters": []
      }
    }
  },
  "tags": [
    {
      "name": "cryptocurrency",
      "description": "##### API endpoints for cryptocurrencies. This category currently includes 17 endpoints:\n- [/v1/cryptocurrency/map](#operation/getV1CryptocurrencyMap) - CoinMarketCap ID map\n- [/v1/cryptocurrency/info](#operation/getV1CryptocurrencyInfo) - Metadata\n- [/v1/cryptocurrency/listings/latest](#operation/getV1CryptocurrencyListingsLatest) - Latest listings\n- [/v1/cryptocurrency/listings/historical](#operation/getV1CryptocurrencyListingsHistorical) - Historical listings\n- [/v1/cryptocurrency/quotes/latest](#operation/getV1CryptocurrencyQuotesLatest) - Latest quotes\n- [/v1/cryptocurrency/quotes/historical](#operation/getV1CryptocurrencyQuotesHistorical) - Historical quotes\n- [/v1/cryptocurrency/market-pairs/latest](#operation/getV1CryptocurrencyMarketpairsLatest) - Latest market pairs\n- [/v1/cryptocurrency/ohlcv/latest](#operation/getV1CryptocurrencyOhlcvLatest) - Latest OHLCV\n- [/v1/cryptocurrency/ohlcv/historical](#operation/getV1CryptocurrencyOhlcvHistorical) - Historical OHLCV\n- [/v1/cryptocurrency/price-performance-stats/latest](#operation/getV1CryptocurrencyPriceperformancestatsLatest) - Price performance Stats\n- [/v1/cryptocurrency/categories](#operation/getV1CryptocurrencyCategories) - Categories\n- [/v1/cryptocurrency/category](#operation/getV1CryptocurrencyCategory) - Category\n- [/v1/cryptocurrency/airdrops](#operation/getV1CryptocurrencyAirdrops) - Airdrops\n- [/v1/cryptocurrency/airdrop](#operation/getV1CryptocurrencyAirdrop) - Airdrop\n- [/v1/cryptocurrency/trending/latest](#operation/getV1CryptocurrencyTrendingLatest) - Trending Latest\n- [/v1/cryptocurrency/trending/most-visited](#operation/getV1CryptocurrencyTrendingMostvisited) - Trending Most Visited\n- [/v1/cryptocurrency/trending/gainers-losers](#operation/getV1CryptocurrencyTrendingGainerslosers) - Trending Gainers & Losers"
    },
    {
      "name": "fiat",
      "description": "##### API endpoints for fiat currencies. This category currently includes 1 endpoint:\n- [/v1/fiat/map](#operation/getV1FiatMap) - CoinMarketCap ID map"
    },
    {
      "name": "exchange",
      "description": "##### API endpoints for cryptocurrency exchanges. This category currently includes 7 endpoints:\n- [/v1/exchange/map](#operation/getV1ExchangeMap) - CoinMarketCap ID map\n- [/v1/exchange/info](#operation/getV1ExchangeInfo) - Metadata\n- [/v1/exchange/listings/latest](#operation/getV1ExchangeListingsLatest) - Latest listings\n- [/v1/exchange/quotes/latest](#operation/getV1ExchangeQuotesLatest) - Latest quotes\n- [/v1/exchange/quotes/historical](#operation/getV1ExchangeQuotesHistorical) - Historical quotes\n- [/v1/exchange/market-pairs/latest](#operation/getV1ExchangeMarketpairsLatest) - Latest market pairs"
    },
    {
      "name": "global-metrics",
      "description": "##### API endpoints for global aggregate market data. This category currently includes 2 endpoints:\n- [/v1/global-metrics/quotes/latest](#operation/getV1GlobalmetricsQuotesLatest) - Latest global metrics  \n- [/v1/global-metrics/quotes/historical](#operation/getV1GlobalmetricsQuotesHistorical) - Historical global metrics"
    },
    {
      "name": "tools",
      "description": "##### API endpoints for convenience utilities. This category currently includes 1 endpoint:\n- [/v1/tools/price-conversion](#operation/getV1ToolsPriceconversion) - Price conversion tool"
    },
    {
      "name": "blockchain",
      "description": "##### API endpoints for blockchain data. This category currently includes 1 endpoint:\n- [/v1/blockchain/statistics/latest](#operation/getV1BlockchainStatisticsLatest) - Latest statistics"
    },
    {
      "name": "key",
      "description": "##### API endpoints for managing your API key. This category currently includes 1 endpoint:\n- [/v1/key/info](#operation/getV1KeyInfo) - Key Info"
    },
    {
      "name": "deprecated",
      "description": "##### Deprecated (V1) Endpoints\n<br /><br />These endpoints have been replaced with their V2 versions, and are no longer being actively supported.\n<br />We strongly suggest migrating to V2 endpoints, and this documentation only exists for legacy purposes."
    }
  ],
  "servers": [
    {
      "url": "https://pro-api.coinmarketcap.com/"
    }
  ],
  "components": {
    "schemas": {
      "coin": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique CoinMarketCap ID for this asset.",
            "example": 2781
          },
          "name": {
            "type": "string",
            "description": "The name of this cryptocurrency.",
            "example": "Bitcoin"
          },
          "symbol": {
            "type": "string",
            "description": "The ticker symbol for this cryptocurrency.",
            "example": "BTC"
          },
          "slug": {
            "type": "string",
            "description": "The web URL friendly shorthand version of this cryptocurrency name.",
            "example": "bitcoin"
          }
        },
        "required": ["id", "name", "symbol", "slug"]
      },
      "status": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date",
            "description": "Current ISO 8601 timestamp on the server.",
            "example": "2018-06-02T22:51:28.209Z"
          },
          "error_code": {
            "type": "integer",
            "description": "An internal error code for the current error. If a unique platform error code is not available the HTTP status code is returned.",
            "example": 400,
            "default": 400
          },
          "error_message": {
            "type": "string",
            "description": "An error message to go along with the error code.",
            "example": "Invalid value for \\\"id\\\""
          },
          "elapsed": {
            "type": "integer",
            "description": "Number of milliseconds taken to generate this response",
            "example": 10
          },
          "credit_count": {
            "type": "integer",
            "description": "Number of API call credits required for this call. Always 0 for errors.",
            "example": 0
          }
        },
        "required": ["timestamp", "error_code", "error_message", "elapsed", "credit_count"]
      },
      "tags": {
        "type": "array",
        "description": "Array of tags associated with this cryptocurrency. Currently only a mineable tag will be returned if the cryptocurrency is mineable. Additional tags will be returned in the future.",
        "example": ["mineable"],
        "items": {
          "type": "string"
        }
      },
      "platform": {
        "type": "object",
        "description": "Metadata about the parent cryptocurrency platform this cryptocurrency belongs to if it is a token, otherwise null.",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique CoinMarketCap ID for the parent platform cryptocurrency.",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "The name of the parent platform cryptocurrency.",
            "example": "Ethereum"
          },
          "symbol": {
            "type": "string",
            "description": "The ticker symbol for the parent platform cryptocurrency.",
            "example": "ETH"
          },
          "slug": {
            "type": "string",
            "description": "The web URL friendly shorthand version of the parent platform cryptocurrency name.",
            "example": "ethereum"
          },
          "token_address": {
            "type": "string",
            "description": "The token address on the parent platform cryptocurrency.",
            "example": "0xe41d2489571d322189246dafa5ebde1f4699f498"
          }
        },
        "required": ["id", "name", "symbol", "slug", "token_address"]
      },
      "self_reported_tags": {
        "type": "array",
        "description": "Array of self reported tags associated with this cryptocurrency.",
        "example": ["Store Of Value", "Play To Earn"],
        "items": {
          "type": "string"
        }
      },
      "website": {
        "type": "array",
        "description": "Array of website URLs.",
        "example": ["https://bitcoin.org/"],
        "items": {
          "type": "string"
        }
      },
      "technical_doc": {
        "type": "array",
        "description": "Array of white paper or technical documentation URLs.",
        "example": ["https://bitcoin.org/bitcoin.pdf"],
        "items": {
          "type": "string"
        }
      },
      "explorer": {
        "type": "array",
        "description": "Array of block explorer URLs.",
        "example": [
          "https://blockchain.coinmarketcap.com/chain/bitcoin",
          "https://blockchain.info/",
          "https://live.blockcypher.com/btc/"
        ],
        "items": {
          "type": "string"
        }
      },
      "source_code": {
        "type": "array",
        "description": "Array of source code URLs.",
        "example": ["https://github.com/bitcoin/"],
        "items": {
          "type": "string"
        }
      },
      "message_board": {
        "type": "array",
        "description": "Array of message board URLs.",
        "example": ["https://bitcointalk.org"],
        "items": {
          "type": "string"
        }
      },
      "chat": {
        "type": "array",
        "description": "Array of chat service URLs.",
        "example": [],
        "items": {
          "type": "string"
        }
      },
      "announcement": {
        "type": "array",
        "description": "Array of announcement URLs.",
        "example": [],
        "items": {
          "type": "string"
        }
      },
      "reddit": {
        "type": "array",
        "description": "Array of Reddit community page URLs.",
        "example": ["https://reddit.com/r/bitcoin"],
        "items": {
          "type": "string"
        }
      },
      "twitter": {
        "type": "array",
        "description": "Array of official twitter profile URLs.",
        "example": ["https://twitter.com/Bitcoin"],
        "items": {
          "type": "string"
        }
      },
      "blog": {
        "type": "array",
        "description": "Official blog URLs.",
        "example": ["https://blog.kraken.com/"],
        "items": {
          "type": "string"
        }
      },
      "fee": {
        "type": "array",
        "description": "Official web URLs covering exchange fees.",
        "example": ["https://www.gdax.com/fees"],
        "items": {
          "type": "string"
        }
      },
      "plan": {
        "type": "object",
        "description": "Object containing rate limit and daily/monthly credit limit details for your API Key.",
        "properties": {
          "credit_limit_daily": {
            "type": "number",
            "description": "The number of API credits that can be used each daily period before receiving a HTTP 429 rate limit error. This limit is based on the API plan tier.",
            "example": 4000
          },
          "credit_limit_daily_reset": {
            "type": "string",
            "description": "A human readable countdown of when the API key daily credit limit will reset back to 0.",
            "example": "In 19 hours, 56 minutes"
          },
          "credit_limit_daily_reset_timestamp": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of when the daily credit limit will reset. This is based on your billing plan activation date for premium subscription based keys or UTC midnight for free Basic plan keys.",
            "example": "2019-08-29T00:00:00.000Z"
          },
          "credit_limit_monthly": {
            "type": "number",
            "description": "The number of API credits that can be used each monthly period before receiving a HTTP 429 rate limit error. This limit is based on the API plan tier.",
            "example": 120000
          },
          "credit_limit_monthly_reset": {
            "type": "string",
            "description": "A human readable countdown of when the API key monthly credit limit will reset back to 0.",
            "example": "In 3 days, 19 hours, 56 minutes"
          },
          "credit_limit_monthly_reset_timestamp": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of when the monthly credit limit will reset. This is based on your billing plan activation date for premium subscription based keys or calendar month UTC midnight for free Basic plan keys.",
            "example": "2019-09-01T00:00:00.000Z"
          },
          "rate_limit_minute": {
            "type": "number",
            "description": "The number of API calls that can be made within the same UTC minute before receiving a HTTP 429 rate limit error. This limit is based on the API plan tier.",
            "example": 60
          }
        },
        "required": [
          "credit_limit_daily",
          "credit_limit_daily_reset",
          "credit_limit_daily_reset_timestamp",
          "credit_limit_monthly",
          "credit_limit_monthly_reset",
          "credit_limit_monthly_reset_timestamp",
          "rate_limit_minute"
        ]
      },
      "current_minute": {
        "type": "object",
        "description": "Usage stats around the minute based rate limit.",
        "properties": {
          "requests_made": {
            "type": "number",
            "description": "The number of API calls that have been made in the current UTC minute.",
            "example": 1
          },
          "requests_left": {
            "type": "number",
            "description": "The number of remaining API calls that can be made in the current UTC minute before receiving a HTTP 429 rate limit error. This limit resets each UTC minute.",
            "example": 59
          }
        },
        "required": ["requests_made", "requests_left"]
      },
      "current_day": {
        "type": "object",
        "description": "Usage stats around the daily API credit limit.",
        "properties": {
          "credits_used": {
            "type": "number",
            "description": "The number of API credits used during the current daily period.",
            "example": 1
          },
          "credits_left": {
            "type": "number",
            "description": "The number of remaining API credits that can be used during the current daily period before receiving a HTTP 429 rate limit error. This limit resets at the end of each daily period.",
            "example": 3999
          }
        },
        "required": ["credits_used", "credits_left"]
      },
      "current_month": {
        "type": "object",
        "description": "Usage stats around the monthly API credit limit.",
        "properties": {
          "credits_used": {
            "type": "number",
            "description": "The number of API credits used during the current monthly period.",
            "example": 1
          },
          "credits_left": {
            "type": "number",
            "description": "The number of remaining API credits that can be used during the current monthly period before receiving a HTTP 429 rate limit error. This limit resets at the end of each monthly period.",
            "example": 119999
          }
        },
        "required": ["credits_used", "credits_left"]
      },
      "usage": {
        "type": "object",
        "description": "Object containing live usage details about your API Key.",
        "properties": {
          "current_minute": {
            "$ref": "#/components/schemas/current_minute"
          },
          "current_day": {
            "$ref": "#/components/schemas/current_day"
          },
          "current_month": {
            "$ref": "#/components/schemas/current_month"
          }
        },
        "required": ["current_minute", "current_day", "current_month"]
      },
      "Airdrop_-_Airdrop_object": {
        "type": "object",
        "description": "A results object for the airdrop requested.",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID of the airdrop",
            "example": "60e59b99c8ca1d58514a2322"
          },
          "project_name": {
            "type": "string",
            "description": "The project name",
            "example": "DeRace Airdrop"
          },
          "description": {
            "type": "string",
            "description": "The description of the airdrop.",
            "example": "For 7 days starting from August 15, 2021, CoinMarketCap will host an Airdrop event..."
          },
          "status": {
            "type": "string",
            "description": "The current status of the airdrop.",
            "example": "UPCOMING"
          },
          "coin": {
            "$ref": "#/components/schemas/coin"
          },
          "start_date": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of when this cryptocurrency was added to CoinMarketCap.",
            "example": "2013-04-28T00:00:00.000Z"
          },
          "end_date": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of when this cryptocurrency was added to CoinMarketCap.",
            "example": "2013-04-28T00:00:00.000Z"
          },
          "total_prize": {
            "type": "integer",
            "example": 10000
          },
          "winner_count": {
            "type": "integer",
            "example": 55
          },
          "link": {
            "type": "string",
            "description": "A link to the airdrop information.",
            "example": "https://coinmarketcap.com/currencies/derace/airdrop"
          }
        },
        "required": ["id", "start_date", "end_date"]
      },
      "Airdrop_-_Results_map": {
        "type": "object",
        "description": "Results of your query returned as an object map.",
        "example": {
          "id": "60e59b99c8ca1d58514a2322",
          "project_name": "DeRace Airdrop",
          "description": "For 7 days starting from August 15, 2021, CoinMarketCap will host an Airdrop event...",
          "status": "UPCOMING",
          "coin": {
            "id": 10744,
            "name": "DeRace",
            "slug": "derace",
            "symbol": "DERC"
          },
          "start_date": "2021-06-01T22:11:00.000Z",
          "end_date": "2021-07-01T22:11:00.000Z",
          "total_prize": 20000000000,
          "winner_count": 1000,
          "link": "https://coinmarketcap.com/currencies/derace/airdrop/"
        },
        "properties": {
          "$key": {
            "$ref": "#/components/schemas/Airdrop_-_Airdrop_object"
          }
        },
        "required": ["$key"]
      },
      "API_Status_Object": {
        "type": "object",
        "description": "Standardized status object for API calls.",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date",
            "description": "Current timestamp (ISO 8601) on the server.",
            "example": "2022-08-01T11:02:21.527Z"
          },
          "error_code": {
            "type": "integer",
            "description": "An internal error code for the current error. If a unique platform error code is not available the HTTP status code is returned. `null` is returned if there is no error."
          },
          "error_message": {
            "type": "string",
            "description": "An error message to go along with the error code.",
            "example": ""
          },
          "elapsed": {
            "type": "integer",
            "description": "Number of milliseconds taken to generate this response.",
            "example": 10
          },
          "credit_count": {
            "type": "integer",
            "description": "Number of API call credits that were used for this call.",
            "example": 1
          }
        },
        "required": ["timestamp", "error_code", "error_message", "elapsed", "credit_count"]
      },
      "Airdrop_-_Response_Model": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Airdrop_-_Results_map"
          },
          "status": {
            "$ref": "#/components/schemas/API_Status_Object"
          }
        },
        "required": ["data", "status"]
      },
      "HTTP_Status_400_Error_Object": {
        "type": "object",
        "description": "Bad Request",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/status"
          }
        }
      },
      "status_1": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date",
            "description": "Current ISO 8601 timestamp on the server.",
            "example": "2018-06-02T22:51:28.209Z"
          },
          "error_code": {
            "type": "integer",
            "description": "An internal error code for the current error. If a unique platform error code is not available the HTTP status code is returned.",
            "example": 1002,
            "default": 401
          },
          "error_message": {
            "type": "string",
            "description": "An error message to go along with the error code.",
            "example": "API key missing."
          },
          "elapsed": {
            "type": "integer",
            "description": "Number of milliseconds taken to generate this response",
            "example": 10
          },
          "credit_count": {
            "type": "integer",
            "description": "Number of API call credits required for this call. Always 0 for errors.",
            "example": 0
          }
        },
        "required": ["timestamp", "error_code", "error_message", "elapsed", "credit_count"]
      },
      "HTTP_Status_401_Error_Object": {
        "type": "object",
        "description": "Unauthorized",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/status_1"
          }
        }
      },
      "status_2": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date",
            "description": "Current ISO 8601 timestamp on the server.",
            "example": "2018-06-02T22:51:28.209Z"
          },
          "error_code": {
            "type": "integer",
            "description": "An internal error code for the current error. If a unique platform error code is not available the HTTP status code is returned.",
            "example": 1006,
            "default": 403
          },
          "error_message": {
            "type": "string",
            "description": "An error message to go along with the error code.",
            "example": "Your API Key subscription plan doesn't support this endpoint."
          },
          "elapsed": {
            "type": "integer",
            "description": "Number of milliseconds taken to generate this response",
            "example": 10
          },
          "credit_count": {
            "type": "integer",
            "description": "Number of API call credits required for this call. Always 0 for errors.",
            "example": 0
          }
        },
        "required": ["timestamp", "error_code", "error_message", "elapsed", "credit_count"]
      },
      "HTTP_Status_403_Error_Object": {
        "type": "object",
        "description": "Forbidden",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/status_2"
          }
        }
      },
      "status_3": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date",
            "description": "Current ISO 8601 timestamp on the server.",
            "example": "2018-06-02T22:51:28.209Z"
          },
          "error_code": {
            "type": "integer",
            "description": "An internal error code string for the current error. If a unique platform error code is not available the HTTP status code is returned.",
            "example": 1008,
            "default": 429
          },
          "error_message": {
            "type": "string",
            "description": "An error message to go along with the error code.",
            "example": "You've exceeded your API Key's HTTP request rate limit. Rate limits reset every minute."
          },
          "elapsed": {
            "type": "integer",
            "description": "Number of milliseconds taken to generate this response",
            "example": 10
          },
          "credit_count": {
            "type": "integer",
            "description": "Number of API call credits required for this call. Always 0 for errors.",
            "example": 0
          }
        },
        "required": ["timestamp", "error_code", "error_message", "elapsed", "credit_count"]
      },
      "HTTP_Status_429_Error_Object": {
        "type": "object",
        "description": "Too Many Requests",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/status_3"
          }
        }
      },
      "status_4": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date",
            "description": "Current ISO 8601 timestamp on the server.",
            "example": "2018-06-02T22:51:28.209Z"
          },
          "error_code": {
            "type": "integer",
            "description": "An internal error code string for the current error. If a unique platform error code is not available the HTTP status code is returned.",
            "default": 500,
            "enum": [500]
          },
          "error_message": {
            "type": "string",
            "description": "An error message to go along with the error code.",
            "example": "An internal server error occurred"
          },
          "elapsed": {
            "type": "integer",
            "description": "Number of milliseconds taken to generate this response",
            "example": 10
          },
          "credit_count": {
            "type": "integer",
            "description": "Number of API call credits required for this call. Always 0 for errors.",
            "example": 0
          }
        },
        "required": ["timestamp", "error_code", "error_message", "elapsed", "credit_count"]
      },
      "HTTP_Status_500_Error_Object": {
        "type": "object",
        "description": "Internal Server Error",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/status_4"
          }
        }
      },
      "Airdrops_-_Airdrop_Object": {
        "type": "object",
        "description": "Airdrop object for each result",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID of the airdrop",
            "example": "60e59b99c8ca1d58514a2322"
          },
          "project_name": {
            "type": "string",
            "description": "The project name",
            "example": "DeRace Airdrop"
          },
          "description": {
            "type": "string",
            "description": "The description of the airdrop.",
            "example": "For 7 days starting from August 15, 2021, CoinMarketCap will host an Airdrop event..."
          },
          "status": {
            "type": "string",
            "description": "The current status of the airdrop.",
            "example": "UPCOMING"
          },
          "coin": {
            "$ref": "#/components/schemas/coin"
          },
          "start_date": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of when this cryptocurrency was added to CoinMarketCap.",
            "example": "2013-04-28T00:00:00.000Z"
          },
          "end_date": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of when this cryptocurrency was added to CoinMarketCap.",
            "example": "2013-04-28T00:00:00.000Z"
          },
          "total_prize": {
            "type": "integer",
            "example": 10000
          },
          "winner_count": {
            "type": "integer",
            "example": 55
          },
          "link": {
            "type": "string",
            "description": "A link to the airdrop information.",
            "example": "https://coinmarketcap.com/currencies/derace/airdrop"
          }
        },
        "required": ["id", "start_date", "end_date"]
      },
      "Airdrops_-_Airdrop_Array": {
        "type": "array",
        "description": "Array of airdrop object results.",
        "items": {
          "$ref": "#/components/schemas/Airdrops_-_Airdrop_Object"
        }
      },
      "Airdrops_-_Response_Model": {
        "type": "object",
        "example": {
          "data": [
            {
              "id": "60e59b99c8ca1d58514a2322",
              "project_name": "DeRace Airdrop",
              "description": "For 7 days starting from August 15, 2021, CoinMarketCap will host an Airdrop event...",
              "status": "UPCOMING",
              "coin": {
                "id": 10744,
                "name": "DeRace",
                "slug": "derace",
                "symbol": "DERC"
              },
              "start_date": "2021-06-01T22:11:00.000Z",
              "end_date": "2021-07-01T22:11:00.000Z",
              "total_prize": 20000000000,
              "winner_count": 1000,
              "link": "https://coinmarketcap.com/currencies/derace/airdrop/"
            }
          ],
          "status": {
            "timestamp": "2021-08-01T22:51:28.209Z",
            "error_code": 0,
            "error_message": "",
            "elapsed": 3,
            "credit_count": 1
          }
        },
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Airdrops_-_Airdrop_Array"
          },
          "status": {
            "$ref": "#/components/schemas/API_Status_Object"
          }
        },
        "required": ["data"]
      },
      "Categories_-_Category_object": {
        "type": "object",
        "description": "A results object for each category requested. The map key being the id used in the request.",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique ID of the category",
            "example": 2781
          },
          "name": {
            "type": "string",
            "description": "The name of the category",
            "example": "A16Z Portfolio"
          },
          "title": {
            "type": "string",
            "description": "The title of the category",
            "example": "A16Z Portfolio"
          },
          "description": {
            "type": "string",
            "description": "The description of the category",
            "example": "A16Z Portfolio"
          },
          "num_tokens": {
            "type": "integer",
            "example": 12
          },
          "avg_price_change": {
            "type": "number",
            "description": "Average price change of coins within this categry",
            "example": 0.03
          },
          "market_cap": {
            "type": "number",
            "description": "Market cap of coins within this categry",
            "example": 121020662982
          },
          "market_cap_change": {
            "type": "number",
            "description": "Market cap change of coins within this categry",
            "example": 0.03
          },
          "volume": {
            "type": "number",
            "description": "Volume of coins within this categry",
            "example": 121020662982
          },
          "volume_change": {
            "type": "number",
            "description": "Volume change of coins within this categry",
            "example": 0.03
          },
          "last_updated": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of when this was last updated.",
            "example": "2013-04-28T00:00:00.000Z"
          }
        },
        "required": [
          "id",
          "avg_price_change",
          "market_cap",
          "market_cap_change",
          "volume",
          "volume_change",
          "last_updated"
        ]
      },
      "Categories_-_Results_map": {
        "type": "array",
        "description": "Results of your query returned as an object map.",
        "items": {
          "$ref": "#/components/schemas/Categories_-_Category_object"
        }
      },
      "Categories_-_Response_Model": {
        "type": "object",
        "example": {
          "data": [
            {
              "id": "605e2ce9d41eae1066535f7c",
              "name": "A16Z Portfolio",
              "title": "A16Z Portfolio",
              "description": "A16Z Portfolio",
              "num_tokens": 12,
              "avg_price_change": 0.61305157,
              "market_cap": 29429241867.031097,
              "market_cap_change": 3.049044106496,
              "volume": 4103706600.0391645,
              "volume_change": -10.538325849854,
              "last_updated": 1616488708878
            }
          ],
          "status": {
            "timestamp": "2021-08-01T22:51:28.209Z",
            "error_code": 0,
            "error_message": "",
            "elapsed": 3,
            "credit_count": 1
          }
        },
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Categories_-_Results_map"
          },
          "status": {
            "$ref": "#/components/schemas/API_Status_Object"
          }
        },
        "required": ["data"]
      },
      "Cryptocurrency_-_Quote_object": {
        "type": "object",
        "description": "A market quote in the currency conversion option.",
        "properties": {
          "price": {
            "type": "number",
            "description": "Price in the specified currency for this historical.",
            "example": 7139.82
          },
          "volume_24h": {
            "type": "number",
            "description": "Rolling 24 hour adjusted volume in the specified currency.",
            "example": 4885880000
          },
          "volume_24h_reported": {
            "type": "number",
            "description": "Rolling 24 hour reported volume in the specified currency. *This field is only returned if requested through the `aux` request parameter.*",
            "example": 4885880000
          },
          "volume_7d": {
            "type": "number",
            "description": "Rolling 7 day adjusted volume in the specified currency. *This field is only returned if requested through the `aux` request parameter.*",
            "example": 4885880000
          },
          "volume_7d_reported": {
            "type": "number",
            "description": "Rolling 7 day reported volume in the specified currency. *This field is only returned if requested through the `aux` request parameter.*",
            "example": 4885880000
          },
          "volume_30d": {
            "type": "number",
            "description": "Rolling 30 day adjusted volume in the specified currency. *This field is only returned if requested through the `aux` request parameter.*",
            "example": 4885880000
          },
          "volume_30d_reported": {
            "type": "number",
            "description": "Rolling 30 day reported volume in the specified currency. *This field is only returned if requested through the `aux` request parameter.*",
            "example": 4885880000
          },
          "market_cap": {
            "type": "number",
            "description": "Market cap in the specified currency.",
            "example": 121020662982
          },
          "percent_change_1h": {
            "type": "number",
            "description": "1 hour change in the specified currency.",
            "example": 0.03
          },
          "percent_change_24h": {
            "type": "number",
            "description": "24 hour change in the specified currency.",
            "example": 5.75
          },
          "percent_change_7d": {
            "type": "number",
            "description": "7 day change in the specified currency.",
            "example": -19.64
          },
          "last_updated": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of when the conversion currency's current value was referenced.",
            "example": "2018-06-02T23:59:59.999Z"
          }
        },
        "required": [
          "price",
          "volume_24h",
          "market_cap",
          "percent_change_1h",
          "percent_change_24h",
          "percent_change_7d",
          "last_updated"
        ]
      },
      "Cryptocurrency_-_Quote_map": {
        "type": "object",
        "description": "A map of market quotes in different currency conversions. The default map included is USD.",
        "example": {
          "USD": {
            "price": 9283.92,
            "volume_24h": 7155680000,
            "percent_change_1h": -0.152774,
            "percent_change_24h": 0.518894,
            "percent_change_7d": 0.986573,
            "market_cap": 158055024432,
            "last_updated": "2018-08-09T22:53:32.000Z"
          },
          "BTC": {
            "price": 1,
            "volume_24h": 772012,
            "percent_change_1h": 0,
            "percent_change_24h": 0,
            "percent_change_7d": 0,
            "market_cap": 17024600,
            "last_updated": "2018-08-09T22:53:32.000Z"
          }
        },
        "properties": {
          "$key": {
            "$ref": "#/components/schemas/Cryptocurrency_-_Quote_object"
          }
        },
        "required": ["$key"]
      },
      "Cryptocurrency_-_Cryptocurrency_object": {
        "type": "object",
        "description": "A cryptocurrency object for every cryptocurrency that matched list options.",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique CoinMarketCap ID for this cryptocurrency.",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "The name of this cryptocurrency.",
            "example": "Bitcoin"
          },
          "symbol": {
            "type": "string",
            "description": "The ticker symbol for this cryptocurrency.",
            "example": "BTC"
          },
          "slug": {
            "type": "string",
            "description": "The web URL friendly shorthand version of this cryptocurrency name.",
            "example": "bitcoin"
          },
          "cmc_rank": {
            "type": "integer",
            "description": "The cryptocurrency's CoinMarketCap rank by market cap.",
            "example": 5
          },
          "num_market_pairs": {
            "type": "integer",
            "description": "The number of active trading pairs available for this cryptocurrency across supported exchanges.",
            "example": 500
          },
          "circulating_supply": {
            "type": "number",
            "description": "The approximate number of coins circulating for this cryptocurrency.",
            "example": 16950100
          },
          "total_supply": {
            "type": "number",
            "description": "The approximate total amount of coins in existence right now (minus any coins that have been verifiably burned).",
            "example": 16950100
          },
          "market_cap_by_total_supply": {
            "type": "number",
            "description": "The market cap by total supply. *This field is only returned if requested through the `aux` request parameter.*",
            "example": 158055024432
          },
          "max_supply": {
            "type": "number",
            "description": "The expected maximum limit of coins ever to be available for this cryptocurrency.",
            "example": 21000000
          },
          "last_updated": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of the last time this cryptocurrency's market data was updated.",
            "example": "2018-06-02T22:51:28.209Z"
          },
          "date_added": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of when this cryptocurrency was added to CoinMarketCap.",
            "example": "2013-04-28T00:00:00.000Z"
          },
          "tags": {
            "$ref": "#/components/schemas/tags"
          },
          "platform": {
            "$ref": "#/components/schemas/platform"
          },
          "quote": {
            "$ref": "#/components/schemas/Cryptocurrency_-_Quote_map"
          }
        },
        "required": ["id", "name", "symbol", "slug", "last_updated", "quote"]
      },
      "Cryptocurrency_-_Results_array": {
        "type": "array",
        "description": "Array of cryptocurrency objects matching the list options.",
        "items": {
          "$ref": "#/components/schemas/Cryptocurrency_-_Cryptocurrency_object"
        },
        "required": ["Cryptocurrency - Cryptocurrency object"]
      },
      "Category_-_Cryptocurrency_object": {
        "type": "object",
        "description": "A results object for each cryptocurrency found in the category.",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique ID of the category",
            "example": 2781
          },
          "name": {
            "type": "string",
            "description": "The name of the category",
            "example": "A16Z Portfolio"
          },
          "title": {
            "type": "string",
            "description": "The title of the category",
            "example": "A16Z Portfolio"
          },
          "description": {
            "type": "string",
            "description": "The description of the category",
            "example": "A16Z Portfolio"
          },
          "num_tokens": {
            "type": "integer",
            "example": 12
          },
          "avg_price_change": {
            "type": "number",
            "description": "Average price change of coins within this categry",
            "example": 0.03
          },
          "market_cap": {
            "type": "number",
            "description": "Market cap of coins within this categry",
            "example": 121020662982
          },
          "market_cap_change": {
            "type": "number",
            "description": "Market cap change of coins within this categry",
            "example": 0.03
          },
          "volume": {
            "type": "number",
            "description": "Volume of coins within this categry",
            "example": 121020662982
          },
          "volume_change": {
            "type": "number",
            "description": "Volume change of coins within this categry",
            "example": 0.03
          },
          "coins": {
            "$ref": "#/components/schemas/Cryptocurrency_-_Results_array"
          },
          "last_updated": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of when this was last updated.",
            "example": "2013-04-28T00:00:00.000Z"
          }
        },
        "required": [
          "id",
          "avg_price_change",
          "market_cap",
          "market_cap_change",
          "volume",
          "volume_change",
          "coins",
          "last_updated"
        ]
      },
      "Category_-_Results_map": {
        "type": "object",
        "description": "Results of your query returned as an object map.",
        "example": {
          "id": "605e2ce9d41eae1066535f7c",
          "name": "A16Z Portfolio",
          "title": "A16Z Portfolio",
          "description": "A16Z Portfolio",
          "num_tokens": 12,
          "avg_price_change": 0.61305157,
          "market_cap": 29429241867.031097,
          "market_cap_change": 3.049044106496,
          "volume": 4103706600.0391645,
          "volume_change": -10.538325849854,
          "coins": [
            {
              "id": 1,
              "name": "Bitcoin",
              "symbol": "BTC",
              "slug": "bitcoin",
              "cmc_rank": 5,
              "num_market_pairs": 500,
              "circulating_supply": 16950100,
              "total_supply": 16950100,
              "max_supply": 21000000,
              "last_updated": "2018-06-02T22:51:28.209Z",
              "date_added": "2013-04-28T00:00:00.000Z",
              "tags": ["mineable"],
              "platform": null,
              "quote": {
                "USD": {
                  "price": 9283.92,
                  "volume_24h": 7155680000,
                  "percent_change_1h": -0.152774,
                  "percent_change_24h": 0.518894,
                  "percent_change_7d": 0.986573,
                  "market_cap": 158055024432,
                  "last_updated": "2018-08-09T22:53:32.000Z"
                },
                "BTC": {
                  "price": 1,
                  "volume_24h": 772012,
                  "percent_change_1h": 0,
                  "percent_change_24h": 0,
                  "percent_change_7d": 0,
                  "market_cap": 17024600,
                  "last_updated": "2018-08-09T22:53:32.000Z"
                }
              }
            },
            {
              "id": 1027,
              "name": "Ethereum",
              "symbol": "ETH",
              "slug": "ethereum",
              "num_market_pairs": 6360,
              "circulating_supply": 16950100,
              "total_supply": 16950100,
              "max_supply": 21000000,
              "last_updated": "2018-06-02T22:51:28.209Z",
              "date_added": "2013-04-28T00:00:00.000Z",
              "tags": ["mineable"],
              "platform": null,
              "quote": {
                "USD": {
                  "price": 1283.92,
                  "volume_24h": 7155680000,
                  "percent_change_1h": -0.152774,
                  "percent_change_24h": 0.518894,
                  "percent_change_7d": 0.986573,
                  "market_cap": 158055024432,
                  "last_updated": "2018-08-09T22:53:32.000Z"
                },
                "ETH": {
                  "price": 1,
                  "volume_24h": 772012,
                  "percent_change_1h": 0,
                  "percent_change_24h": 0,
                  "percent_change_7d": 0,
                  "market_cap": 17024600,
                  "last_updated": "2018-08-09T22:53:32.000Z"
                }
              }
            }
          ],
          "last_updated": 1616488708878
        },
        "properties": {
          "$key": {
            "$ref": "#/components/schemas/Category_-_Cryptocurrency_object"
          }
        },
        "required": ["$key"]
      },
      "Category_-_Response_Model": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Category_-_Results_map"
          },
          "status": {
            "$ref": "#/components/schemas/API_Status_Object"
          }
        },
        "required": ["data"]
      },
      "tags_1": {
        "type": "array",
        "description": "Tags associated with this cryptocurrency.",
        "example": ["mineable"],
        "items": {
          "type": "string"
        }
      },
      "Cryptocurrencies_Info_-_URLs_object": {
        "type": "object",
        "description": "An object containing various resource URLs for this cryptocurrency.",
        "properties": {
          "website": {
            "$ref": "#/components/schemas/website"
          },
          "technical_doc": {
            "$ref": "#/components/schemas/technical_doc"
          },
          "explorer": {
            "$ref": "#/components/schemas/explorer"
          },
          "source_code": {
            "$ref": "#/components/schemas/source_code"
          },
          "message_board": {
            "$ref": "#/components/schemas/message_board"
          },
          "chat": {
            "$ref": "#/components/schemas/chat"
          },
          "announcement": {
            "$ref": "#/components/schemas/announcement"
          },
          "reddit": {
            "$ref": "#/components/schemas/reddit"
          },
          "twitter": {
            "$ref": "#/components/schemas/twitter"
          }
        },
        "required": [
          "website",
          "technical_doc",
          "explorer",
          "source_code",
          "message_board",
          "chat",
          "announcement",
          "reddit",
          "twitter"
        ]
      },
      "Cryptocurrencies_Info_-_Cryptocurrency_object": {
        "type": "object",
        "description": "A results object for each cryptocurrency requested. The map key being the id/symbol used in the request.",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique CoinMarketCap ID for this cryptocurrency.",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "The name of this cryptocurrency.",
            "example": "Bitcoin"
          },
          "symbol": {
            "type": "string",
            "description": "The ticker symbol for this cryptocurrency.",
            "example": "BTC"
          },
          "category": {
            "type": "string",
            "description": "The category for this cryptocurrency.",
            "example": "coin",
            "enum": ["coin", "token"]
          },
          "slug": {
            "type": "string",
            "description": "The web URL friendly shorthand version of this cryptocurrency name.",
            "example": "bitcoin"
          },
          "logo": {
            "type": "string",
            "description": "Link to a CoinMarketCap hosted logo png for this cryptocurrency. 64px is default size returned. Replace \"64x64\" in the image path with these alternative sizes: 16, 32, 64, 128, 200",
            "example": "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png"
          },
          "description": {
            "type": "string",
            "description": "A CoinMarketCap supplied brief description of this cryptocurrency. This field will return null if a description is not available.",
            "example": "Bitcoin (BTC) is a consensus network that enables a new payment system and a completely digital currency. Powered by its users, it is a peer to peer payment network that requires no central authority to operate."
          },
          "date_added": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of when this cryptocurrency was added to CoinMarketCap.",
            "example": "2013-04-28T00:00:00.000Z"
          },
          "date_launched": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of when this cryptocurrency was launched.",
            "example": "2013-04-28T00:00:00.000Z"
          },
          "notice": {
            "type": "string",
            "description": "A [Markdown](https://commonmark.org/help/) formatted notice that may highlight a significant event or condition that is impacting the cryptocurrency or how it is displayed, otherwise null. A notice may highlight a recent or upcoming mainnet swap, symbol change, exploit event, or known issue with a particular exchange or market, for example. If present, this notice is also displayed in an alert banner at the top of the cryptocurrency's page on coinmarketcap.com."
          },
          "tags": {
            "$ref": "#/components/schemas/tags_1"
          },
          "platform": {
            "$ref": "#/components/schemas/platform"
          },
          "self_reported_circulating_supply": {
            "type": "number",
            "description": "The self reported number of coins circulating for this cryptocurrency.",
            "example": 16950100
          },
          "self_reported_market_cap": {
            "type": "number",
            "description": "The self reported market cap for this cryptocurrency.",
            "example": 16950100
          },
          "self_reported_tags": {
            "$ref": "#/components/schemas/self_reported_tags"
          },
          "urls": {
            "$ref": "#/components/schemas/Cryptocurrencies_Info_-_URLs_object"
          }
        },
        "required": [
          "id",
          "name",
          "symbol",
          "category",
          "slug",
          "logo",
          "description",
          "date_added",
          "date_launched",
          "notice",
          "tags",
          "platform",
          "urls"
        ]
      },
      "Cryptocurrency_Info_-_Results_map": {
        "type": "object",
        "description": "Results of your query returned as an object map.",
        "example": {
          "1": {
            "urls": {
              "website": ["https://bitcoin.org/"],
              "technical_doc": ["https://bitcoin.org/bitcoin.pdf"],
              "twitter": [],
              "reddit": ["https://reddit.com/r/bitcoin"],
              "message_board": ["https://bitcointalk.org"],
              "announcement": [],
              "chat": [],
              "explorer": [
                "https://blockchain.coinmarketcap.com/chain/bitcoin",
                "https://blockchain.info/",
                "https://live.blockcypher.com/btc/"
              ],
              "source_code": ["https://github.com/bitcoin/"]
            },
            "logo": "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png",
            "id": 1,
            "name": "Bitcoin",
            "symbol": "BTC",
            "slug": "bitcoin",
            "description": "Bitcoin (BTC) is a consensus network that enables a new payment system and a completely digital currency. Powered by its users, it is a peer to peer payment network that requires no central authority to operate. On October 31st, 2008, an individual or group of individuals operating under the pseudonym \"Satoshi Nakamoto\" published the Bitcoin Whitepaper and described it as: \"a purely peer-to-peer version of electronic cash would allow online payments to be sent directly from one party to another without going through a financial institution.\"",
            "date_added": "2013-04-28T00:00:00.000Z",
            "date_launched": "2013-04-28T00:00:00.000Z",
            "tags": ["mineable"],
            "platform": null,
            "category": "coin"
          },
          "1027": {
            "urls": {
              "website": ["https://www.ethereum.org/"],
              "technical_doc": ["https://github.com/ethereum/wiki/wiki/White-Paper"],
              "twitter": ["https://twitter.com/ethereum"],
              "reddit": ["https://reddit.com/r/ethereum"],
              "message_board": ["https://forum.ethereum.org/"],
              "announcement": ["https://bitcointalk.org/index.php?topic=428589.0"],
              "chat": ["https://gitter.im/orgs/ethereum/rooms"],
              "explorer": [
                "https://blockchain.coinmarketcap.com/chain/ethereum",
                "https://etherscan.io/",
                "https://ethplorer.io/"
              ],
              "source_code": ["https://github.com/ethereum"]
            },
            "logo": "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
            "id": 1027,
            "name": "Ethereum",
            "symbol": "ETH",
            "slug": "ethereum",
            "description": "Ethereum (ETH) is a smart contract platform that enables developers to build decentralized applications (dapps) conceptualized by Vitalik Buterin in 2013. ETH is the native currency for the Ethereum platform and also works as the transaction fees to miners on the Ethereum network.\n\nEthereum is the pioneer for blockchain based smart contracts. When running on the blockchain a smart contract becomes like a self-operating computer program that automatically executes when specific conditions are met. On the blockchain, smart contracts allow for code to be run exactly as programmed without any possibility of downtime, censorship, fraud or third-party interference. It can facilitate the exchange of money, content, property, shares, or anything of value. The Ethereum network went live on July 30th, 2015 with 72 million Ethereum premined.",
            "notice": null,
            "date_added": "2015-08-07T00:00:00.000Z",
            "date_launched": "2015-08-07T00:00:00.000Z",
            "tags": ["mineable"],
            "platform": null,
            "category": "coin",
            "self_reported_circulating_supply": null,
            "self_reported_market_cap": null,
            "self_reported_tags": null
          }
        },
        "properties": {
          "$key": {
            "$ref": "#/components/schemas/Cryptocurrencies_Info_-_Cryptocurrency_object"
          }
        },
        "required": ["$key"]
      },
      "Cryptocurrencies_Info_-_Response_Model": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Cryptocurrency_Info_-_Results_map"
          },
          "status": {
            "$ref": "#/components/schemas/API_Status_Object"
          }
        },
        "required": ["data"]
      },
      "Cryptocurrency_Map_-_Cryotocurrency_Object": {
        "type": "object",
        "description": "Cryptocurrency object for each result",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique cryptocurrency ID for this cryptocurrency.",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "The name of this cryptocurrency.",
            "example": "Bitcoin"
          },
          "symbol": {
            "type": "string",
            "description": "The ticker symbol for this cryptocurrency, always in all caps.",
            "example": "BTC"
          },
          "slug": {
            "type": "string",
            "description": "The web URL friendly shorthand version of this cryptocurrency name.",
            "example": "bitcoin"
          },
          "is_active": {
            "type": "integer",
            "description": "1 if this cryptocurrency has at least 1 active market currently being tracked by the platform, otherwise 0. A value of 1 is analogous with `listing_status=active`.",
            "example": 1,
            "minimum": 0,
            "maximum": 1
          },
          "status": {
            "type": "string",
            "description": "The listing status of the cryptocurrency. *This field is only returned if requested through the `aux` request parameter.*",
            "example": "active",
            "enum": ["active", "inactive", "untracked"]
          },
          "first_historical_data": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of the date this cryptocurrency was first available on the platform.",
            "example": "2013-04-28T18:47:21.000Z"
          },
          "last_historical_data": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of the last time this cryptocurrency's market data was updated.",
            "example": "2018-06-02T22:51:28.209Z"
          },
          "platform": {
            "$ref": "#/components/schemas/platform"
          }
        },
        "required": ["id", "name", "symbol", "slug"]
      },
      "Cryptocurrency_Map_-_Cryptocurrency_Array": {
        "type": "array",
        "description": "Array of cryptocurrency object results.",
        "items": {
          "$ref": "#/components/schemas/Cryptocurrency_Map_-_Cryotocurrency_Object"
        }
      },
      "Cryptocurrency_Map_-_Response_Model": {
        "type": "object",
        "example": {
          "data": [
            {
              "id": 1,
              "rank": 1,
              "name": "Bitcoin",
              "symbol": "BTC",
              "slug": "bitcoin",
              "is_active": 1,
              "first_historical_data": "2013-04-28T18:47:21.000Z",
              "last_historical_data": "2020-05-05T20:44:01.000Z",
              "platform": null
            },
            {
              "id": 1839,
              "rank": 3,
              "name": "Binance Coin",
              "symbol": "BNB",
              "slug": "binance-coin",
              "is_active": 1,
              "first_historical_data": "2017-07-25T04:30:05.000Z",
              "last_historical_data": "2020-05-05T20:44:02.000Z",
              "platform": {
                "id": 1027,
                "name": "Ethereum",
                "symbol": "ETH",
                "slug": "ethereum",
                "token_address": "0xB8c77482e45F1F44dE1745F52C74426C631bDD52"
              }
            },
            {
              "id": 825,
              "rank": 5,
              "name": "Tether",
              "symbol": "USDT",
              "slug": "tether",
              "is_active": 1,
              "first_historical_data": "2015-02-25T13:34:26.000Z",
              "last_historical_data": "2020-05-05T20:44:01.000Z",
              "platform": {
                "id": 1027,
                "name": "Ethereum",
                "symbol": "ETH",
                "slug": "ethereum",
                "token_address": "0xdac17f958d2ee523a2206206994597c13d831ec7"
              }
            }
          ],
          "status": {
            "timestamp": "2018-06-02T22:51:28.209Z",
            "error_code": 0,
            "error_message": "",
            "elapsed": 10,
            "credit_count": 1
          }
        },
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Cryptocurrency_Map_-_Cryptocurrency_Array"
          },
          "status": {
            "$ref": "#/components/schemas/API_Status_Object"
          }
        },
        "required": ["data"]
      },
      "website_1": {
        "type": "array",
        "description": "Official website URLs.",
        "example": ["https://binance.com"],
        "items": {
          "type": "string"
        }
      },
      "chat_1": {
        "type": "array",
        "description": "Official chat URLs.",
        "example": ["https://t.me/coinbene"],
        "items": {
          "type": "string"
        }
      },
      "twitter_1": {
        "type": "array",
        "description": "Official twitter profile URLs.",
        "example": ["https://twitter.com/Bitcoin"],
        "items": {
          "type": "string"
        }
      },
      "Exchanges_Info_-_URLs_object": {
        "type": "object",
        "description": "An object containing various resource URLs for this exchange.",
        "properties": {
          "website": {
            "$ref": "#/components/schemas/website_1"
          },
          "blog": {
            "$ref": "#/components/schemas/blog"
          },
          "chat": {
            "$ref": "#/components/schemas/chat_1"
          },
          "fee": {
            "$ref": "#/components/schemas/fee"
          },
          "twitter": {
            "$ref": "#/components/schemas/twitter_1"
          }
        },
        "required": ["website", "blog", "chat", "fee", "twitter"]
      },
      "Exchanges_Info_-_Exchange_Info_object": {
        "type": "object",
        "description": "A results object for each exchange requested. The map key being the id or slug used in the request.",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique CoinMarketCap ID for this exchange.",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "The name of this exchange.",
            "example": "Binance"
          },
          "slug": {
            "type": "string",
            "description": "The web URL friendly shorthand version of the exchange name.",
            "example": "binance"
          },
          "logo": {
            "type": "string",
            "description": "Link to a CoinMarketCap hosted logo png for this exchange. 64px is default size returned. Replace \"64x64\" in the image path with these alternative sizes: 16, 32, 64, 128, 200",
            "example": "https://s2.coinmarketcap.com/static/img/exchanges/64x64/270.png"
          },
          "description": {
            "type": "string",
            "description": "A CoinMarketCap supplied brief description of this cryptocurrency exchange. This field will return null if a description is not available.",
            "example": "Launched in Jul-2017, Binance is a centralized exchange based in Malta."
          },
          "date_launched": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of the launch date for this exchange.",
            "example": "2017-07-14T00:00:00.000Z"
          },
          "notice": {
            "type": "string",
            "description": "A [Markdown](https://commonmark.org/help/) formatted message outlining a condition that is impacting the availability of the exchange's market data or the secure use of the exchange, otherwise null. This may include a maintenance event on the exchange's end or CoinMarketCap's end, an alert about reported issues with withdrawls from this exchange, or another condition that may be impacting the exchange and it's markets. If present, this notice is also displayed in an alert banner at the top of the exchange's page on coinmarketcap.com."
          },
          "weekly_visits": {
            "type": "number",
            "description": "The number of weekly visitors.",
            "example": 1000
          },
          "spot_volume_usd": {
            "type": "number",
            "description": "Reported all time spot volume in the specified currency.",
            "example": 768478308.529847
          },
          "urls": {
            "$ref": "#/components/schemas/Exchanges_Info_-_URLs_object"
          }
        },
        "required": ["id", "name", "slug", "logo", "description", "date_launched", "notice", "urls"]
      },
      "Exchanges_Info_-_Results_map": {
        "type": "object",
        "description": "Results of your query returned as an object map.",
        "example": {
          "270": {
            "id": 270,
            "name": "Binance",
            "slug": "binance",
            "logo": "https://s2.coinmarketcap.com/static/img/exchanges/64x64/270.png",
            "description": "Launched in Jul-2017, Binance is a centralized exchange based in Malta.",
            "date_launched": "2017-07-14T00:00:00.000Z",
            "notice": null,
            "countries": [],
            "fiats": ["AED", "USD"],
            "tags": null,
            "type": "",
            "maker_fee": 0.02,
            "taker_fee": 0.04,
            "weekly_visits": 5123451,
            "spot_volume_usd": 66926283498.60113,
            "spot_volume_last_updated": "2021-05-06T01:20:15.451Z",
            "urls": {
              "website": ["https://www.binance.com/"],
              "twitter": ["https://twitter.com/binance"],
              "blog": [],
              "chat": ["https://t.me/binanceexchange"],
              "fee": ["https://www.binance.com/fees.html"]
            }
          }
        },
        "properties": {
          "$key": {
            "$ref": "#/components/schemas/Exchanges_Info_-_Exchange_Info_object"
          }
        },
        "required": ["$key"]
      },
      "Exchanges_Info_-_Response_Model": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Exchanges_Info_-_Results_map"
          },
          "status": {
            "$ref": "#/components/schemas/API_Status_Object"
          }
        },
        "required": ["data"]
      },
      "Exchange_Map_-_Exchange_Object": {
        "type": "object",
        "description": "Exchange object description",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique CoinMarketCap ID for this exchange.",
            "example": 270
          },
          "name": {
            "type": "string",
            "description": "The name of this exchange.",
            "example": "Binance"
          },
          "slug": {
            "type": "string",
            "description": "The web URL friendly shorthand version of this exchange name.",
            "example": "binance"
          },
          "is_active": {
            "type": "integer",
            "description": "1 if this exchange is still being actively tracked and updated, otherwise 0.",
            "example": 1,
            "minimum": 0,
            "maximum": 1
          },
          "status": {
            "type": "string",
            "description": "The listing status of the exchange. *This field is only returned if requested through the `aux` request parameter.*",
            "example": "active",
            "enum": ["active", "inactive", "untracked"]
          },
          "first_historical_data": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of the earliest market data record available to query using our historical endpoints. `null` if there is no historical data currently available for this exchange.",
            "example": "2018-04-26T00:45:00.000Z"
          },
          "last_historical_data": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of the latest market data record available to query using our historical endpoints. `null` if there is no historical data currently available for this exchange.",
            "example": "2019-06-02T21:25:00.000Z"
          }
        },
        "required": ["id", "name", "slug"]
      },
      "Exchange_Map_-_Exchanges_Array": {
        "type": "array",
        "description": "Array of exchange object results.",
        "items": {
          "$ref": "#/components/schemas/Exchange_Map_-_Exchange_Object"
        }
      },
      "Exchange_Map_-_Response_Model": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Exchange_Map_-_Exchanges_Array"
          },
          "status": {
            "$ref": "#/components/schemas/API_Status_Object"
          }
        },
        "required": ["data"]
      },
      "Fiat_Map_-_Fiat_Object": {
        "type": "object",
        "description": "Fiat object for each result",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique CoinMarketCap ID for this asset.",
            "example": 2781
          },
          "name": {
            "type": "string",
            "description": "The name of this asset.",
            "example": "United States Dollar"
          },
          "sign": {
            "type": "string",
            "description": "The currency sign for this asset.",
            "example": "$"
          },
          "symbol": {
            "type": "string",
            "description": "The ticker symbol for this asset, always in all caps.",
            "example": "USD"
          }
        },
        "required": ["id", "name", "sign", "symbol"]
      },
      "Fiat_Map_-_Fiat_Array": {
        "type": "array",
        "description": "Array of fiat object results.",
        "items": {
          "$ref": "#/components/schemas/Fiat_Map_-_Fiat_Object"
        }
      },
      "Fiat_Map_-_Response_Model": {
        "type": "object",
        "example": {
          "data": [
            {
              "id": 2781,
              "name": "United States Dollar",
              "sign": "$",
              "symbol": "USD"
            },
            {
              "id": 2787,
              "name": "Chinese Yuan",
              "sign": "¥",
              "symbol": "CNY"
            },
            {
              "id": 2781,
              "name": "South Korean Won",
              "sign": "₩",
              "symbol": "KRW"
            }
          ],
          "status": {
            "timestamp": "2020-01-07T22:51:28.209Z",
            "error_code": 0,
            "error_message": "",
            "elapsed": 3,
            "credit_count": 1
          }
        },
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Fiat_Map_-_Fiat_Array"
          },
          "status": {
            "$ref": "#/components/schemas/API_Status_Object"
          }
        },
        "required": ["data"]
      },
      "Account_Info_-_Response_Object": {
        "type": "object",
        "description": "Details about your API key are returned in this object.",
        "properties": {
          "plan": {
            "$ref": "#/components/schemas/plan"
          },
          "usage": {
            "$ref": "#/components/schemas/usage"
          }
        },
        "required": ["plan", "usage"]
      },
      "Account_Info_-_Response_Model": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Account_Info_-_Response_Object"
          },
          "status": {
            "$ref": "#/components/schemas/API_Status_Object"
          }
        },
        "required": ["data"]
      },
      "Tools_Price_Conversion_-_Quote_object": {
        "type": "object",
        "description": "A quote object for each conversion requested. The map key being the id/symbol used in the request.",
        "properties": {
          "price": {
            "type": "number",
            "description": "Converted price in terms of the quoted currency and historic time (if supplied).",
            "example": 1235000
          },
          "last_updated": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of when the destination currency's market value was recorded.",
            "example": "2018-06-02T00:00:00.000Z"
          }
        },
        "required": ["price", "last_updated"]
      },
      "Tools_Price_Conversion_-_Quotes_map": {
        "type": "object",
        "description": "An object map of price conversions.",
        "properties": {
          "$key": {
            "$ref": "#/components/schemas/Tools_Price_Conversion_-_Quote_object"
          }
        },
        "required": ["$key"]
      },
      "Tools_Price_Conversion_-_Results_Object": {
        "type": "object",
        "description": "Results object for your API call.",
        "example": {
          "symbol": "BTC",
          "id": "1",
          "name": "Bitcoin",
          "amount": 50,
          "last_updated": "2018-06-06T08:04:36.000Z",
          "quote": {
            "GBP": {
              "price": 284656.08465608465,
              "last_updated": "2018-06-06T06:00:00.000Z"
            },
            "LTC": {
              "price": 3128.7279766396537,
              "last_updated": "2018-06-06T08:04:02.000Z"
            },
            "USD": {
              "price": 381442,
              "last_updated": "2018-06-06T08:06:51.968Z"
            }
          }
        },
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique CoinMarketCap ID for your base currency.",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "The name of your base currency.",
            "example": "Bitcoin"
          },
          "symbol": {
            "type": "string",
            "description": "The symbol for your base currency.",
            "example": "BTC"
          },
          "amount": {
            "type": "number",
            "description": "Amount of base currency to convert from.",
            "example": 50
          },
          "last_updated": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of when the referenced market value of the base currency was recorded.",
            "example": "2018-06-02T00:00:00.000Z"
          },
          "quote": {
            "$ref": "#/components/schemas/Tools_Price_Conversion_-_Quotes_map"
          }
        },
        "required": ["id", "name", "symbol", "amount", "last_updated", "quote"]
      },
      "Tools_Price_Conversion_-_Response_Model": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Tools_Price_Conversion_-_Results_Object"
          },
          "status": {
            "$ref": "#/components/schemas/API_Status_Object"
          }
        },
        "required": ["data"]
      },
      "Blockchain_Statistics_Latest_-_Blockchain_object": {
        "type": "object",
        "description": "A blockchain object for every blockchain that matched list options.",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique CoinMarketCap ID for this blockchain's cryptocurrency.",
            "example": 1
          },
          "slug": {
            "type": "string",
            "description": "The web URL friendly shorthand version of the cryptocurrency's name.",
            "example": "bitcoin"
          },
          "symbol": {
            "type": "string",
            "description": "The ticker symbol for the cryptocurrency.",
            "example": "BTC"
          },
          "block_reward_static": {
            "type": "number",
            "description": "The reward assigned to the miner of a block excluding fees.",
            "example": 12.5
          },
          "consensus_mechanism": {
            "type": "string",
            "description": "The consensus mechanism used by the blockchain, for example, \"proof-of-work\" or \"proof-of-stake\".",
            "example": "proof-of-work"
          },
          "difficulty": {
            "type": "string",
            "description": "The global block difficulty determining how hard to find a hash on this blockchain. *Note: This integer is returned as a string to use with BigInt libraries as it may exceed the max safe integer size for many programming languages.*",
            "example": "2264398029247833"
          },
          "hashrate_24h": {
            "type": "string",
            "description": "The average hashrate over the past 24 hours. *Note: This integer is returned as a string to use with BigInt libraries as it may exceed the max safe integer size for many programming languages.*",
            "example": "169267882822616"
          },
          "pending_transactions": {
            "type": "integer",
            "description": "The number of pending transactions.",
            "example": 5120
          },
          "reduction_rate": {
            "type": "string",
            "description": "The rate the block reward is adjusted at a specified interval.",
            "example": "50%"
          },
          "total_blocks": {
            "type": "integer",
            "description": "The total number of blocks.",
            "example": 8385036
          },
          "total_transactions": {
            "type": "string",
            "description": "The total number of transactions. *Note: This integer is returned as a string to use with BigInt libraries as it may exceed the max safe integer size for many programming languages.*",
            "example": "523059480"
          },
          "tps_24h": {
            "type": "number",
            "description": "The average transactions per second over the past 24 hours.",
            "example": 8.463935185185186
          },
          "first_block_timestamp": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of the time the first block was mined on this chain.",
            "example": "2009-01-09T02:54:25.000Z"
          }
        },
        "required": [
          "id",
          "slug",
          "symbol",
          "block_reward_static",
          "consensus_mechanism",
          "difficulty",
          "hashrate_24h",
          "pending_transactions",
          "reduction_rate",
          "total_blocks",
          "total_transactions",
          "tps_24h",
          "first_block_timestamp"
        ]
      },
      "Blockchain_Statistics_Latest_-_Results_map": {
        "type": "object",
        "description": "A map of blockchain objects by ID, symbol, or slug (as used in query parameters).",
        "example": {
          "BTC": {
            "id": 1,
            "slug": "bitcoin",
            "symbol": "BTC",
            "block_reward_static": 12.5,
            "consensus_mechanism": "proof-of-work",
            "difficulty": "11890594958796",
            "hashrate_24h": "85116194130018810000",
            "pending_transactions": 1177,
            "reduction_rate": "50%",
            "total_blocks": 595165,
            "total_transactions": "455738994",
            "tps_24h": 3.808090277777778,
            "first_block_timestamp": "2009-01-09T02:54:25.000Z"
          }
        },
        "properties": {
          "$key": {
            "$ref": "#/components/schemas/Blockchain_Statistics_Latest_-_Blockchain_object"
          }
        },
        "required": ["$key"]
      },
      "Blockchain_Statistics_Latest_-_Response_Model": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Blockchain_Statistics_Latest_-_Results_map"
          },
          "status": {
            "$ref": "#/components/schemas/API_Status_Object"
          }
        },
        "required": ["data"]
      },
      "Cryptocurrency_Listings_Latest_-_Quote_object": {
        "type": "object",
        "description": "A market quote in the currency conversion option.",
        "properties": {
          "price": {
            "type": "number",
            "description": "Price in the specified currency at the end of the requested UTC day.",
            "example": 7139.82
          },
          "volume_24h": {
            "type": "number",
            "description": "24 hour adjusted volume in the specified currency at the end of the requested UTC day.",
            "example": 4885880000
          },
          "market_cap": {
            "type": "number",
            "description": "Market cap in the specified currency at the end of the requested UTC day.",
            "example": 121020662982
          },
          "percent_change_1h": {
            "type": "number",
            "description": "1 hour change in the specified currency at the end of the requested UTC day.",
            "example": 0.03
          },
          "percent_change_24h": {
            "type": "number",
            "description": "24 hour change in the specified currency at the end of the requested UTC day.",
            "example": 5.75
          },
          "percent_change_7d": {
            "type": "number",
            "description": "7 day change in the specified currency at the end of the requested UTC day.",
            "example": -19.64
          },
          "last_updated": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of when the conversion currency's current value was referenced.",
            "example": "2018-06-02T23:59:59.999Z"
          }
        },
        "required": [
          "price",
          "volume_24h",
          "market_cap",
          "percent_change_1h",
          "percent_change_24h",
          "percent_change_7d",
          "last_updated"
        ]
      },
      "Cryptocurrency_Listings_Latest_-_Quote_map": {
        "type": "object",
        "description": "A map of market quotes in different currency conversions. The default map included is USD.",
        "example": {
          "USD": {
            "price": 9283.92,
            "volume_24h": 7155680000,
            "percent_change_1h": -0.152774,
            "percent_change_24h": 0.518894,
            "percent_change_7d": 0.986573,
            "market_cap": 158055024432
          },
          "BTC": {
            "price": 1,
            "volume_24h": 772012,
            "percent_change_1h": 0,
            "percent_change_24h": 0,
            "percent_change_7d": 0,
            "market_cap": 17024600
          }
        },
        "properties": {
          "$key": {
            "$ref": "#/components/schemas/Cryptocurrency_Listings_Latest_-_Quote_object"
          }
        },
        "required": ["$key"]
      },
      "Cryptocurrency_Listings_Latest_-_Cryptocurrency_object": {
        "type": "object",
        "description": "A cryptocurrency object for every cryptocurrency that matched list options.",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique CoinMarketCap ID for this cryptocurrency.",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "The name of this cryptocurrency.",
            "example": "Bitcoin"
          },
          "symbol": {
            "type": "string",
            "description": "The ticker symbol for this cryptocurrency.",
            "example": "BTC"
          },
          "slug": {
            "type": "string",
            "description": "The web URL friendly shorthand version of this cryptocurrency name.",
            "example": "bitcoin"
          },
          "cmc_rank": {
            "type": "integer",
            "description": "The cryptocurrency's historic CoinMarketCap rank at the end of the requested UTC day.",
            "example": 5
          },
          "num_market_pairs": {
            "type": "integer",
            "description": "The number of active trading pairs available for this cryptocurrency across supported exchanges.",
            "example": 500
          },
          "circulating_supply": {
            "type": "number",
            "description": "The approximate number of coins circulating for this cryptocurrency at the end of the requested UTC day.",
            "example": 16950100
          },
          "total_supply": {
            "type": "number",
            "description": "The approximate total amount of coins in existence right now (minus any coins that have been verifiably burned) at the end of the requested UTC day.",
            "example": 16950100
          },
          "max_supply": {
            "type": "number",
            "description": "The expected maximum limit of coins ever to be available for this cryptocurrency.",
            "example": 21000000
          },
          "last_updated": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of when this cryptocurrency's market data was referenced for this UTC date snapshot. This is always the last update available during the UTC date requested.",
            "example": "2018-06-02T22:51:28.209Z"
          },
          "date_added": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of when this cryptocurrency was added to CoinMarketCap.",
            "example": "2013-04-28T00:00:00.000Z"
          },
          "tags": {
            "$ref": "#/components/schemas/tags"
          },
          "platform": {
            "$ref": "#/components/schemas/platform"
          },
          "quote": {
            "$ref": "#/components/schemas/Cryptocurrency_Listings_Latest_-_Quote_map"
          }
        },
        "required": [
          "id",
          "name",
          "symbol",
          "slug",
          "cmc_rank",
          "circulating_supply",
          "total_supply",
          "max_supply",
          "last_updated",
          "date_added",
          "tags",
          "platform",
          "quote"
        ]
      },
      "Cryptocurrency_Listings_Latest_-_Results_array": {
        "type": "array",
        "description": "Array of cryptocurrency objects matching the list options.",
        "items": {
          "$ref": "#/components/schemas/Cryptocurrency_Listings_Latest_-_Cryptocurrency_object"
        },
        "required": ["Cryptocurrency Listings Latest - Cryptocurrency object"]
      },
      "Cryptocurrency_Listings_Latest_-_Response_Model": {
        "type": "object",
        "example": {
          "data": [
            {
              "id": 1,
              "name": "Bitcoin",
              "symbol": "BTC",
              "slug": "bitcoin",
              "cmc_rank": 1,
              "num_market_pairs": 500,
              "circulating_supply": 17200062,
              "total_supply": 17200062,
              "max_supply": 21000000,
              "last_updated": "2018-06-02T22:51:28.209Z",
              "date_added": "2013-04-28T00:00:00.000Z",
              "tags": ["mineable"],
              "platform": null,
              "quote": {
                "USD": {
                  "price": 9283.92,
                  "volume_24h": 7155680000,
                  "percent_change_1h": -0.152774,
                  "percent_change_24h": 0.518894,
                  "percent_change_7d": 0.986573,
                  "market_cap": 158055024432,
                  "last_updated": "2018-08-09T22:53:32.000Z"
                },
                "BTC": {
                  "price": 1,
                  "volume_24h": 772012,
                  "percent_change_1h": 0,
                  "percent_change_24h": 0,
                  "percent_change_7d": 0,
                  "market_cap": 17024600,
                  "last_updated": "2018-08-09T22:53:32.000Z"
                }
              }
            },
            {
              "id": 1027,
              "name": "Ethereum",
              "symbol": "ETH",
              "slug": "ethereum",
              "num_market_pairs": 6089,
              "circulating_supply": 17200062,
              "total_supply": 17200062,
              "max_supply": 21000000,
              "last_updated": "2018-06-02T22:51:28.209Z",
              "date_added": "2013-04-28T00:00:00.000Z",
              "tags": ["mineable"],
              "platform": null,
              "quote": {
                "USD": {
                  "price": 1678.6501384942708,
                  "volume_24h": 7155680000,
                  "percent_change_1h": -0.152774,
                  "percent_change_24h": 0.518894,
                  "percent_change_7d": 0.986573,
                  "market_cap": 158055024432,
                  "last_updated": "2018-08-09T22:53:32.000Z"
                },
                "ETH": {
                  "price": 1,
                  "volume_24h": 772012,
                  "percent_change_1h": 0,
                  "percent_change_24h": 0,
                  "percent_change_7d": 0,
                  "market_cap": 17024600,
                  "last_updated": "2018-08-09T22:53:32.000Z"
                }
              }
            }
          ],
          "status": {
            "timestamp": "2019-04-02T22:44:24.200Z",
            "error_code": 0,
            "error_message": "",
            "elapsed": 10,
            "credit_count": 1
          }
        },
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Cryptocurrency_Listings_Latest_-_Results_array"
          },
          "status": {
            "$ref": "#/components/schemas/API_Status_Object"
          }
        },
        "required": ["data"]
      },
      "Cryptocurrency_Listings_Latest_-_Quote_object_1": {
        "type": "object",
        "description": "A market quote in the currency conversion option.",
        "properties": {
          "price": {
            "type": "number",
            "description": "Price in the specified currency for this historical.",
            "example": 7139.82
          },
          "volume_24h": {
            "type": "number",
            "description": "Rolling 24 hour adjusted volume in the specified currency.",
            "example": 4885880000
          },
          "volume_change_24h": {
            "type": "number",
            "description": "24 hour change in the specified currencies volume.",
            "example": 5.75
          },
          "volume_24h_reported": {
            "type": "number",
            "description": "Rolling 24 hour reported volume in the specified currency. *This field is only returned if requested through the `aux` request parameter.*",
            "example": 4885880000
          },
          "volume_7d": {
            "type": "number",
            "description": "Rolling 7 day adjusted volume in the specified currency. *This field is only returned if requested through the `aux` request parameter.*",
            "example": 4885880000
          },
          "volume_7d_reported": {
            "type": "number",
            "description": "Rolling 7 day reported volume in the specified currency. *This field is only returned if requested through the `aux` request parameter.*",
            "example": 4885880000
          },
          "volume_30d": {
            "type": "number",
            "description": "Rolling 30 day adjusted volume in the specified currency. *This field is only returned if requested through the `aux` request parameter.*",
            "example": 4885880000
          },
          "volume_30d_reported": {
            "type": "number",
            "description": "Rolling 30 day reported volume in the specified currency. *This field is only returned if requested through the `aux` request parameter.*",
            "example": 4885880000
          },
          "market_cap": {
            "type": "number",
            "description": "Market cap in the specified currency.",
            "example": 121020662982
          },
          "market_cap_dominance": {
            "type": "number",
            "description": "Market cap dominance in the specified currency.",
            "example": 121020662982
          },
          "fully_diluted_market_cap": {
            "type": "number",
            "description": "Fully diluted market cap in the specified currency.",
            "example": 121020662982
          },
          "tvl": {
            "type": "number",
            "description": "Total Value Locked",
            "example": 0
          },
          "percent_change_1h": {
            "type": "number",
            "description": "1 hour change in the specified currency.",
            "example": 0.03
          },
          "percent_change_24h": {
            "type": "number",
            "description": "24 hour change in the specified currency.",
            "example": 5.75
          },
          "percent_change_7d": {
            "type": "number",
            "description": "7 day change in the specified currency.",
            "example": -19.64
          },
          "last_updated": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of when the conversion currency's current value was referenced.",
            "example": "2018-06-02T23:59:59.999Z"
          }
        },
        "required": [
          "price",
          "volume_24h",
          "market_cap",
          "market_cap_dominance",
          "fully_diluted_market_cap",
          "percent_change_1h",
          "percent_change_24h",
          "percent_change_7d",
          "last_updated"
        ]
      },
      "Cryptocurrency_Listings_Latest_-_Quote_map_1": {
        "type": "object",
        "description": "A map of market quotes in different currency conversions. The default map included is USD.",
        "example": {
          "USD": {
            "price": 9283.92,
            "volume_24h": 7155680000,
            "volume_change_24h": -0.152774,
            "percent_change_1h": -0.152774,
            "percent_change_24h": 0.518894,
            "percent_change_7d": 0.986573,
            "market_cap": 158055024432,
            "market_cap_dominance": 51,
            "fully_diluted_market_cap": 952835089431.14,
            "last_updated": "2018-08-09T22:53:32.000Z"
          },
          "BTC": {
            "price": 1,
            "volume_24h": 772012,
            "volume_change_24h": -0.152774,
            "percent_change_1h": 0,
            "percent_change_24h": 0,
            "percent_change_7d": 0,
            "market_cap": 17024600,
            "market_cap_dominance": 12,
            "fully_diluted_market_cap": 952835089431.14,
            "last_updated": "2018-08-09T22:53:32.000Z"
          }
        },
        "properties": {
          "$key": {
            "$ref": "#/components/schemas/Cryptocurrency_Listings_Latest_-_Quote_object_1"
          }
        },
        "required": ["$key"]
      },
      "Cryptocurrency_Listings_Latest_-_Cryptocurrency_object_1": {
        "type": "object",
        "description": "A cryptocurrency object for every cryptocurrency that matched list options.",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique CoinMarketCap ID for this cryptocurrency.",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "The name of this cryptocurrency.",
            "example": "Bitcoin"
          },
          "symbol": {
            "type": "string",
            "description": "The ticker symbol for this cryptocurrency.",
            "example": "BTC"
          },
          "slug": {
            "type": "string",
            "description": "The web URL friendly shorthand version of this cryptocurrency name.",
            "example": "bitcoin"
          },
          "cmc_rank": {
            "type": "integer",
            "description": "The cryptocurrency's CoinMarketCap rank by market cap.",
            "example": 5
          },
          "num_market_pairs": {
            "type": "integer",
            "description": "The number of active trading pairs available for this cryptocurrency across supported exchanges.",
            "example": 500
          },
          "circulating_supply": {
            "type": "number",
            "description": "The approximate number of coins circulating for this cryptocurrency.",
            "example": 16950100
          },
          "total_supply": {
            "type": "number",
            "description": "The approximate total amount of coins in existence right now (minus any coins that have been verifiably burned).",
            "example": 16950100
          },
          "market_cap_by_total_supply": {
            "type": "number",
            "description": "The market cap by total supply. *This field is only returned if requested through the `aux` request parameter.*",
            "example": 158055024432
          },
          "max_supply": {
            "type": "number",
            "description": "The expected maximum limit of coins ever to be available for this cryptocurrency.",
            "example": 21000000
          },
          "last_updated": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of the last time this cryptocurrency's market data was updated.",
            "example": "2018-06-02T22:51:28.209Z"
          },
          "date_added": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of when this cryptocurrency was added to CoinMarketCap.",
            "example": "2013-04-28T00:00:00.000Z"
          },
          "tags": {
            "$ref": "#/components/schemas/tags"
          },
          "self_reported_circulating_supply": {
            "type": "number",
            "description": "The self reported number of coins circulating for this cryptocurrency.",
            "example": 16950100
          },
          "self_reported_market_cap": {
            "type": "number",
            "description": "The self reported market cap for this cryptocurrency.",
            "example": 16950100
          },
          "tvl_ratio": {
            "type": "number",
            "description": "Percentage of Total Value Locked",
            "example": 0
          },
          "platform": {
            "$ref": "#/components/schemas/platform"
          },
          "quote": {
            "$ref": "#/components/schemas/Cryptocurrency_Listings_Latest_-_Quote_map_1"
          }
        },
        "required": ["id", "name", "symbol", "slug", "last_updated", "quote"]
      },
      "Cryptocurrency_Listings_Latest_-_Results_array_1": {
        "type": "array",
        "description": "Array of cryptocurrency objects matching the list options.",
        "items": {
          "$ref": "#/components/schemas/Cryptocurrency_Listings_Latest_-_Cryptocurrency_object_1"
        },
        "required": ["Cryptocurrency Listings Latest - Cryptocurrency object"]
      },
      "Cryptocurrency_Listings_Latest_-_Response_Model_1": {
        "type": "object",
        "example": {
          "data": [
            {
              "id": 1,
              "name": "Bitcoin",
              "symbol": "BTC",
              "slug": "bitcoin",
              "cmc_rank": 5,
              "num_market_pairs": 500,
              "circulating_supply": 16950100,
              "total_supply": 16950100,
              "max_supply": 21000000,
              "last_updated": "2018-06-02T22:51:28.209Z",
              "date_added": "2013-04-28T00:00:00.000Z",
              "tags": ["mineable"],
              "platform": null,
              "self_reported_circulating_supply": null,
              "self_reported_market_cap": null,
              "quote": {
                "USD": {
                  "price": 9283.92,
                  "volume_24h": 7155680000,
                  "volume_change_24h": -0.152774,
                  "percent_change_1h": -0.152774,
                  "percent_change_24h": 0.518894,
                  "percent_change_7d": 0.986573,
                  "market_cap": 852164659250.2758,
                  "market_cap_dominance": 51,
                  "fully_diluted_market_cap": 952835089431.14,
                  "last_updated": "2018-08-09T22:53:32.000Z"
                },
                "BTC": {
                  "price": 1,
                  "volume_24h": 772012,
                  "volume_change_24h": 0,
                  "percent_change_1h": 0,
                  "percent_change_24h": 0,
                  "percent_change_7d": 0,
                  "market_cap": 17024600,
                  "market_cap_dominance": 12,
                  "fully_diluted_market_cap": 952835089431.14,
                  "last_updated": "2018-08-09T22:53:32.000Z"
                }
              }
            },
            {
              "id": 1027,
              "name": "Ethereum",
              "symbol": "ETH",
              "slug": "ethereum",
              "num_market_pairs": 6360,
              "circulating_supply": 16950100,
              "total_supply": 16950100,
              "max_supply": 21000000,
              "last_updated": "2018-06-02T22:51:28.209Z",
              "date_added": "2013-04-28T00:00:00.000Z",
              "tags": ["mineable"],
              "platform": null,
              "quote": {
                "USD": {
                  "price": 1283.92,
                  "volume_24h": 7155680000,
                  "volume_change_24h": -0.152774,
                  "percent_change_1h": -0.152774,
                  "percent_change_24h": 0.518894,
                  "percent_change_7d": 0.986573,
                  "market_cap": 158055024432,
                  "market_cap_dominance": 51,
                  "fully_diluted_market_cap": 952835089431.14,
                  "last_updated": "2018-08-09T22:53:32.000Z"
                },
                "ETH": {
                  "price": 1,
                  "volume_24h": 772012,
                  "volume_change_24h": -0.152774,
                  "percent_change_1h": 0,
                  "percent_change_24h": 0,
                  "percent_change_7d": 0,
                  "market_cap": 17024600,
                  "market_cap_dominance": 12,
                  "fully_diluted_market_cap": 952835089431.14,
                  "last_updated": "2018-08-09T22:53:32.000Z"
                }
              }
            }
          ],
          "status": {
            "timestamp": "2018-06-02T22:51:28.209Z",
            "error_code": 0,
            "error_message": "",
            "elapsed": 10,
            "credit_count": 1
          }
        },
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Cryptocurrency_Listings_Latest_-_Results_array_1"
          },
          "status": {
            "$ref": "#/components/schemas/API_Status_Object"
          }
        },
        "required": ["data"]
      },
      "Cryptocurrency_Listings_Latest_-_Quote_object_2": {
        "type": "object",
        "description": "A market quote in the currency conversion option.",
        "properties": {
          "price": {
            "type": "number",
            "description": "Price in the specified currency for this historical.",
            "example": 7139.82
          },
          "volume_24h": {
            "type": "number",
            "description": "Rolling 24 hour adjusted volume in the specified currency.",
            "example": 4885880000
          },
          "volume_change_24h": {
            "type": "number",
            "description": "24 hour change in the specified currencies volume.",
            "example": 5.75
          },
          "volume_24h_reported": {
            "type": "number",
            "description": "Rolling 24 hour reported volume in the specified currency. *This field is only returned if requested through the `aux` request parameter.*",
            "example": 4885880000
          },
          "volume_7d": {
            "type": "number",
            "description": "Rolling 7 day adjusted volume in the specified currency. *This field is only returned if requested through the `aux` request parameter.*",
            "example": 4885880000
          },
          "volume_7d_reported": {
            "type": "number",
            "description": "Rolling 7 day reported volume in the specified currency. *This field is only returned if requested through the `aux` request parameter.*",
            "example": 4885880000
          },
          "volume_30d": {
            "type": "number",
            "description": "Rolling 30 day adjusted volume in the specified currency. *This field is only returned if requested through the `aux` request parameter.*",
            "example": 4885880000
          },
          "volume_30d_reported": {
            "type": "number",
            "description": "Rolling 30 day reported volume in the specified currency. *This field is only returned if requested through the `aux` request parameter.*",
            "example": 4885880000
          },
          "market_cap": {
            "type": "number",
            "description": "Market cap in the specified currency.",
            "example": 121020662982
          },
          "market_cap_dominance": {
            "type": "number",
            "description": "Market cap dominance in the specified currency.",
            "example": 121020662982
          },
          "fully_diluted_market_cap": {
            "type": "number",
            "description": "Fully diluted market cap in the specified currency.",
            "example": 121020662982
          },
          "percent_change_1h": {
            "type": "number",
            "description": "1 hour change in the specified currency.",
            "example": 0.03
          },
          "percent_change_24h": {
            "type": "number",
            "description": "24 hour change in the specified currency.",
            "example": 5.75
          },
          "percent_change_7d": {
            "type": "number",
            "description": "7 day change in the specified currency.",
            "example": -19.64
          },
          "last_updated": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of when the conversion currency's current value was referenced.",
            "example": "2018-06-02T23:59:59.999Z"
          }
        },
        "required": [
          "price",
          "volume_24h",
          "market_cap",
          "market_cap_dominance",
          "fully_diluted_market_cap",
          "percent_change_1h",
          "percent_change_24h",
          "percent_change_7d",
          "last_updated"
        ]
      },
      "Cryptocurrency_Listings_Latest_-_Quote_map_2": {
        "type": "object",
        "description": "A map of market quotes in different currency conversions. The default map included is USD.",
        "example": {
          "USD": {
            "price": 9283.92,
            "volume_24h": 7155680000,
            "volume_change_24h": -0.152774,
            "percent_change_1h": -0.152774,
            "percent_change_24h": 0.518894,
            "percent_change_7d": 0.986573,
            "market_cap": 158055024432,
            "market_cap_dominance": 51,
            "fully_diluted_market_cap": 952835089431.14,
            "last_updated": "2018-08-09T22:53:32.000Z"
          },
          "BTC": {
            "price": 1,
            "volume_24h": 772012,
            "volume_change_24h": -0.152774,
            "percent_change_1h": 0,
            "percent_change_24h": 0,
            "percent_change_7d": 0,
            "market_cap": 17024600,
            "market_cap_dominance": 12,
            "fully_diluted_market_cap": 952835089431.14,
            "last_updated": "2018-08-09T22:53:32.000Z"
          }
        },
        "properties": {
          "$key": {
            "$ref": "#/components/schemas/Cryptocurrency_Listings_Latest_-_Quote_object_2"
          }
        },
        "required": ["$key"]
      },
      "Cryptocurrency_Listings_Latest_-_Cryptocurrency_object_2": {
        "type": "object",
        "description": "A cryptocurrency object for every cryptocurrency that matched list options.",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique CoinMarketCap ID for this cryptocurrency.",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "The name of this cryptocurrency.",
            "example": "Bitcoin"
          },
          "symbol": {
            "type": "string",
            "description": "The ticker symbol for this cryptocurrency.",
            "example": "BTC"
          },
          "slug": {
            "type": "string",
            "description": "The web URL friendly shorthand version of this cryptocurrency name.",
            "example": "bitcoin"
          },
          "cmc_rank": {
            "type": "integer",
            "description": "The cryptocurrency's CoinMarketCap rank by market cap.",
            "example": 5
          },
          "num_market_pairs": {
            "type": "integer",
            "description": "The number of active trading pairs available for this cryptocurrency across supported exchanges.",
            "example": 500
          },
          "circulating_supply": {
            "type": "number",
            "description": "The approximate number of coins circulating for this cryptocurrency.",
            "example": 16950100
          },
          "total_supply": {
            "type": "number",
            "description": "The approximate total amount of coins in existence right now (minus any coins that have been verifiably burned).",
            "example": 16950100
          },
          "market_cap_by_total_supply": {
            "type": "number",
            "description": "The market cap by total supply. *This field is only returned if requested through the `aux` request parameter.*",
            "example": 158055024432
          },
          "max_supply": {
            "type": "number",
            "description": "The expected maximum limit of coins ever to be available for this cryptocurrency.",
            "example": 21000000
          },
          "last_updated": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of the last time this cryptocurrency's market data was updated.",
            "example": "2018-06-02T22:51:28.209Z"
          },
          "date_added": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of when this cryptocurrency was added to CoinMarketCap.",
            "example": "2013-04-28T00:00:00.000Z"
          },
          "tags": {
            "$ref": "#/components/schemas/tags"
          },
          "platform": {
            "$ref": "#/components/schemas/platform"
          },
          "quote": {
            "$ref": "#/components/schemas/Cryptocurrency_Listings_Latest_-_Quote_map_2"
          }
        },
        "required": ["id", "name", "symbol", "slug", "last_updated", "quote"]
      },
      "Cryptocurrency_Listings_New_-_Results_array": {
        "type": "array",
        "description": "Array of cryptocurrency objects matching the list options.",
        "items": {
          "$ref": "#/components/schemas/Cryptocurrency_Listings_Latest_-_Cryptocurrency_object_2"
        },
        "required": ["Cryptocurrency Listings Latest - Cryptocurrency object"]
      },
      "Cryptocurrency_Listings_New_-_Response_Model": {
        "type": "object",
        "example": {
          "data": [
            {
              "id": 1,
              "name": "Bitcoin",
              "symbol": "BTC",
              "slug": "bitcoin",
              "cmc_rank": 5,
              "num_market_pairs": 500,
              "circulating_supply": 16950100,
              "total_supply": 16950100,
              "max_supply": 21000000,
              "last_updated": "2018-06-02T22:51:28.209Z",
              "date_added": "2013-04-28T00:00:00.000Z",
              "tags": ["mineable"],
              "platform": null,
              "quote": {
                "USD": {
                  "price": 9283.92,
                  "volume_24h": 7155680000,
                  "volume_change_24h": -0.152774,
                  "percent_change_1h": -0.152774,
                  "percent_change_24h": 0.518894,
                  "percent_change_7d": 0.986573,
                  "market_cap": 852164659250.2758,
                  "market_cap_dominance": 51,
                  "fully_diluted_market_cap": 952835089431.14,
                  "last_updated": "2018-08-09T22:53:32.000Z"
                },
                "BTC": {
                  "price": 1,
                  "volume_24h": 772012,
                  "volume_change_24h": 0,
                  "percent_change_1h": 0,
                  "percent_change_24h": 0,
                  "percent_change_7d": 0,
                  "market_cap": 17024600,
                  "market_cap_dominance": 12,
                  "fully_diluted_market_cap": 952835089431.14,
                  "last_updated": "2018-08-09T22:53:32.000Z"
                }
              }
            },
            {
              "id": 1027,
              "name": "Ethereum",
              "symbol": "ETH",
              "slug": "ethereum",
              "num_market_pairs": 6360,
              "circulating_supply": 16950100,
              "total_supply": 16950100,
              "max_supply": 21000000,
              "last_updated": "2018-06-02T22:51:28.209Z",
              "date_added": "2013-04-28T00:00:00.000Z",
              "tags": ["mineable"],
              "platform": null,
              "quote": {
                "USD": {
                  "price": 1283.92,
                  "volume_24h": 7155680000,
                  "volume_change_24h": -0.152774,
                  "percent_change_1h": -0.152774,
                  "percent_change_24h": 0.518894,
                  "percent_change_7d": 0.986573,
                  "market_cap": 158055024432,
                  "market_cap_dominance": 51,
                  "fully_diluted_market_cap": 952835089431.14,
                  "last_updated": "2018-08-09T22:53:32.000Z"
                },
                "ETH": {
                  "price": 1,
                  "volume_24h": 772012,
                  "volume_change_24h": -0.152774,
                  "percent_change_1h": 0,
                  "percent_change_24h": 0,
                  "percent_change_7d": 0,
                  "market_cap": 17024600,
                  "market_cap_dominance": 12,
                  "fully_diluted_market_cap": 952835089431.14,
                  "last_updated": "2018-08-09T22:53:32.000Z"
                }
              }
            }
          ],
          "status": {
            "timestamp": "2018-06-02T22:51:28.209Z",
            "error_code": 0,
            "error_message": "",
            "elapsed": 10,
            "credit_count": 1
          }
        },
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Cryptocurrency_Listings_New_-_Results_array"
          },
          "status": {
            "$ref": "#/components/schemas/API_Status_Object"
          }
        },
        "required": ["data"]
      },
      "Cryptocurrency_Market_Pairs_Latest_-_Exchange_Info_object": {
        "type": "object",
        "description": "Exchange details for this market pair.",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The id of the exchange this market pair is under.",
            "example": 1
          },
          "slug": {
            "type": "string",
            "description": "The slug of the exchange this market pair is under.",
            "example": "binance"
          },
          "name": {
            "type": "string",
            "description": "The name of the exchange this market pair is under.",
            "example": "binance"
          },
          "notice": {
            "type": "string",
            "description": "A [Markdown](https://commonmark.org/help/) formatted message outlining a condition that is impacting the availability of this exchange's market data or the secure use of the exchange, otherwise null. This may include a maintenance event on the exchange's end or CoinMarketCap's end, an alert about reported issues with withdrawls from this exchange, or another condition that may be impacting this exchange and it's markets. If present, this notice is also displayed in an alert banner at the top of the exchange's page on coinmarketcap.com. *This field is only returned if requested through the `aux` request parameter.*",
            "example": "The BTC/USD market on BitMEX is a derivatives market NOT actually spot trading Bitcoin. As a result, it has been excluded from the price and volume averages of Bitcoin."
          }
        },
        "required": ["id", "slug", "name"]
      },
      "Cryptocurrency_Market_Pairs_Latest_-_Pair_Base_Currency_Info_object": {
        "type": "object",
        "description": "Base currency details object for this market pair.",
        "properties": {
          "currency_id": {
            "type": "integer",
            "description": "The CoinMarketCap ID for the base currency in this market pair.",
            "example": 1
          },
          "currency_name": {
            "type": "string",
            "description": "The name of this cryptocurrency. *This field is only returned if requested through the `aux` request parameter.*",
            "example": "Bitcoin"
          },
          "currency_symbol": {
            "type": "string",
            "description": "The CoinMarketCap identified symbol for the base currency in this market pair.",
            "example": "BTC"
          },
          "currency_slug": {
            "type": "string",
            "description": "The web URL friendly shorthand version of this cryptocurrency name. *This field is only returned if requested through the `aux` request parameter.*",
            "example": "bitcoin"
          },
          "exchange_symbol": {
            "type": "string",
            "description": "The exchange reported symbol for the base currency in this market pair. In most cases this is identical to CoinMarketCap's symbol but it may differ if the exchange uses an outdated or contentious symbol that contrasts with the majority of other markets.",
            "example": "BTC"
          },
          "currency_type": {
            "type": "string",
            "description": "The currency type for the base currency in this market pair.",
            "example": "cryptocurrency",
            "enum": ["cryptocurrency", "fiat"]
          }
        },
        "required": ["currency_id", "currency_symbol", "exchange_symbol", "currency_type"]
      },
      "Cryptocurrency_Market_Pairs_Latest_-_Pair_Base_Currency_Info_object_1": {
        "type": "object",
        "description": "Quote (secondary) currency details object for this market pair.",
        "properties": {
          "currency_id": {
            "type": "integer",
            "description": "The CoinMarketCap ID for the quote (secondary) currency in this market pair.",
            "example": 2781
          },
          "currency_name": {
            "type": "string",
            "description": "The name of this cryptocurrency. *This field is only returned if requested through the `aux` request parameter.*",
            "example": "Bitcoin"
          },
          "currency_symbol": {
            "type": "string",
            "description": "The symbol for the quote (secondary) currency in this market pair.",
            "example": "USD"
          },
          "currency_slug": {
            "type": "string",
            "description": "The web URL friendly shorthand version of this cryptocurrency name. *This field is only returned if requested through the `aux` request parameter.*",
            "example": "bitcoin"
          },
          "exchange_symbol": {
            "type": "string",
            "description": "The exchange reported symbol for the quote (secondary) currency in this market pair. In most cases this is identical to CoinMarketCap's symbol but it may differ if the exchange uses an outdated or contentious symbol that contrasts with the majority of other markets.",
            "example": "USD"
          },
          "currency_type": {
            "type": "string",
            "description": "The currency type for the quote (secondary) currency in this market pair.",
            "example": "fiat",
            "enum": ["cryptocurrency", "fiat"]
          }
        },
        "required": ["currency_id", "currency_symbol", "exchange_symbol", "currency_type"]
      },
      "Cryptocurrency_Market_Pairs_Latest_-_Market_Pair_Exchange_Reported_Quote": {
        "type": "object",
        "description": "A default exchange reported quote containing raw exchange reported values.",
        "properties": {
          "price": {
            "type": "number",
            "description": "The lastest exchange reported price for this market pair in quote currency units.",
            "example": 8000.23
          },
          "volume_24h_base": {
            "type": "number",
            "description": "The latest exchange reported 24 hour rolling volume for this market pair in base cryptocurrency units.",
            "example": 30768
          },
          "volume_24h_quote": {
            "type": "number",
            "description": "The latest exchange reported 24 hour rolling volume for this market pair in quote cryptocurrency units.",
            "example": 250448443.2
          },
          "effective_liquidity": {
            "x-hidden": true
          },
          "market_score": {
            "x-hidden": true
          },
          "market_reputation": {
            "x-hidden": true
          },
          "last_updated": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of the last time this market data was updated.",
            "example": "2018-06-02T23:59:59.999Z"
          }
        },
        "required": ["price", "volume_24h_base", "volume_24h_quote", "last_updated"]
      },
      "Cryptocurrency_Market_Pairs_Latest_-_Market_Pair_Quote": {
        "type": "object",
        "description": "One or more market quotes where $key is the conversion currency requested, ex. USD",
        "properties": {
          "price": {
            "type": "number",
            "description": "The lastest exchange reported price for this market pair converted into the requested convert currency.",
            "example": 8000.23
          },
          "price_quote": {
            "type": "number",
            "description": "The latest exchange reported price in base units converted into the requested convert currency. *This field is only returned if requested through the `aux` request parameter.*",
            "example": 8000.23
          },
          "volume_24h": {
            "type": "number",
            "description": "The latest exchange reported 24 hour rolling volume in quote units for this market pair converted into the requested convert currency.",
            "example": 1600000
          },
          "last_updated": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of when the conversion currency's current value was referenced for this conversion.",
            "example": "2018-06-02T23:59:59.999Z"
          }
        },
        "required": ["price", "volume_24h", "last_updated"]
      },
      "Cryptocurrency_Market_Pairs_Latest_-_Market_Pair_Quote_object": {
        "type": "object",
        "description": "Market Pair quotes object containing key->quote objects for each convert option requested. USD and \"exchange_reported\" are defaults.",
        "properties": {
          "exchange_reported": {
            "$ref": "#/components/schemas/Cryptocurrency_Market_Pairs_Latest_-_Market_Pair_Exchange_Reported_Quote"
          },
          "$key": {
            "$ref": "#/components/schemas/Cryptocurrency_Market_Pairs_Latest_-_Market_Pair_Quote"
          }
        },
        "required": ["exchange_reported", "$key"]
      },
      "Cryptocurrency_Market_Pairs_Latest_-_Market_Pair_Info_object": {
        "type": "object",
        "description": "Market Pair info object.",
        "properties": {
          "exchange": {
            "$ref": "#/components/schemas/Cryptocurrency_Market_Pairs_Latest_-_Exchange_Info_object"
          },
          "market_id": {
            "type": "integer",
            "description": "The CoinMarketCap ID for this market pair. This ID can reliably be used to identify this unique market as the ID never changes.",
            "example": 9933
          },
          "market_pair": {
            "type": "string",
            "description": "The name of this market pair.  Example: \"BTC/USD\"",
            "example": "BTC/USD"
          },
          "category": {
            "type": "string",
            "description": "The category of trading this market falls under. Spot markets are the most common but options include derivatives and OTC.",
            "example": "spot",
            "enum": ["spot", "derivatives", "otc"]
          },
          "fee_type": {
            "type": "string",
            "description": "The fee type the exchange enforces for this market.",
            "example": "percentage",
            "enum": ["percentage", "no-fees", "transactional-mining", "unknown"]
          },
          "market_url": {
            "type": "string",
            "description": "The URL to this market's trading page on the exchange if available. If not available the exchange's homepage URL is returned. *This field is only returned if requested through the `aux` request parameter.*",
            "example": "https://www.binance.com/en/trade/BTC_USDT"
          },
          "mark_pair_base": {
            "$ref": "#/components/schemas/Cryptocurrency_Market_Pairs_Latest_-_Pair_Base_Currency_Info_object"
          },
          "mark_pair_quote": {
            "$ref": "#/components/schemas/Cryptocurrency_Market_Pairs_Latest_-_Pair_Base_Currency_Info_object_1"
          },
          "quote": {
            "$ref": "#/components/schemas/Cryptocurrency_Market_Pairs_Latest_-_Market_Pair_Quote_object"
          }
        },
        "required": ["exchange", "mark_pair_base", "mark_pair_quote", "quote"]
      },
      "Cryptocurrency_Market_Pairs_Latest_-_Market_Pairs_array": {
        "type": "array",
        "description": "Array of all market pairs for this cryptocurrency.",
        "items": {
          "$ref": "#/components/schemas/Cryptocurrency_Market_Pairs_Latest_-_Market_Pair_Info_object"
        },
        "required": ["Cryptocurrency Market Pairs Latest - Market Pair Info object"]
      },
      "Cryptocurrency_Market_Pairs_Latest_-_Results_object": {
        "type": "object",
        "description": "Results of your query returned as an object.",
        "example": {
          "id": 1,
          "name": "Bitcoin",
          "symbol": "BTC",
          "num_market_pairs": 7526,
          "market_pairs": [
            {
              "exchange": {
                "id": 157,
                "name": "BitMEX",
                "slug": "bitmex"
              },
              "market_id": 4902,
              "market_pair": "BTC/USD",
              "category": "derivatives",
              "fee_type": "no-fees",
              "market_pair_base": {
                "currency_id": 1,
                "currency_symbol": "BTC",
                "exchange_symbol": "XBT",
                "currency_type": "cryptocurrency"
              },
              "market_pair_quote": {
                "currency_id": 2781,
                "currency_symbol": "USD",
                "exchange_symbol": "USD",
                "currency_type": "fiat"
              },
              "quote": {
                "exchange_reported": {
                  "price": 7839,
                  "volume_24h_base": 434215.85308502,
                  "volume_24h_quote": 3403818072.33347,
                  "last_updated": "2019-05-24T02:39:00.000Z"
                },
                "USD": {
                  "price": 7839,
                  "volume_24h": 3403818072.33347,
                  "last_updated": "2019-05-24T02:39:00.000Z"
                }
              }
            },
            {
              "exchange": {
                "id": 108,
                "name": "Negocie Coins",
                "slug": "negocie-coins"
              },
              "market_id": 3377,
              "market_pair": "BTC/BRL",
              "category": "spot",
              "fee_type": "percentage",
              "market_pair_base": {
                "currency_id": 1,
                "currency_symbol": "BTC",
                "exchange_symbol": "BTC",
                "currency_type": "cryptocurrency"
              },
              "market_pair_quote": {
                "currency_id": 2783,
                "currency_symbol": "BRL",
                "exchange_symbol": "BRL",
                "currency_type": "fiat"
              },
              "quote": {
                "exchange_reported": {
                  "price": 33002.11,
                  "volume_24h_base": 336699.03559957,
                  "volume_24h_quote": 11111778609.7509,
                  "last_updated": "2019-05-24T02:39:00.000Z"
                },
                "USD": {
                  "price": 8165.02539531659,
                  "volume_24h": 2749156176.2491,
                  "last_updated": "2019-05-24T02:39:00.000Z"
                }
              }
            }
          ]
        },
        "properties": {
          "id": {
            "type": "integer",
            "description": "The CoinMarketCap ID for this cryptocurrency.",
            "example": 1,
            "minimum": 1
          },
          "name": {
            "type": "string",
            "description": "The name of this cryptocurrency.",
            "example": "Bitcoin"
          },
          "symbol": {
            "type": "string",
            "description": "The symbol for this cryptocurrency.",
            "example": "BTC"
          },
          "num_market_pairs": {
            "type": "integer",
            "description": "The number of active market pairs listed for this cryptocurrency. This number is filtered down to only matching markets if a `matched` parameter is used.",
            "example": 303
          },
          "market_pairs": {
            "$ref": "#/components/schemas/Cryptocurrency_Market_Pairs_Latest_-_Market_Pairs_array"
          }
        },
        "required": ["id", "name", "symbol", "market_pairs"]
      },
      "Cryptocurrency_Market_Pairs_Latest_-_Response_Model": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Cryptocurrency_Market_Pairs_Latest_-_Results_object"
          },
          "status": {
            "$ref": "#/components/schemas/API_Status_Object"
          }
        },
        "required": ["data"]
      },
      "Cryptocurrency_OHLCV_Historical_-_Quote_object": {
        "type": "object",
        "description": "A market quote in each currency conversion option.",
        "properties": {
          "open": {
            "type": "number",
            "description": "Opening price for time series interval.",
            "example": 3849.21640853
          },
          "high": {
            "type": "number",
            "description": "Highest price during this time series interval.",
            "example": 3947.9812729
          },
          "low": {
            "type": "number",
            "description": "Lowest price during this time series interval.",
            "example": 3817.40949569
          },
          "close": {
            "type": "number",
            "description": "Closing price for this time series interval.",
            "example": 3943.40933686
          },
          "volume": {
            "type": "number",
            "description": "Adjusted volume for this time series interval. Volume is not currently supported for hourly OHLCV intervals before 2020-09-22.",
            "example": 5244856835.70851
          },
          "market_cap": {
            "type": "number",
            "description": "Market cap by circulating supply for this time series interval.",
            "example": 68849856731.6738
          },
          "timestamp": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of when the conversion currency's current value was referenced for this conversion.",
            "example": "2019-01-02T23:59:59.999Z"
          }
        },
        "required": ["open", "high", "low", "close", "volume", "market_cap", "timestamp"]
      },
      "Cryptocurrency_OHLCV_Historical_-_Quote_map": {
        "type": "object",
        "description": "A map of market quotes in different currency conversions. The default map included is USD.",
        "properties": {
          "$key": {
            "$ref": "#/components/schemas/Cryptocurrency_OHLCV_Historical_-_Quote_object"
          }
        },
        "required": ["$key"]
      },
      "Cryptocurrency_OHLCV_Historical_-_Interval_Quote_object": {
        "type": "object",
        "description": "An OHLCV quote for the supplied interval.",
        "properties": {
          "time_open": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of the start of this time series interval.",
            "example": "2018-06-02T00:00:00.000Z"
          },
          "time_close": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of the end of this time series interval.",
            "example": "2018-06-02T23:59:59.999Z"
          },
          "time_high": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of the high of this time series interval.",
            "example": "2018-06-02T22:59:59.999Z"
          },
          "time_low": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of the low of this time series interval.",
            "example": "2018-06-02T21:59:59.999Z"
          },
          "quote": {
            "$ref": "#/components/schemas/Cryptocurrency_OHLCV_Historical_-_Quote_map"
          }
        },
        "required": ["time_open", "time_close", "time_high", "time_low", "quote"]
      },
      "Cryptocurrency_OHLCV_Historical_-_Interval_Quotes_array": {
        "type": "array",
        "description": "An array of OHLCV quotes for the supplied interval.",
        "items": {
          "$ref": "#/components/schemas/Cryptocurrency_OHLCV_Historical_-_Interval_Quote_object"
        },
        "required": ["Cryptocurrency OHLCV Historical - Interval Quote object"]
      },
      "Cryptocurrency_OHLCV_Historical_-_Results_object": {
        "type": "object",
        "description": "Results of your query returned as an object.",
        "example": {
          "id": 1,
          "name": "Bitcoin",
          "symbol": "BTC",
          "quotes": [
            {
              "time_open": "2019-01-02T00:00:00.000Z",
              "time_close": "2019-01-02T23:59:59.999Z",
              "time_high": "2019-01-02T03:53:00.000Z",
              "time_low": "2019-01-02T02:43:00.000Z",
              "quote": {
                "USD": {
                  "open": 3849.21640853,
                  "high": 3947.9812729,
                  "low": 3817.40949569,
                  "close": 3943.40933686,
                  "volume": 5244856835.70851,
                  "market_cap": 68849856731.6738,
                  "timestamp": "2019-01-02T23:59:59.999Z"
                }
              }
            },
            {
              "time_open": "2019-01-03T00:00:00.000Z",
              "time_close": "2019-01-03T23:59:59.999Z",
              "time_high": "2019-01-02T03:53:00.000Z",
              "time_low": "2019-01-02T02:43:00.000Z",
              "quote": {
                "USD": {
                  "open": 3931.04863841,
                  "high": 3935.68513083,
                  "low": 3826.22287069,
                  "close": 3836.74131867,
                  "volume": 4530215218.84018,
                  "market_cap": 66994920902.7202,
                  "timestamp": "2019-01-03T23:59:59.999Z"
                }
              }
            }
          ]
        },
        "properties": {
          "id": {
            "type": "integer",
            "description": "The CoinMarketCap cryptocurrency ID.",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "The cryptocurrency name.",
            "example": "Bitcoin"
          },
          "symbol": {
            "type": "string",
            "description": "The cryptocurrency symbol.",
            "example": "BTC"
          },
          "quotes": {
            "$ref": "#/components/schemas/Cryptocurrency_OHLCV_Historical_-_Interval_Quotes_array"
          }
        },
        "required": ["id", "name", "symbol", "quotes"]
      },
      "Cryptocurrency_OHLCV_Historical_-_Response_Model": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Cryptocurrency_OHLCV_Historical_-_Results_object"
          },
          "status": {
            "$ref": "#/components/schemas/API_Status_Object"
          }
        },
        "required": ["data"]
      },
      "Cryptocurrency_OHLCV_Latest_-_Quote_object": {
        "type": "object",
        "description": "A market quote in each currency conversion option.",
        "properties": {
          "open": {
            "type": "number",
            "description": "Price from first datapoint of today in UTC time for the convert option requested.",
            "example": 966.34
          },
          "high": {
            "type": "number",
            "description": "Highest price so far today in UTC time for the convert option requested.",
            "example": 1005
          },
          "low": {
            "type": "number",
            "description": "Lowest price today in UTC time for the convert option requested.",
            "example": 960.53
          },
          "close": {
            "type": "number",
            "description": "Latest price today in UTC time for the convert option requested. This is not the final price during close as the current day period is not over.",
            "example": 997.75
          },
          "volume": {
            "type": "number",
            "description": "Aggregate 24 hour adjusted volume for the convert option requested. Please note, this is a rolling 24 hours back from the current time.",
            "example": 6850.59330859
          },
          "last_updated": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of when the conversion currency's current value was last updated when referenced for this conversion.",
            "example": "2018-06-02T00:00:00.000Z"
          }
        },
        "required": ["open", "high", "low", "close", "volume", "last_updated"]
      },
      "Cryptocurrency_OHLCV_Latest_-_Quote_map": {
        "type": "object",
        "description": "A map of market quotes in different currency conversions. The default map included is USD.",
        "properties": {
          "$key": {
            "$ref": "#/components/schemas/Cryptocurrency_OHLCV_Latest_-_Quote_object"
          }
        },
        "required": ["$key"]
      },
      "Cryptocurrency_OHLCV_Latest_-_Cryptocurrency_object": {
        "type": "object",
        "description": "A cryptocurrency object for each requested.",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique CoinMarketCap ID for this cryptocurrency.",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "The name of this cryptocurrency.",
            "example": "Bitcoin"
          },
          "symbol": {
            "type": "string",
            "description": "The ticker symbol for this cryptocurrency.",
            "example": "BTC"
          },
          "last_updated": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of the lastest market value record included to generate the latest active day OHLCV values.",
            "example": "2018-06-02T23:59:59.999Z"
          },
          "time_open": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of the start of this OHLCV period.",
            "example": "2018-06-02T00:00:00.000Z"
          },
          "time_high": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of the high of this OHLCV period.",
            "example": "2018-06-02T00:00:00.000Z"
          },
          "time_low": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of the low of this OHLCV period.",
            "example": "2018-06-02T00:00:00.000Z"
          },
          "time_close": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of the end of this OHLCV period. Always `null` as the current day is incomplete. See `last_updated` for the last UTC time included in the current OHLCV calculation.",
            "example": "null"
          },
          "quote": {
            "$ref": "#/components/schemas/Cryptocurrency_OHLCV_Latest_-_Quote_map"
          }
        },
        "required": [
          "id",
          "name",
          "symbol",
          "last_updated",
          "time_open",
          "time_high",
          "time_low",
          "time_close",
          "quote"
        ]
      },
      "Cryptocurrency_OHLCV_Latest_-_Cryptocurrency_Results_map": {
        "type": "object",
        "description": "A map of cryptocurrency objects by ID or symbol (as passed in query parameters).",
        "example": {
          "1": {
            "id": 1,
            "name": "Bitcoin",
            "symbol": "BTC",
            "last_updated": "2018-09-10T18:54:00.000Z",
            "time_open": "2018-09-10T00:00:00.000Z",
            "time_close": null,
            "time_high": "2018-09-10T00:00:00.000Z",
            "time_low": "2018-09-10T00:00:00.000Z",
            "quote": {
              "USD": {
                "open": 6301.57,
                "high": 6374.98,
                "low": 6292.76,
                "close": 6308.76,
                "volume": 3786450000,
                "last_updated": "2018-09-10T18:54:00.000Z"
              }
            }
          }
        },
        "properties": {
          "$key": {
            "$ref": "#/components/schemas/Cryptocurrency_OHLCV_Latest_-_Cryptocurrency_object"
          }
        },
        "required": ["$key"]
      },
      "Cryptocurrency_OHLCV_Latest_-_Response_Model": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Cryptocurrency_OHLCV_Latest_-_Cryptocurrency_Results_map"
          },
          "status": {
            "$ref": "#/components/schemas/API_Status_Object"
          }
        },
        "required": ["data"]
      },
      "Cryptocurrency_Price_Performance_Stats_Latest_-_Quote_object": {
        "type": "object",
        "description": "A time period quote in the currency conversion option.",
        "properties": {
          "open": {
            "type": "number",
            "description": "Cryptocurrency price at the start of the requested time period historically converted into units of the convert currency.",
            "example": 135.3000030517578
          },
          "open_timestamp": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of the closest convert currency reference price used during `open` price conversion.",
            "example": "2013-04-28T00:00:00.000Z"
          },
          "high": {
            "type": "number",
            "description": "Highest USD price achieved within the requested time period historically converted into units of the convert currency.",
            "example": 20088.99609375
          },
          "high_timestamp": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of the closest convert currency reference price used during `high` price conversion. *For `yesterday` UTC close will be used.*",
            "example": "2017-12-17T12:19:14.000Z"
          },
          "low": {
            "type": "number",
            "description": "Lowest USD price achieved within the requested time period historically converted into units of the convert currency.",
            "example": 65.5260009765625
          },
          "low_timestamp": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of the closest convert currency reference price used during `low` price conversion. *For `yesterday` UTC close will be used.*",
            "example": "2013-07-05T18:56:01.000Z"
          },
          "close": {
            "type": "number",
            "description": "Cryptocurrency price at the end of the requested time period historically converted into units of the convert currency.",
            "example": 9908.99193585
          },
          "close_timestamp": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of the closest convert currency reference price used during `close` price conversion.",
            "example": "2019-08-22T01:52:18.618Z"
          },
          "percent_change": {
            "type": "number",
            "description": "The approximate percentage change (ROI) if purchased at the start of the time period. This is the time of launch or earliest known price for the `all_time` period. This value includes historical change in market rate for the specified convert currency.",
            "example": 7223.718930042746
          },
          "price_change": {
            "type": "number",
            "description": "The actual price change between the start of the time period and end. This is the time of launch or earliest known price for the `all_time` period. This value includes historical change in market rate for the specified convert currency.",
            "example": 9773.691932798241
          }
        },
        "required": [
          "open",
          "open_timestamp",
          "high",
          "high_timestamp",
          "low",
          "low_timestamp",
          "close",
          "close_timestamp",
          "percent_change",
          "price_change"
        ]
      },
      "Cryptocurrency_Price_Performance_Stats_Latest_-_Quote_map": {
        "type": "object",
        "description": "An object map of time period quotes for each convert option requested. The default map included is USD.",
        "properties": {
          "$key": {
            "$ref": "#/components/schemas/Cryptocurrency_Price_Performance_Stats_Latest_-_Quote_object"
          }
        },
        "required": ["$key"]
      },
      "Cryptocurrency_Price_Performance_Stats_Latest_-_Period_object": {
        "type": "object",
        "description": "A time period data object. `all_time` is the default.",
        "properties": {
          "open_timestamp": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of the start of this time period. Please note that this is a rolling period back from current time for time periods outside of `yesterday`.",
            "example": "2013-04-28T00:00:00.000Z"
          },
          "high_timestamp": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of when this cryptocurrency achieved it's highest USD price during the requested time period. *Note: The `yesterday` period currently doesn't support this field and will return `null`.*",
            "example": "2017-12-17T12:19:14.000Z"
          },
          "low_timestamp": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of when this cryptocurrency achieved it's lowest USD price during the requested time period. *Note: The `yesterday` period currently doesn't support this field and will return `null`.*",
            "example": "2013-07-05T18:56:01.000Z"
          },
          "close_timestamp": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of the end of this time period. Please note that this is a rolling period back from current time for time periods outside of `yesterday`.",
            "example": "2019-08-22T01:52:18.613Z"
          },
          "quote": {
            "$ref": "#/components/schemas/Cryptocurrency_Price_Performance_Stats_Latest_-_Quote_map"
          }
        },
        "required": ["open_timestamp", "high_timestamp", "low_timestamp", "close_timestamp", "quote"]
      },
      "Cryptocurrency_Price_Performance_Stats_Latest_-_Period_object_map": {
        "type": "object",
        "description": "An object map of time periods by period requested.",
        "properties": {
          "$key": {
            "$ref": "#/components/schemas/Cryptocurrency_Price_Performance_Stats_Latest_-_Period_object"
          }
        },
        "required": ["$key"]
      },
      "Cryptocurrency_Price_Performance_Stats_Latest_-_Cryptocurrency_object": {
        "type": "object",
        "description": "A cryptocurrency object for each requested.",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique CoinMarketCap ID for this cryptocurrency.",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "The name of this cryptocurrency.",
            "example": "Bitcoin"
          },
          "symbol": {
            "type": "string",
            "description": "The ticker symbol for this cryptocurrency.",
            "example": "BTC"
          },
          "slug": {
            "type": "string",
            "description": "The web URL friendly shorthand version of this cryptocurrency name.",
            "example": "bitcoin"
          },
          "last_updated": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of the last time this cryptocurrency's market data was updated.",
            "example": "2019-08-22T01:51:32.000Z"
          },
          "periods": {
            "$ref": "#/components/schemas/Cryptocurrency_Price_Performance_Stats_Latest_-_Period_object_map"
          }
        },
        "required": ["id", "name", "symbol", "slug", "last_updated", "periods"]
      },
      "Cryptocurrency_Price_Performance_Stats_Latest_-_Cryptocurrency_Results_map": {
        "type": "object",
        "description": "An object map of cryptocurrency objects by ID, slug, or symbol (as used in query parameters).",
        "example": {
          "1": {
            "id": 1,
            "name": "Bitcoin",
            "symbol": "BTC",
            "slug": "bitcoin",
            "last_updated": "2019-08-22T01:51:32.000Z",
            "periods": {
              "all_time": {
                "open_timestamp": "2013-04-28T00:00:00.000Z",
                "high_timestamp": "2017-12-17T12:19:14.000Z",
                "low_timestamp": "2013-07-05T18:56:01.000Z",
                "close_timestamp": "2019-08-22T01:52:18.613Z",
                "quote": {
                  "USD": {
                    "open": 135.3000030517578,
                    "open_timestamp": "2013-04-28T00:00:00.000Z",
                    "high": 20088.99609375,
                    "high_timestamp": "2017-12-17T12:19:14.000Z",
                    "low": 65.5260009765625,
                    "low_timestamp": "2013-07-05T18:56:01.000Z",
                    "close": 65.5260009765625,
                    "close_timestamp": "2019-08-22T01:52:18.618Z",
                    "percent_change": 7223.718930042746,
                    "price_change": 9773.691932798241
                  }
                }
              }
            }
          }
        },
        "properties": {
          "$key": {
            "$ref": "#/components/schemas/Cryptocurrency_Price_Performance_Stats_Latest_-_Cryptocurrency_object"
          }
        },
        "required": ["$key"]
      },
      "Cryptocurrency_Price_Performance_Stats_Latest_-_Response_Model": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Cryptocurrency_Price_Performance_Stats_Latest_-_Cryptocurrency_Results_map"
          },
          "status": {
            "$ref": "#/components/schemas/API_Status_Object"
          }
        },
        "required": ["data"]
      },
      "Cryptocurrency_Quotes_Historical_-_Currency_Quote_object": {
        "type": "object",
        "description": "The market details for the current interval and currency conversion option. The map key being the curency symbol.",
        "properties": {
          "price": {
            "type": "number",
            "description": "Price at this interval quote.",
            "example": 1235000
          },
          "volume_24hr": {
            "type": "number",
            "description": "Aggregate 24 hour adjusted volume for all market pairs tracked for this cryptocurrency at the current historical interval.",
            "example": 1235000
          },
          "market_cap": {
            "type": "number",
            "description": "Number of market pairs available at the current historical interval.",
            "example": 123456789
          },
          "timestamp": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of when the conversion currency's current value was referenced for this conversion.",
            "example": "2018-06-02T22:51:28.209Z"
          }
        },
        "required": ["price", "volume_24hr", "market_cap", "timestamp"]
      },
      "Cryptocurrency_Quotes_Historical_-_Quote_currency_map": {
        "type": "object",
        "description": "A map of market details for this quote in different currency conversions. The default map included is USD.",
        "properties": {
          "$key": {
            "$ref": "#/components/schemas/Cryptocurrency_Quotes_Historical_-_Currency_Quote_object"
          }
        },
        "required": ["$key"]
      },
      "Cryptocurrency_Quotes_Historical_-_Interval_Quote_object": {
        "type": "object",
        "description": "An object containing details for the current interval quote.",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date",
            "description": "Timestamp of when this historical quote was recorded.",
            "example": "2018-06-02T23:59:59.999Z"
          },
          "search_interval": {
            "type": "string",
            "format": "date",
            "description": "The interval timestamp for the search period that this historical quote was located against. *This field is only returned if requested through the `aux` request parameter.*",
            "example": "2018-06-02T00:00:00.000Z"
          },
          "quote": {
            "$ref": "#/components/schemas/Cryptocurrency_Quotes_Historical_-_Quote_currency_map"
          }
        },
        "required": ["timestamp", "quote"]
      },
      "Cryptocurrency_Quotes_Historical_-_Interval_Quotes_array": {
        "type": "array",
        "description": "An array of quotes for each interval for this cryptocurrency.",
        "items": {
          "$ref": "#/components/schemas/Cryptocurrency_Quotes_Historical_-_Interval_Quote_object"
        },
        "required": ["Cryptocurrency Quotes Historical - Interval Quote object"]
      },
      "Cryptocurrency_Quotes_Historical_-_Result_object": {
        "type": "object",
        "description": "A results object for each cryptocurrency requested. The map key being the id/symbol used in the request.",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The CoinMarketCap cryptocurrency ID.",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "The cryptocurrency name.",
            "example": "Bitcoin"
          },
          "symbol": {
            "type": "string",
            "description": "The cryptocurrency symbol.",
            "example": "BTC"
          },
          "is_active": {
            "type": "integer",
            "description": "1 if this cryptocurrency has at least 1 active market currently being tracked by the platform, otherwise 0. A value of 1 is analogous with `listing_status=active`.",
            "example": 1,
            "minimum": 0,
            "maximum": 1
          },
          "is_fiat": {
            "type": "integer",
            "description": "1 if this is a fiat",
            "example": 1,
            "minimum": 0,
            "maximum": 1
          },
          "quotes": {
            "$ref": "#/components/schemas/Cryptocurrency_Quotes_Historical_-_Interval_Quotes_array"
          }
        },
        "required": ["id", "name", "symbol", "quotes"]
      },
      "Cryptocurrency_Quotes_Historical_-_Results_map": {
        "type": "object",
        "description": "Results of your query returned as an object map.",
        "example": {
          "id": 1,
          "name": "Bitcoin",
          "symbol": "BTC",
          "is_active": 1,
          "is_fiat": 0,
          "quotes": [
            {
              "timestamp": "2018-06-22T19:29:37.000Z",
              "quote": {
                "USD": {
                  "price": 6242.29,
                  "volume_24h": 4681670000,
                  "market_cap": 106800038746.48,
                  "circulating_supply": 4681670000,
                  "total_supply": 4681670000,
                  "timestamp": "2018-06-22T19:29:37.000Z"
                }
              }
            },
            {
              "timestamp": "2018-06-22T19:34:33.000Z",
              "quote": {
                "USD": {
                  "price": 6242.82,
                  "volume_24h": 4682330000,
                  "market_cap": 106809106575.84,
                  "circulating_supply": 4681670000,
                  "total_supply": 4681670000,
                  "timestamp": "2018-06-22T19:34:33.000Z"
                }
              }
            }
          ]
        },
        "properties": {
          "$key": {
            "$ref": "#/components/schemas/Cryptocurrency_Quotes_Historical_-_Result_object"
          }
        },
        "required": ["$key"]
      },
      "Cryptocurrency_Quotes_Historical_-_Response_Model": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Cryptocurrency_Quotes_Historical_-_Results_map"
          },
          "status": {
            "$ref": "#/components/schemas/API_Status_Object"
          }
        },
        "required": ["data"]
      },
      "Cryptocurrency_Quotes_Latest_-_Quote_object": {
        "type": "object",
        "description": "A market quote in the currency conversion option.",
        "properties": {
          "price": {
            "type": "number",
            "description": "Price in the specified currency.",
            "example": 7139.82
          },
          "volume_24h": {
            "type": "number",
            "description": "Rolling 24 hour adjusted volume in the specified currency.",
            "example": 4885880000
          },
          "volume_change_24h": {
            "type": "number",
            "description": "24 hour change in the specified currencies volume.",
            "example": 5.75
          },
          "volume_24h_reported": {
            "type": "number",
            "description": "Rolling 24 hour reported volume in the specified currency. *This field is only returned if requested through the `aux` request parameter.*",
            "example": 4885880000
          },
          "volume_7d": {
            "type": "number",
            "description": "Rolling 7 day adjusted volume in the specified currency. *This field is only returned if requested through the `aux` request parameter.*",
            "example": 4885880000
          },
          "volume_7d_reported": {
            "type": "number",
            "description": "Rolling 7 day reported volume in the specified currency. *This field is only returned if requested through the `aux` request parameter.*",
            "example": 4885880000
          },
          "volume_30d": {
            "type": "number",
            "description": "Rolling 30 day adjusted volume in the specified currency. *This field is only returned if requested through the `aux` request parameter.*",
            "example": 4885880000
          },
          "volume_30d_reported": {
            "type": "number",
            "description": "Rolling 30 day reported volume in the specified currency. *This field is only returned if requested through the `aux` request parameter.*",
            "example": 4885880000
          },
          "market_cap": {
            "type": "number",
            "description": "Market cap in the specified currency.",
            "example": 121020662982
          },
          "market_cap_dominance": {
            "type": "number",
            "description": "Market cap dominance in the specified currency.",
            "example": 121020662982
          },
          "fully_diluted_market_cap": {
            "type": "number",
            "description": "Fully diluted market cap in the specified currency.",
            "example": 121020662982
          },
          "percent_change_1h": {
            "type": "number",
            "description": "1 hour change in the specified currency.",
            "example": 0.03
          },
          "percent_change_24h": {
            "type": "number",
            "description": "24 hour change in the specified currency.",
            "example": 5.75
          },
          "percent_change_7d": {
            "type": "number",
            "description": "7 day change in the specified currency.",
            "example": -19.64
          },
          "percent_change_30d": {
            "type": "number",
            "description": "30 day change in the specified currency.",
            "example": -19.64
          },
          "last_updated": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of when the conversion currency's current value was referenced.",
            "example": "2018-06-02T23:59:59.999Z"
          }
        },
        "required": [
          "price",
          "volume_24h",
          "market_cap",
          "market_cap_dominance",
          "fully_diluted_market_cap",
          "percent_change_1h",
          "percent_change_24h",
          "percent_change_7d",
          "percent_change_30d",
          "last_updated"
        ]
      },
      "Cryptocurrency_Quotes_Latest_-_Quote_map": {
        "type": "object",
        "description": "A map of market quotes in different currency conversions. The default map included is USD.",
        "properties": {
          "$key": {
            "$ref": "#/components/schemas/Cryptocurrency_Quotes_Latest_-_Quote_object"
          }
        },
        "required": ["$key"]
      },
      "Cryptocurrency_Quotes_Latest_-_Cryptocurrency_object": {
        "type": "object",
        "description": "A cryptocurrency object for each requested.",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique CoinMarketCap ID for this cryptocurrency.",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "The name of this cryptocurrency.",
            "example": "Bitcoin"
          },
          "symbol": {
            "type": "string",
            "description": "The ticker symbol for this cryptocurrency.",
            "example": "BTC"
          },
          "slug": {
            "type": "string",
            "description": "The web URL friendly shorthand version of this cryptocurrency name.",
            "example": "bitcoin"
          },
          "is_active": {
            "type": "integer",
            "description": "1 if this cryptocurrency has at least 1 active market currently being tracked by the platform, otherwise 0. A value of 1 is analogous with `listing_status=active`.",
            "example": 1,
            "minimum": 0,
            "maximum": 1
          },
          "is_fiat": {
            "type": "integer",
            "description": "1 if this is a fiat",
            "example": 1,
            "minimum": 0,
            "maximum": 1
          },
          "cmc_rank": {
            "type": "integer",
            "description": "The cryptocurrency's CoinMarketCap rank by market cap.",
            "example": 5
          },
          "num_market_pairs": {
            "type": "integer",
            "description": "The number of active trading pairs available for this cryptocurrency across supported exchanges.",
            "example": 500
          },
          "circulating_supply": {
            "type": "number",
            "description": "The approximate number of coins circulating for this cryptocurrency.",
            "example": 16950100
          },
          "total_supply": {
            "type": "number",
            "description": "The approximate total amount of coins in existence right now (minus any coins that have been verifiably burned).",
            "example": 16950100
          },
          "market_cap_by_total_supply": {
            "type": "number",
            "description": "The market cap by total supply. *This field is only returned if requested through the `aux` request parameter.*",
            "example": 158055024432
          },
          "max_supply": {
            "type": "number",
            "description": "The expected maximum limit of coins ever to be available for this cryptocurrency.",
            "example": 21000000
          },
          "date_added": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of when this cryptocurrency was added to CoinMarketCap.",
            "example": "2013-04-28T00:00:00.000Z"
          },
          "tags": {
            "$ref": "#/components/schemas/tags"
          },
          "platform": {
            "$ref": "#/components/schemas/platform"
          },
          "last_updated": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of the last time this cryptocurrency's market data was updated.",
            "example": "2018-06-02T23:59:59.999Z"
          },
          "self_reported_circulating_supply": {
            "type": "number",
            "description": "The self reported number of coins circulating for this cryptocurrency.",
            "example": 16950100
          },
          "self_reported_market_cap": {
            "type": "number",
            "description": "The self reported market cap for this cryptocurrency.",
            "example": 16950100
          },
          "quote": {
            "$ref": "#/components/schemas/Cryptocurrency_Quotes_Latest_-_Quote_map"
          }
        },
        "required": ["id", "name", "symbol", "slug", "last_updated", "quote"]
      },
      "Cryptocurrency_Quotes_Latest_-_Cryptocurrency_Results_map": {
        "type": "object",
        "description": "A map of cryptocurrency objects by ID, symbol, or slug (as used in query parameters).",
        "example": {
          "1": {
            "id": 1,
            "name": "Bitcoin",
            "symbol": "BTC",
            "slug": "bitcoin",
            "is_active": 1,
            "is_fiat": 0,
            "circulating_supply": 17199862,
            "total_supply": 17199862,
            "max_supply": 21000000,
            "date_added": "2013-04-28T00:00:00.000Z",
            "num_market_pairs": 331,
            "cmc_rank": 1,
            "last_updated": "2018-08-09T21:56:28.000Z",
            "tags": ["mineable"],
            "platform": null,
            "self_reported_circulating_supply": null,
            "self_reported_market_cap": null,
            "quote": {
              "USD": {
                "price": 6602.60701122,
                "volume_24h": 4314444687.5194,
                "volume_change_24h": -0.152774,
                "percent_change_1h": 0.988615,
                "percent_change_24h": 4.37185,
                "percent_change_7d": -12.1352,
                "percent_change_30d": -12.1352,
                "market_cap": 852164659250.2758,
                "market_cap_dominance": 51,
                "fully_diluted_market_cap": 952835089431.14,
                "last_updated": "2018-08-09T21:56:28.000Z"
              }
            }
          }
        },
        "properties": {
          "$key": {
            "$ref": "#/components/schemas/Cryptocurrency_Quotes_Latest_-_Cryptocurrency_object"
          }
        },
        "required": ["$key"]
      },
      "Cryptocurrency_Quotes_Latest_-_Response_Model": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Cryptocurrency_Quotes_Latest_-_Cryptocurrency_Results_map"
          },
          "status": {
            "$ref": "#/components/schemas/API_Status_Object"
          }
        },
        "required": ["data"]
      },
      "Cryptocurrency_Trending_Gainers_Losers_-_Results_array": {
        "type": "array",
        "description": "Array of cryptocurrency objects matching the list options.",
        "items": {
          "$ref": "#/components/schemas/Cryptocurrency_-_Cryptocurrency_object"
        },
        "required": ["Cryptocurrency Trending Gainers & Losers - Cryptocurrency object"]
      },
      "Cryptocurrency_Trending_Gainers_Losers_-_Response_Model": {
        "type": "object",
        "example": {
          "data": [
            {
              "id": 1,
              "name": "Bitcoin",
              "symbol": "BTC",
              "slug": "bitcoin",
              "cmc_rank": 5,
              "num_market_pairs": 500,
              "circulating_supply": 16950100,
              "total_supply": 16950100,
              "max_supply": 21000000,
              "last_updated": "2018-06-02T22:51:28.209Z",
              "date_added": "2013-04-28T00:00:00.000Z",
              "tags": ["mineable"],
              "platform": null,
              "quote": {
                "USD": {
                  "price": 9283.92,
                  "volume_24h": 7155680000,
                  "percent_change_1h": -0.152774,
                  "percent_change_24h": 0.518894,
                  "percent_change_7d": 0.986573,
                  "market_cap": 158055024432,
                  "last_updated": "2018-08-09T22:53:32.000Z"
                },
                "BTC": {
                  "price": 1,
                  "volume_24h": 772012,
                  "percent_change_1h": 0,
                  "percent_change_24h": 0,
                  "percent_change_7d": 0,
                  "market_cap": 17024600,
                  "last_updated": "2018-08-09T22:53:32.000Z"
                }
              }
            },
            {
              "id": 1027,
              "name": "Ethereum",
              "symbol": "ETH",
              "slug": "ethereum",
              "num_market_pairs": 6360,
              "circulating_supply": 16950100,
              "total_supply": 16950100,
              "max_supply": 21000000,
              "last_updated": "2018-06-02T22:51:28.209Z",
              "date_added": "2013-04-28T00:00:00.000Z",
              "tags": ["mineable"],
              "platform": null,
              "quote": {
                "USD": {
                  "price": 1283.92,
                  "volume_24h": 7155680000,
                  "percent_change_1h": -0.152774,
                  "percent_change_24h": 0.518894,
                  "percent_change_7d": 0.986573,
                  "market_cap": 158055024432,
                  "last_updated": "2018-08-09T22:53:32.000Z"
                },
                "ETH": {
                  "price": 1,
                  "volume_24h": 772012,
                  "percent_change_1h": 0,
                  "percent_change_24h": 0,
                  "percent_change_7d": 0,
                  "market_cap": 17024600,
                  "last_updated": "2018-08-09T22:53:32.000Z"
                }
              }
            }
          ],
          "status": {
            "timestamp": "2018-06-02T22:51:28.209Z",
            "error_code": 0,
            "error_message": "",
            "elapsed": 10,
            "credit_count": 1
          }
        },
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Cryptocurrency_Trending_Gainers_Losers_-_Results_array"
          },
          "status": {
            "$ref": "#/components/schemas/API_Status_Object"
          }
        },
        "required": ["data"]
      },
      "Cryptocurrency_Trending_Latest_-_Cryptocurrency_object": {
        "type": "object",
        "description": "A cryptocurrency object for every cryptocurrency that matched list options.",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique CoinMarketCap ID for this cryptocurrency.",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "The name of this cryptocurrency.",
            "example": "Bitcoin"
          },
          "symbol": {
            "type": "string",
            "description": "The ticker symbol for this cryptocurrency.",
            "example": "BTC"
          },
          "slug": {
            "type": "string",
            "description": "The web URL friendly shorthand version of this cryptocurrency name.",
            "example": "bitcoin"
          },
          "cmc_rank": {
            "type": "integer",
            "description": "The cryptocurrency's CoinMarketCap rank by market cap.",
            "example": 5
          },
          "is_fiat": {
            "type": "integer",
            "description": "1 if this is a fiat",
            "example": 1,
            "minimum": 0,
            "maximum": 1
          },
          "self_reported_circulating_supply": {
            "type": "number",
            "description": "The self reported number of coins circulating for this cryptocurrency.",
            "example": 16950100
          },
          "self_reported_market_cap": {
            "type": "number",
            "description": "The self reported market cap for this cryptocurrency.",
            "example": 16950100
          },
          "is_active": {
            "type": "integer",
            "description": "1 if this cryptocurrency has at least 1 active market currently being tracked by the platform, otherwise 0. A value of 1 is analogous with `listing_status=active`.",
            "example": 1,
            "minimum": 0,
            "maximum": 1
          },
          "num_market_pairs": {
            "type": "integer",
            "description": "The number of active trading pairs available for this cryptocurrency across supported exchanges.",
            "example": 500
          },
          "circulating_supply": {
            "type": "number",
            "description": "The approximate number of coins circulating for this cryptocurrency.",
            "example": 16950100
          },
          "total_supply": {
            "type": "number",
            "description": "The approximate total amount of coins in existence right now (minus any coins that have been verifiably burned).",
            "example": 16950100
          },
          "market_cap_by_total_supply": {
            "type": "number",
            "description": "The market cap by total supply. *This field is only returned if requested through the `aux` request parameter.*",
            "example": 158055024432
          },
          "max_supply": {
            "type": "number",
            "description": "The expected maximum limit of coins ever to be available for this cryptocurrency.",
            "example": 21000000
          },
          "last_updated": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of the last time this cryptocurrency's market data was updated.",
            "example": "2018-06-02T22:51:28.209Z"
          },
          "date_added": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of when this cryptocurrency was added to CoinMarketCap.",
            "example": "2013-04-28T00:00:00.000Z"
          },
          "tags": {
            "$ref": "#/components/schemas/tags"
          },
          "platform": {
            "$ref": "#/components/schemas/platform"
          },
          "quote": {
            "$ref": "#/components/schemas/Cryptocurrency_-_Quote_map"
          }
        },
        "required": ["id", "name", "symbol", "slug", "last_updated", "quote"]
      },
      "Cryptocurrency_Trending_Latest_-_Results_array": {
        "type": "array",
        "description": "Array of cryptocurrency objects matching the list options.",
        "items": {
          "$ref": "#/components/schemas/Cryptocurrency_Trending_Latest_-_Cryptocurrency_object"
        },
        "required": ["Cryptocurrency Trending Latest - Cryptocurrency object"]
      },
      "Cryptocurrency_Trending_Latest_-_Response_Model": {
        "type": "object",
        "example": {
          "data": [
            {
              "id": 1,
              "name": "Bitcoin",
              "symbol": "BTC",
              "slug": "bitcoin",
              "cmc_rank": 5,
              "is_active": true,
              "is_fiat": 0,
              "self_reported_circulating_supply": null,
              "self_reported_market_cap": null,
              "num_market_pairs": 500,
              "circulating_supply": 16950100,
              "total_supply": 16950100,
              "max_supply": 21000000,
              "last_updated": "2018-06-02T22:51:28.209Z",
              "date_added": "2013-04-28T00:00:00.000Z",
              "tags": ["mineable"],
              "platform": null,
              "quote": {
                "USD": {
                  "price": 9283.92,
                  "volume_24h": 7155680000,
                  "percent_change_1h": -0.152774,
                  "percent_change_24h": 0.518894,
                  "percent_change_7d": 0.986573,
                  "market_cap": 158055024432,
                  "last_updated": "2018-08-09T22:53:32.000Z"
                },
                "BTC": {
                  "price": 1,
                  "volume_24h": 772012,
                  "percent_change_1h": 0,
                  "percent_change_24h": 0,
                  "percent_change_7d": 0,
                  "market_cap": 17024600,
                  "last_updated": "2018-08-09T22:53:32.000Z"
                }
              }
            },
            {
              "id": 1027,
              "name": "Ethereum",
              "symbol": "ETH",
              "slug": "ethereum",
              "num_market_pairs": 6360,
              "circulating_supply": 16950100,
              "total_supply": 16950100,
              "max_supply": 21000000,
              "last_updated": "2018-06-02T22:51:28.209Z",
              "date_added": "2013-04-28T00:00:00.000Z",
              "tags": ["mineable"],
              "platform": null,
              "quote": {
                "USD": {
                  "price": 1283.92,
                  "volume_24h": 7155680000,
                  "percent_change_1h": -0.152774,
                  "percent_change_24h": 0.518894,
                  "percent_change_7d": 0.986573,
                  "market_cap": 158055024432,
                  "last_updated": "2018-08-09T22:53:32.000Z"
                },
                "ETH": {
                  "price": 1,
                  "volume_24h": 772012,
                  "percent_change_1h": 0,
                  "percent_change_24h": 0,
                  "percent_change_7d": 0,
                  "market_cap": 17024600,
                  "last_updated": "2018-08-09T22:53:32.000Z"
                }
              }
            }
          ],
          "status": {
            "timestamp": "2018-06-02T22:51:28.209Z",
            "error_code": 0,
            "error_message": "",
            "elapsed": 10,
            "credit_count": 1
          }
        },
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Cryptocurrency_Trending_Latest_-_Results_array"
          },
          "status": {
            "$ref": "#/components/schemas/API_Status_Object"
          }
        },
        "required": ["data"]
      },
      "Cryptocurrency_Trending_Most_Visited_-_Results_array": {
        "type": "array",
        "description": "Array of cryptocurrency objects matching the list options.",
        "items": {
          "$ref": "#/components/schemas/Cryptocurrency_-_Cryptocurrency_object"
        },
        "required": ["Cryptocurrency Trending Most Visited - Cryptocurrency object"]
      },
      "Cryptocurrency_Trending_Most_Visited_-_Response_Model": {
        "type": "object",
        "example": {
          "data": [
            {
              "id": 1,
              "name": "Bitcoin",
              "symbol": "BTC",
              "slug": "bitcoin",
              "cmc_rank": 5,
              "num_market_pairs": 500,
              "circulating_supply": 16950100,
              "total_supply": 16950100,
              "max_supply": 21000000,
              "last_updated": "2018-06-02T22:51:28.209Z",
              "date_added": "2013-04-28T00:00:00.000Z",
              "tags": ["mineable"],
              "platform": null,
              "quote": {
                "USD": {
                  "price": 9283.92,
                  "volume_24h": 7155680000,
                  "percent_change_1h": -0.152774,
                  "percent_change_24h": 0.518894,
                  "percent_change_7d": 0.986573,
                  "market_cap": 158055024432,
                  "last_updated": "2018-08-09T22:53:32.000Z"
                },
                "BTC": {
                  "price": 1,
                  "volume_24h": 772012,
                  "percent_change_1h": 0,
                  "percent_change_24h": 0,
                  "percent_change_7d": 0,
                  "market_cap": 17024600,
                  "last_updated": "2018-08-09T22:53:32.000Z"
                }
              }
            },
            {
              "id": 1027,
              "name": "Ethereum",
              "symbol": "ETH",
              "slug": "ethereum",
              "num_market_pairs": 6360,
              "circulating_supply": 16950100,
              "total_supply": 16950100,
              "max_supply": 21000000,
              "last_updated": "2018-06-02T22:51:28.209Z",
              "date_added": "2013-04-28T00:00:00.000Z",
              "tags": ["mineable"],
              "platform": null,
              "quote": {
                "USD": {
                  "price": 1283.92,
                  "volume_24h": 7155680000,
                  "percent_change_1h": -0.152774,
                  "percent_change_24h": 0.518894,
                  "percent_change_7d": 0.986573,
                  "market_cap": 158055024432,
                  "last_updated": "2018-08-09T22:53:32.000Z"
                },
                "ETH": {
                  "price": 1,
                  "volume_24h": 772012,
                  "percent_change_1h": 0,
                  "percent_change_24h": 0,
                  "percent_change_7d": 0,
                  "market_cap": 17024600,
                  "last_updated": "2018-08-09T22:53:32.000Z"
                }
              }
            }
          ],
          "status": {
            "timestamp": "2018-06-02T22:51:28.209Z",
            "error_code": 0,
            "error_message": "",
            "elapsed": 10,
            "credit_count": 1
          }
        },
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Cryptocurrency_Trending_Most_Visited_-_Results_array"
          },
          "status": {
            "$ref": "#/components/schemas/API_Status_Object"
          }
        },
        "required": ["data"]
      },
      "Exchange_Listings_Latest_-_Quote_object": {
        "type": "object",
        "description": "A market quote in the currency conversion option.",
        "properties": {
          "last_updated": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of when the conversion currency's current value was referenced for this conversion.",
            "example": "2018-06-02T23:59:59.999Z"
          },
          "volume_24h": {
            "type": "number",
            "description": "Reported 24 hour volume in the specified currency.",
            "example": 768478308.529847
          },
          "volume_24h_adjusted": {
            "type": "number",
            "description": "Adjusted 24 hour volume in the specified currency for spot markets excluding markets with no fees and transaction mining.",
            "example": 768478308.529847
          },
          "volume_7d": {
            "type": "number",
            "description": "7 day volume in the specified currency.",
            "example": 3666423776
          },
          "volume_30d": {
            "type": "number",
            "description": "30 day volume in the specified currency.",
            "example": 21338299776
          },
          "percent_change_volume_24h": {
            "type": "number",
            "description": "24 hour volume change percentage in the specified currency.",
            "example": 0.03
          },
          "percent_change_volume_7d": {
            "type": "number",
            "description": "7 day volume change percentage in the specified currency.",
            "example": 5.75
          },
          "percent_change_volume_30d": {
            "type": "number",
            "description": "30 day volume change percentage in the specified currency.",
            "example": -19.64
          },
          "effective_liquidity_24h": {
            "type": "number",
            "description": "24 hour liquidity in the specified currency.",
            "example": -19.64
          },
          "derivative_volume": {
            "type": "number",
            "description": "Reported 24 hour derivative volume in the specified currency.",
            "example": 768478308.529847
          },
          "open_interest": {
            "type": "number",
            "description": "Reported 24 hour derivative open interest in the specified currency.",
            "example": 768478308.529847
          },
          "spot_volume_usd": {
            "type": "number",
            "description": "Reported all time spot volume in the specified currency.",
            "example": 768478308.529847
          }
        },
        "required": [
          "last_updated",
          "volume_24h",
          "volume_24h_adjusted",
          "volume_7d",
          "volume_30d",
          "percent_change_volume_24h",
          "percent_change_volume_7d",
          "percent_change_volume_30d"
        ]
      },
      "Exchange_Listings_Latest_-_Quote_map": {
        "type": "object",
        "description": "A map of market quotes in different currency conversions. The default map included is USD.",
        "example": {
          "USD": {
            "volume_24h": 1418940000
          }
        },
        "properties": {
          "$key": {
            "$ref": "#/components/schemas/Exchange_Listings_Latest_-_Quote_object"
          }
        },
        "required": ["$key"]
      },
      "Exchange_Listings_Latest_-_Exchange_object": {
        "type": "object",
        "description": "An exchange object for every exchange that matched list options.",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique CoinMarketCap ID for this exchange.",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "The name of this exchange.",
            "example": "Binance"
          },
          "slug": {
            "type": "string",
            "description": "The web URL friendly shorthand version of this exchange name.",
            "example": "Binance"
          },
          "num_market_pairs": {
            "type": "string",
            "description": "The number of trading pairs actively tracked on this exchange.",
            "example": 500
          },
          "date_launched": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of the date this exchange launched. *This field is only returned if requested through the `aux` request parameter.*",
            "example": "2018-06-02T00:00:00.000Z"
          },
          "exchange_score": {
            "type": "number",
            "description": "The exchange score.",
            "example": 9.8
          },
          "liquidity_score": {
            "type": "number",
            "description": "The liquidity score.",
            "example": 9.8
          },
          "rank": {
            "type": "integer",
            "description": "The exchange rank.",
            "example": 5
          },
          "traffic_score": {
            "type": "number",
            "description": "The traffic score.",
            "example": 1000
          },
          "last_updated": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of the last time this record was upated.",
            "example": "2018-06-02T00:00:00.000Z"
          },
          "quote": {
            "$ref": "#/components/schemas/Exchange_Listings_Latest_-_Quote_map"
          }
        },
        "required": ["id", "name", "slug", "last_updated", "quote"]
      },
      "Exchange_Listings_Latest_-_Results_array": {
        "type": "array",
        "description": "Array of exchange objects matching the list options.",
        "example": [
          {
            "id": 270,
            "name": "Binance",
            "slug": "binance",
            "num_market_pairs": 1214,
            "fiats": ["AED", "USD"],
            "traffic_score": 1000,
            "rank": 1,
            "exchange_score": 9.8028,
            "liquidity_score": 9.8028,
            "last_updated": "2018-11-08T22:18:00.000Z",
            "quote": {
              "USD": {
                "volume_24h": 769291636.239632,
                "volume_24h_adjusted": 769291636.239632,
                "volume_7d": 3666423776,
                "volume_30d": 21338299776,
                "percent_change_volume_24h": -11.6153,
                "percent_change_volume_7d": 67.2055,
                "percent_change_volume_30d": 0.00169339,
                "effective_liquidity_24h": 629.9774,
                "derivative_volume_usd": 62828618628.85901,
                "spot_volume_usd": 39682580614.8572
              }
            }
          },
          {
            "id": 294,
            "name": "OKEx",
            "slug": "okex",
            "num_market_pairs": 385,
            "fiats": ["AED", "USD"],
            "traffic_score": 845.1565,
            "rank": 1,
            "exchange_score": 7.0815,
            "liquidity_score": 9.8028,
            "last_updated": "2018-11-08T22:18:00.000Z",
            "quote": {
              "USD": {
                "volume_24h": 677439315.721563,
                "volume_24h_adjusted": 677439315.721563,
                "volume_7d": 3506137120,
                "volume_30d": 14418225072,
                "percent_change_volume_24h": -13.9256,
                "percent_change_volume_7d": 60.0461,
                "percent_change_volume_30d": 67.2225,
                "effective_liquidity_24h": 629.9774,
                "derivative_volume_usd": 62828618628.85901,
                "spot_volume_usd": 39682580614.8572
              }
            }
          }
        ],
        "items": {
          "$ref": "#/components/schemas/Exchange_Listings_Latest_-_Exchange_object"
        },
        "required": ["Exchange Listings Latest - Exchange object"]
      },
      "Exchange_Listings_Latest_-_Response_Model": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Exchange_Listings_Latest_-_Results_array"
          },
          "status": {
            "$ref": "#/components/schemas/API_Status_Object"
          }
        },
        "required": ["data"]
      },
      "Exchange_Market_Pairs_Latest_-_Pair_Base_Currency_Info_object": {
        "type": "object",
        "description": "Base currency details object for this market pair.",
        "properties": {
          "currency_id": {
            "type": "integer",
            "description": "The CoinMarketCap ID for the base currency in this market pair.",
            "example": 1
          },
          "currency_name": {
            "type": "string",
            "description": "The name of this cryptocurrency. *This field is only returned if requested through the `aux` request parameter.*",
            "example": "Bitcoin"
          },
          "currency_symbol": {
            "type": "string",
            "description": "The symbol for the base currency in this market pair.",
            "example": "BTC"
          },
          "exchange_symbol": {
            "type": "string",
            "description": "The exchange reported symbol for the base currency in this market pair. In most cases this is identical to CoinMarketCap's symbol but it may differ if the exchange uses an outdated or contentious symbol that contrasts with the majority of other markets.",
            "example": "BTC"
          },
          "currency_slug": {
            "type": "string",
            "description": "The web URL friendly shorthand version of this cryptocurrency name. *This field is only returned if requested through the `aux` request parameter.*",
            "example": "bitcoin"
          },
          "currency_type": {
            "type": "string",
            "description": "The currency type for the base currency in this market pair.",
            "example": "cryptocurrency",
            "enum": ["cryptocurrency", "fiat"]
          }
        },
        "required": ["currency_id", "currency_symbol", "exchange_symbol", "currency_type"]
      },
      "Exchange_Market_Pairs_Latest_-_Pair_Base_Currency_Info_object_1": {
        "type": "object",
        "description": "Quote (secondary) currency details object for this market pair",
        "properties": {
          "currency_id": {
            "type": "integer",
            "description": "The CoinMarketCap ID for the quote (secondary) currency in this market pair.",
            "example": 2781
          },
          "currency_name": {
            "type": "string",
            "description": "The name of this cryptocurrency. *This field is only returned if requested through the `aux` request parameter.*",
            "example": "Bitcoin"
          },
          "currency_symbol": {
            "type": "string",
            "description": "The symbol for the quote (secondary) currency in this market pair.",
            "example": "USD"
          },
          "exchange_symbol": {
            "type": "string",
            "description": "The exchange reported symbol for the quote (secondary) currency in this market pair. In most cases this is identical to CoinMarketCap's symbol but it may differ if the exchange uses an outdated or contentious symbol that contrasts with the majority of other markets.",
            "example": "USD"
          },
          "currency_slug": {
            "type": "string",
            "description": "The web URL friendly shorthand version of this cryptocurrency name. *This field is only returned if requested through the `aux` request parameter.*",
            "example": "bitcoin"
          },
          "currency_type": {
            "type": "string",
            "description": "The currency type for the quote (secondary) currency in this market pair.",
            "example": "fiat",
            "enum": ["cryptocurrency", "fiat"]
          }
        },
        "required": ["currency_id", "currency_symbol", "exchange_symbol", "currency_type"]
      },
      "Exchange_Market_Pairs_Latest_-_Market_Pair_Exchange_Reported_Quote": {
        "type": "object",
        "description": "A default exchange reported quote containing raw exchange reported values.",
        "properties": {
          "price": {
            "type": "number",
            "description": "The last exchange reported price for this market pair in quote currency units.",
            "example": 8000.23
          },
          "volume_24h_base": {
            "type": "number",
            "description": "The last exchange reported 24 hour volume for this market pair in base cryptocurrency units.",
            "example": 30768
          },
          "volume_24h_quote": {
            "type": "number",
            "description": "The last exchange reported 24 hour volume for this market pair in quote cryptocurrency units.",
            "example": 250448443.2
          },
          "volume_percentage": {
            "type": "number",
            "description": "Percentage of total exchange volume_24h",
            "example": 0.03
          },
          "last_updated": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of the last time this market data was updated.",
            "example": "2018-06-02T23:59:59.999Z"
          }
        },
        "required": ["price", "volume_24h_base", "volume_24h_quote", "volume_percentage", "last_updated"]
      },
      "Exchange_Market_Pairs_Latest_-_Market_Pair_Quote": {
        "type": "object",
        "description": "One or more market quotes where $key is the conversion currency requested, ex. USD",
        "properties": {
          "price": {
            "type": "number",
            "description": "The last reported exchange price for this market pair converted into the requested convert currency.",
            "example": 8000.23
          },
          "price_quote": {
            "type": "number",
            "description": "The latest exchange reported price in base units converted into the requested convert currency. *This field is only returned if requested through the `aux` request parameter.*",
            "example": 8000.23
          },
          "volume_24h": {
            "type": "number",
            "description": "The last reported exchange volume for this market pair converted into the requested convert currency.",
            "example": 1600000
          },
          "depth_negative_two": {
            "type": "number",
            "description": "-2% Depth in the specified currency.",
            "example": 1600000
          },
          "depth_positive_two": {
            "type": "number",
            "description": "+2% Depth in the specified currency.",
            "example": 1600000
          },
          "effective_liquidity": {
            "x-hidden": true
          },
          "market_score": {
            "x-hidden": true
          },
          "market_reputation": {
            "x-hidden": true
          },
          "last_updated": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of when the conversion currency's current value was referenced for this conversion.",
            "example": "2018-06-02T23:59:59.999Z"
          }
        },
        "required": ["price", "volume_24h", "last_updated"]
      },
      "Exchange_Market_Pairs_Latest_-_Market_Pair_Quote_object": {
        "type": "object",
        "description": "Market Pair quotes object containing key->quote objects for each convert option requested. USD and \"exchange_reported\" are defaults.",
        "properties": {
          "exchange_reported": {
            "$ref": "#/components/schemas/Exchange_Market_Pairs_Latest_-_Market_Pair_Exchange_Reported_Quote"
          },
          "$key": {
            "$ref": "#/components/schemas/Exchange_Market_Pairs_Latest_-_Market_Pair_Quote"
          }
        },
        "required": ["exchange_reported", "$key"]
      },
      "Exchange_Market_Pairs_Latest_-_Market_Pair_Info_object": {
        "type": "object",
        "description": "Market Pair info object.",
        "properties": {
          "market_id": {
            "type": "integer",
            "description": "The CoinMarketCap ID for this market pair. This ID can reliably be used to identify this unique market as the ID never changes.",
            "example": 9933
          },
          "market_pair": {
            "type": "string",
            "description": "The name of this market pair. Example: \"BTC/USD\"",
            "example": "BTC/USD"
          },
          "category": {
            "type": "string",
            "description": "The category of trading this market falls under. Spot markets are the most common but options include derivatives and OTC.",
            "example": "spot",
            "enum": ["spot", "derivatives", "otc"]
          },
          "fee_type": {
            "type": "string",
            "description": "The fee type the exchange enforces for this market.",
            "example": "percentage",
            "enum": ["percentage", "no-fees", "transactional-mining", "unknown"]
          },
          "market_url": {
            "type": "string",
            "description": "The URL to this market's trading page on the exchange if available. If not available the exchange's homepage URL is returned. *This field is only returned if requested through the `aux` request parameter.*",
            "example": "https://www.binance.com/en/trade/BTC_USDT"
          },
          "mark_pair_base": {
            "$ref": "#/components/schemas/Exchange_Market_Pairs_Latest_-_Pair_Base_Currency_Info_object"
          },
          "mark_pair_quote": {
            "$ref": "#/components/schemas/Exchange_Market_Pairs_Latest_-_Pair_Base_Currency_Info_object_1"
          },
          "quote": {
            "$ref": "#/components/schemas/Exchange_Market_Pairs_Latest_-_Market_Pair_Quote_object"
          }
        },
        "required": ["market_id", "market_pair", "category", "mark_pair_base", "mark_pair_quote", "quote"]
      },
      "Exchange_Market_Pairs_Latest_-_Market_Pairs_array": {
        "type": "array",
        "description": "Array of all active market pairs for this exchange.",
        "items": {
          "$ref": "#/components/schemas/Exchange_Market_Pairs_Latest_-_Market_Pair_Info_object"
        },
        "required": ["Exchange Market Pairs Latest - Market Pair Info object"]
      },
      "Exchange_Market_Pairs_Latest_-_Results_object": {
        "type": "object",
        "description": "Results of your query returned as an object.",
        "example": {
          "id": 270,
          "name": "Binance",
          "slug": "binance",
          "num_market_pairs": 473,
          "volume_24h": 769291636.239632,
          "market_pairs": [
            {
              "market_id": 9933,
              "market_pair": "BTC/USDT",
              "category": "spot",
              "fee_type": "percentage",
              "outlier_detected": 0,
              "exclusions": null,
              "market_pair_base": {
                "currency_id": 1,
                "currency_symbol": "BTC",
                "exchange_symbol": "BTC",
                "currency_type": "cryptocurrency"
              },
              "market_pair_quote": {
                "currency_id": 825,
                "currency_symbol": "USDT",
                "exchange_symbol": "USDT",
                "currency_type": "cryptocurrency"
              },
              "quote": {
                "exchange_reported": {
                  "price": 7901.83,
                  "volume_24h_base": 47251.3345550653,
                  "volume_24h_quote": 373372012.927251,
                  "volume_percentage": 19.4346563602467,
                  "last_updated": "2019-05-24T01:40:10.000Z"
                },
                "USD": {
                  "price": 7933.66233493434,
                  "volume_24h": 374876133.234903,
                  "depth_negative_two": 40654.68019906,
                  "depth_positive_two": 17352.9964811,
                  "last_updated": "2019-05-24T01:40:10.000Z"
                }
              }
            },
            {
              "market_id": 36329,
              "market_pair": "MATIC/BTC",
              "category": "spot",
              "fee_type": "percentage",
              "outlier_detected": 0,
              "exclusions": null,
              "market_pair_base": {
                "currency_id": 3890,
                "currency_symbol": "MATIC",
                "exchange_symbol": "MATIC",
                "currency_type": "cryptocurrency"
              },
              "market_pair_quote": {
                "currency_id": 1,
                "currency_symbol": "BTC",
                "exchange_symbol": "BTC",
                "currency_type": "cryptocurrency"
              },
              "quote": {
                "exchange_reported": {
                  "price": 0.0000034,
                  "volume_24h_base": 8773968381.05,
                  "volume_24h_quote": 29831.49249557,
                  "volume_percentage": 19.4346563602467,
                  "last_updated": "2019-05-24T01:41:16.000Z"
                },
                "USD": {
                  "price": 0.0269295015799739,
                  "volume_24h": 236278595.380127,
                  "depth_negative_two": 40654.68019906,
                  "depth_positive_two": 17352.9964811,
                  "last_updated": "2019-05-24T01:41:16.000Z"
                }
              }
            }
          ]
        },
        "properties": {
          "id": {
            "type": "integer",
            "description": "The CoinMarketCap ID for this exchange.",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "The name of this exchange.",
            "example": "Binance"
          },
          "slug": {
            "type": "string",
            "description": "The slug for this exchange.",
            "example": "binance"
          },
          "num_market_pairs": {
            "type": "integer",
            "description": "The number of market pairs that are open for trading on this exchange.",
            "example": 303
          },
          "volume_24h": {
            "type": "number",
            "description": "Reported 24 hour volume in USD.",
            "example": 768478308.529847
          },
          "market_pairs": {
            "$ref": "#/components/schemas/Exchange_Market_Pairs_Latest_-_Market_Pairs_array"
          }
        },
        "required": ["id", "name", "slug", "num_market_pairs", "volume_24h", "market_pairs"]
      },
      "Exchange_Market_Pairs_Latest_-_Response_Model": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Exchange_Market_Pairs_Latest_-_Results_object"
          },
          "status": {
            "$ref": "#/components/schemas/API_Status_Object"
          }
        },
        "required": ["data"]
      },
      "Exchange_Historical_Quotes_-_Currency_Quote_object": {
        "type": "object",
        "description": "The market details for the current interval and currency conversion option. The map key being the curency symbol.",
        "properties": {
          "volume_24hr": {
            "type": "number",
            "description": "Combined 24 hour volume for all market pairs on this exchange at the current historical interval.",
            "example": 1235000
          },
          "timestamp": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of when the conversion currency's current value was referenced for this conversion.",
            "example": "2018-06-02T22:51:28.209Z"
          }
        },
        "required": ["volume_24hr", "timestamp"]
      },
      "Exchange_Historical_Quotes_-_Quote_currency_map": {
        "type": "object",
        "description": "A map of market details for this quote in different currency conversions. The default map included is USD.",
        "properties": {
          "$key": {
            "$ref": "#/components/schemas/Exchange_Historical_Quotes_-_Currency_Quote_object"
          }
        },
        "required": ["$key"]
      },
      "Exchange_Historical_Quotes_-_nterval_Quote_object": {
        "type": "object",
        "description": "An object containing details for the current interval quote.",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of when this historical quote was recorded.",
            "example": "2018-06-02T00:00:00.000Z"
          },
          "num_market_pairs": {
            "type": "number",
            "description": "Number of market pairs available at the current historical interval.",
            "example": 123456789
          },
          "quote": {
            "$ref": "#/components/schemas/Exchange_Historical_Quotes_-_Quote_currency_map"
          }
        },
        "required": ["timestamp", "num_market_pairs", "quote"]
      },
      "Exchange_Historical_Quotes_-_Interval_Quotes_array": {
        "type": "array",
        "description": "An array of quotes for each interval for this exchange.",
        "items": {
          "$ref": "#/components/schemas/Exchange_Historical_Quotes_-_nterval_Quote_object"
        },
        "required": ["Exchange Historical Quotes - nterval Quote object"]
      },
      "Exchange_Historical_Quotes_-_exchange_object": {
        "type": "object",
        "description": "An exchange object for each exchange requested. The map key being the id/slug used in the request.",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The CoinMarketCap exchange ID.",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "The exchange name.",
            "example": "Binance"
          },
          "slug": {
            "type": "string",
            "description": "The exchange slug.",
            "example": "binance"
          },
          "quotes": {
            "$ref": "#/components/schemas/Exchange_Historical_Quotes_-_Interval_Quotes_array"
          }
        },
        "required": ["id", "name", "slug", "quotes"]
      },
      "Exchange_Historical_Quotes_-_Results_map": {
        "type": "object",
        "description": "Results of your query returned as an object map.",
        "example": {
          "id": 270,
          "name": "Binance",
          "slug": "binance",
          "quotes": [
            {
              "timestamp": "2018-06-03T00:00:00.000Z",
              "quote": {
                "USD": {
                  "volume_24h": 1632390000,
                  "timestamp": "2018-06-03T00:00:00.000Z"
                }
              },
              "num_market_pairs": 338
            },
            {
              "timestamp": "2018-06-10T00:00:00.000Z",
              "quote": {
                "USD": {
                  "volume_24h": 1034720000,
                  "timestamp": "2018-06-10T00:00:00.000Z"
                }
              },
              "num_market_pairs": 349
            },
            {
              "timestamp": "2018-06-17T00:00:00.000Z",
              "quote": {
                "USD": {
                  "volume_24h": 883885000,
                  "timestamp": "2018-06-17T00:00:00.000Z"
                }
              },
              "num_market_pairs": 357
            }
          ]
        },
        "properties": {
          "$key": {
            "$ref": "#/components/schemas/Exchange_Historical_Quotes_-_exchange_object"
          }
        },
        "required": ["$key"]
      },
      "Exchange_Historical_Quotes_-_Response_Model": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Exchange_Historical_Quotes_-_Results_map"
          },
          "status": {
            "$ref": "#/components/schemas/API_Status_Object"
          }
        },
        "required": ["data"]
      },
      "Exchange_Quotes_Latest_-_Quote_object": {
        "type": "object",
        "description": "A market quote in the currency conversion option.",
        "properties": {
          "last_updated": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of when the conversion currency's current value was referenced for this conversion.",
            "example": "2018-06-02T22:51:28.209Z"
          },
          "volume_24h": {
            "type": "number",
            "description": "Reported 24 hour volume in the specified currency.",
            "example": 768478308.529847
          },
          "volume_24h_adjusted": {
            "type": "number",
            "description": "Adjusted 24 hour volume in the specified currency for spot markets excluding markets with no fees and transaction mining.",
            "example": 768478308.529847
          },
          "volume_7d": {
            "type": "number",
            "description": "7 day volume in the specified currency.",
            "example": 3666423776
          },
          "volume_30d": {
            "type": "number",
            "description": "30 day volume in the specified currency.",
            "example": 21338299776
          },
          "percent_change_volume_24h": {
            "type": "number",
            "description": "24 hour percent change in the specified currency.",
            "example": 0.03
          },
          "percent_change_volume_7d": {
            "type": "number",
            "description": "7 day percent change in the specified currency.",
            "example": 5.75
          },
          "percent_change_volume_30d": {
            "type": "number",
            "description": "30 day percent change in the specified currency.",
            "example": -19.64
          },
          "effective_liquidity_24h": {
            "type": "number",
            "description": "24 hour liquidity in the specified currency.",
            "example": -19.64
          },
          "derivative_volume": {
            "type": "number",
            "description": "Reported 24 hour derivative volume in the specified currency.",
            "example": 768478308.529847
          },
          "spot_volume": {
            "type": "number",
            "description": "Reported 24 hour spot volume in the specified currency.",
            "example": 768478308.529847
          }
        },
        "required": [
          "last_updated",
          "volume_24h",
          "volume_24h_adjusted",
          "volume_7d",
          "volume_30d",
          "percent_change_volume_24h",
          "percent_change_volume_7d",
          "percent_change_volume_30d"
        ]
      },
      "Exchange_Quotes_Latest_-_Quote_map": {
        "type": "object",
        "description": "A map of market quotes in different currency conversions. The default map included is USD.",
        "properties": {
          "$key": {
            "$ref": "#/components/schemas/Exchange_Quotes_Latest_-_Quote_object"
          }
        },
        "required": ["$key"]
      },
      "Exchange_Quotes_Latest_-_Exchange_object": {
        "type": "object",
        "description": "An exchange object for each requested.",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The CoinMarketCap exchange ID.",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "The exchange name.",
            "example": "Binance"
          },
          "slug": {
            "type": "string",
            "description": "The exchange slug.",
            "example": "binance"
          },
          "num_market_pairs": {
            "type": "integer",
            "description": "The number of active trading pairs available for this exchange.",
            "example": 500
          },
          "exchange_score": {
            "type": "number",
            "description": "The exchange score.",
            "example": 9.8
          },
          "liquidity_score": {
            "type": "number",
            "description": "The liquidity score.",
            "example": 9.8
          },
          "rank": {
            "type": "integer",
            "description": "The exchange rank.",
            "example": 5
          },
          "traffic_score": {
            "type": "number",
            "description": "The traffic score.",
            "example": 1000
          },
          "last_updated": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of the last time this exchange's market data was updated.",
            "example": "2018-06-02T00:00:00.000Z"
          },
          "quote": {
            "$ref": "#/components/schemas/Exchange_Quotes_Latest_-_Quote_map"
          }
        },
        "required": ["id", "name", "slug", "num_market_pairs", "last_updated", "quote"]
      },
      "Exchange_Quotes_Latest_-_Exchange_Results_map": {
        "type": "object",
        "description": "A map of exchange objects by ID or slugs (as used in query parameters).",
        "example": {
          "270": {
            "id": 270,
            "name": "Binance",
            "slug": "binance",
            "num_coins": 132,
            "num_market_pairs": 385,
            "last_updated": "2018-11-08T22:11:00.000Z",
            "traffic_score": 1000,
            "rank": 1,
            "exchange_score": 9.8028,
            "liquidity_score": 9.8028,
            "quote": {
              "USD": {
                "volume_24h": 768478308.529847,
                "volume_24h_adjusted": 768478308.529847,
                "volume_7d": 3666423776,
                "volume_30d": 21338299776,
                "percent_change_volume_24h": -11.8232,
                "percent_change_volume_7d": 67.0306,
                "percent_change_volume_30d": -0.0821558,
                "effective_liquidity_24h": 629.9774
              }
            }
          }
        },
        "properties": {
          "$key": {
            "$ref": "#/components/schemas/Exchange_Quotes_Latest_-_Exchange_object"
          }
        },
        "required": ["$key"]
      },
      "Exchange_Quotes_Latest_-_Response_Model": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Exchange_Quotes_Latest_-_Exchange_Results_map"
          },
          "status": {
            "$ref": "#/components/schemas/API_Status_Object"
          }
        },
        "required": ["data"]
      },
      "Global_Metrics_Quotes_Historic_-_Currency_Quote_object": {
        "type": "object",
        "description": "The market details for the current interval and currency conversion option. The map key being the curency symbol.",
        "properties": {
          "total_market_cap": {
            "type": "number",
            "description": "The sum of all individual cryptocurrency market capitalizations at the given point in time, historically converted into units of the requested currency.",
            "example": 375179000000
          },
          "total_volume_24h": {
            "type": "number",
            "description": "The sum of rolling 24 hour adjusted volume (as outlined in our methodology) for all cryptocurrencies at the given point in time, historically converted into units of the requested currency.",
            "example": 19918400000
          },
          "total_volume_24h_reported": {
            "type": "number",
            "description": "The sum of rolling 24 hour reported volume for all cryptocurrencies at the given point in time, historically converted into units of the requested currency. *Note: This field is only available after 2019-05-10 and will return `null` prior to that time.*",
            "example": 19918400000
          },
          "altcoin_market_cap": {
            "type": "number",
            "description": "The sum of rolling 24 hour adjusted volume (as outlined in our methodology) for all cryptocurrencies excluding Bitcoin at the given point in time, historically converted into units of the requested currency.",
            "example": 187589500000
          },
          "altcoin_volume_24h": {
            "type": "number",
            "description": "The sum of all individual cryptocurrency market capitalizations excluding Bitcoin at the given point in time, historically converted into units of the requested currency.",
            "example": 19918400000
          },
          "altcoin_volume_24h_reported": {
            "type": "number",
            "description": "The sum of rolling 24 hour reported volume for all cryptocurrencies excluding Bitcoin at the given point in time, historically converted into units of the requested currency. *Note: This field is only available after 2019-05-10 and will return `null` prior to that time.*",
            "example": 19918400000
          },
          "timestamp": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of when the conversion currency's current value was referenced for this conversion.",
            "example": "2018-06-02T22:51:28.209Z"
          }
        },
        "required": [
          "total_market_cap",
          "total_volume_24h",
          "total_volume_24h_reported",
          "altcoin_market_cap",
          "altcoin_volume_24h",
          "altcoin_volume_24h_reported",
          "timestamp"
        ]
      },
      "Global_Metrics_Quotes_Historic_-_Quote_currency_map": {
        "type": "object",
        "description": "An object containing market data for this interval by currency option. The default currency mapped is USD.",
        "properties": {
          "$key": {
            "$ref": "#/components/schemas/Global_Metrics_Quotes_Historic_-_Currency_Quote_object"
          }
        },
        "required": ["$key"]
      },
      "Global_Metrics_Quotes_Historic_-_Interval_Quote_object": {
        "type": "object",
        "description": "An object containing details for the current interval quote.",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of when this historical quote was recorded.",
            "example": "2018-06-02T00:00:00.000Z"
          },
          "search_interval": {
            "type": "string",
            "format": "date",
            "description": "The interval timestamp for the search period that this historical quote was located against. *This field is only returned if requested through the `aux` request parameter.*",
            "example": "2018-06-02T00:00:00.000Z"
          },
          "btc_dominance": {
            "type": "number",
            "description": "Percent of BTC market dominance by marketcap at this interval."
          },
          "active_cryptocurrencies": {
            "type": "number",
            "description": "Number of active cryptocurrencies tracked by CoinMarketCap at the given point in time. This includes all cryptocurrencies with a `listing_status` of \"active\" or \"untracked\" as returned from our /cryptocurrency/map call. *Note: This field is only available after 2019-05-10 and will return `null` prior to that time.*",
            "example": 500
          },
          "active_exchanges": {
            "type": "number",
            "description": "Number of active exchanges tracked by CoinMarketCap at the given point in time. This includes all exchanges with a `listing_status` of \"active\" or \"untracked\" as returned by our /exchange/map call. *Note: This field is only available after 2019-06-18 and will return `null` prior to that time.*",
            "example": 200
          },
          "active_market_pairs": {
            "type": "number",
            "description": "Number of active market pairs tracked by CoinMarketCap across all exchanges at the given point in time. *Note: This field is only available after 2019-05-10 and will return `null` prior to that time.*",
            "example": 1000
          },
          "quote": {
            "$ref": "#/components/schemas/Global_Metrics_Quotes_Historic_-_Quote_currency_map"
          }
        },
        "required": [
          "timestamp",
          "btc_dominance",
          "active_cryptocurrencies",
          "active_exchanges",
          "active_market_pairs",
          "quote"
        ]
      },
      "Global_Metrics_Quotes_Historic_-_Interval_Quotes_array": {
        "type": "array",
        "description": "An array of aggregate market quotes for each interval.",
        "items": {
          "$ref": "#/components/schemas/Global_Metrics_Quotes_Historic_-_Interval_Quote_object"
        },
        "required": ["Global Metrics Quotes Historic - Interval Quote object"]
      },
      "Global_Metrics_Quotes_Historic_-_Results_object": {
        "type": "object",
        "description": "Results of your query returned as an object.",
        "example": {
          "quotes": [
            {
              "timestamp": "2018-07-31T00:02:00.000Z",
              "btc_dominance": 47.9949,
              "active_cryptocurrencies": 2500,
              "active_exchanges": 600,
              "active_market_pairs": 1000,
              "quote": {
                "USD": {
                  "total_market_cap": 292863223827.394,
                  "total_volume_24h": 17692152629.7864,
                  "total_volume_24h_reported": 375179000000,
                  "altcoin_market_cap": 187589500000,
                  "altcoin_volume_24h": 375179000000,
                  "altcoin_volume_24h_reported": 375179000000,
                  "timestamp": "2018-07-31T00:02:00.000Z"
                }
              }
            },
            {
              "timestamp": "2018-08-01T00:02:00.000Z",
              "btc_dominance": 48.0585,
              "active_cryptocurrencies": 2500,
              "active_exchanges": 600,
              "active_market_pairs": 1000,
              "quote": {
                "USD": {
                  "total_market_cap": 277770824530.303,
                  "total_volume_24h": 15398085549.0344,
                  "total_volume_24h_reported": 375179000000,
                  "altcoin_market_cap": 187589500000,
                  "altcoin_volume_24h": 375179000000,
                  "altcoin_volume_24h_reported": 375179000000,
                  "timestamp": "2018-07-31T00:02:00.000Z"
                }
              }
            },
            {
              "timestamp": "2018-08-02T00:02:00.000Z",
              "btc_dominance": 48.041,
              "active_cryptocurrencies": 2500,
              "active_exchanges": 600,
              "active_market_pairs": 1000,
              "quote": {
                "USD": {
                  "total_market_cap": 273078776005.223,
                  "total_volume_24h": 14300071695.0547,
                  "total_volume_24h_reported": 375179000000,
                  "altcoin_market_cap": 187589500000,
                  "altcoin_volume_24h": 375179000000,
                  "altcoin_volume_24h_reported": 375179000000,
                  "timestamp": "2018-07-31T00:02:00.000Z"
                }
              }
            }
          ]
        },
        "properties": {
          "quotes": {
            "$ref": "#/components/schemas/Global_Metrics_Quotes_Historic_-_Interval_Quotes_array"
          }
        },
        "required": ["quotes"]
      },
      "Global_Metrics_Quotes_Historic_-_Response_Model": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Global_Metrics_Quotes_Historic_-_Results_object"
          },
          "status": {
            "$ref": "#/components/schemas/API_Status_Object"
          }
        },
        "required": ["data"]
      },
      "Global_Metrics_Quotes_Latest_-_Quote_object": {
        "type": "object",
        "description": "A market quote in the currency conversion option.",
        "properties": {
          "total_market_cap": {
            "type": "number",
            "description": "The sum of all individual cryptocurrency market capitalizations in the requested currency.",
            "example": 250385096532.124
          },
          "total_volume_24h": {
            "type": "number",
            "description": "The sum of rolling 24 hour adjusted volume (as outlined in our methodology) for all cryptocurrencies in the requested currency.",
            "example": 119270642406.968
          },
          "total_volume_24h_reported": {
            "type": "number",
            "description": "The sum of rolling 24 hour reported volume for all cryptocurrencies in the requested currency.",
            "example": 1514905418.39087
          },
          "altcoin_volume_24h": {
            "type": "number",
            "description": "The sum of rolling 24 hour adjusted volume (as outlined in our methodology) for all cryptocurrencies excluding Bitcoin in the requested currency.",
            "example": 119270642406.968
          },
          "altcoin_volume_24h_reported": {
            "type": "number",
            "description": "The sum of rolling 24 hour reported volume for all cryptocurrencies excluding Bitcoin in the requested currency.",
            "example": 1514905418.39087
          },
          "altcoin_market_cap": {
            "type": "number",
            "description": "The sum of all individual cryptocurrency market capitalizations excluding Bitcoin in the requested currency.",
            "example": 250385096532.124
          },
          "last_updated": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of when the conversion currency's current value was referenced.",
            "example": "2019-05-16T18:47:00.000Z"
          }
        },
        "required": [
          "total_market_cap",
          "total_volume_24h",
          "total_volume_24h_reported",
          "altcoin_volume_24h",
          "altcoin_volume_24h_reported",
          "altcoin_market_cap",
          "last_updated"
        ]
      },
      "Global_Metrics_Quotes_Latest_-_Quote_map": {
        "type": "object",
        "description": "A map of market quotes in different currency conversions. The default map included is USD.",
        "example": {
          "active_cryptocurrencies": 4986,
          "total_cryptocurrencies": 9607,
          "active_market_pairs": 39670,
          "active_exchanges": 372,
          "total_exchanges": 1347,
          "eth_dominance": 16.989007016505,
          "btc_dominance": 45.002265776962,
          "eth_dominance_yesterday": 17.25405255,
          "btc_dominance_yesterday": 45.41455043,
          "eth_dominance_24h_percentage_change": -0.265045533495,
          "btc_dominance_24h_percentage_change": -0.412284653038,
          "defi_volume_24h": 20443320643.718483,
          "defi_volume_24h_reported": 20443320643.718483,
          "defi_market_cap": 131290122769.1664,
          "defi_24h_percentage_change": -17.648761478379,
          "stablecoin_volume_24h": 209258420492.51562,
          "stablecoin_volume_24h_reported": 209258420492.51562,
          "stablecoin_market_cap": 95606043432.70901,
          "stablecoin_24h_percentage_change": 2.518312658305,
          "derivatives_volume_24h": 282420341063.98895,
          "derivatives_volume_24h_reported": 282420341063.98895,
          "derivatives_24h_percentage_change": -13.893947771549,
          "quote": {
            "USD": {
              "total_market_cap": 2374432083905.6846,
              "total_volume_24h": 262906061281.24,
              "total_volume_24h_reported": 262906061281.24,
              "altcoin_volume_24h": 195175095816.0813,
              "altcoin_volume_24h_reported": 195175095816.0813,
              "altcoin_market_cap": 1305883846812.9905,
              "defi_volume_24h": 20443320643.718483,
              "defi_volume_24h_reported": 20443320643.718483,
              "defi_24h_percentage_change": -17.648761478379,
              "defi_market_cap": 131290122769.1664,
              "stablecoin_volume_24h": 209258420492.51562,
              "stablecoin_volume_24h_reported": 209258420492.51562,
              "stablecoin_24h_percentage_change": 2.518312658305,
              "stablecoin_market_cap": 95606043432.70901,
              "derivatives_volume_24h": 282420341063.98895,
              "derivatives_volume_24h_reported": 282420341063.98895,
              "derivatives_24h_percentage_change": -13.893947771549,
              "last_updated": "2021-05-06T01:45:17.999Z",
              "total_market_cap_yesterday": 2255175879567.3643,
              "total_volume_24h_yesterday": 254911841723.5,
              "total_market_cap_yesterday_percentage_change": 5.288111025788297,
              "total_volume_24h_yesterday_percentage_change": 3.1360722607823135
            }
          },
          "last_updated": "2021-05-06T01:45:17.999Z"
        },
        "properties": {
          "$key": {
            "$ref": "#/components/schemas/Global_Metrics_Quotes_Latest_-_Quote_object"
          }
        },
        "required": ["$key"]
      },
      "Global_Metrics_Quotes_Latest_-_Results_Object": {
        "type": "object",
        "description": "Results object for your API call.",
        "properties": {
          "btc_dominance": {
            "type": "number",
            "description": "Bitcoin's market dominance percentage by market cap.",
            "example": 67.0057
          },
          "eth_dominance": {
            "type": "number",
            "description": "Ethereum's market dominance percentage by market cap.",
            "example": 9.02205
          },
          "active_cryptocurrencies": {
            "type": "number",
            "description": "Count of active cryptocurrencies tracked by CoinMarketCap. This includes all cryptocurrencies with a `listing_status` of \"active\" or \"listed\" as returned from our /cryptocurrency/map call.",
            "example": 2941
          },
          "total_cryptocurrencies": {
            "type": "number",
            "description": "Count of all cryptocurrencies tracked by CoinMarketCap. This includes \"inactive\" `listing_status` cryptocurrencies.",
            "example": 4637
          },
          "active_market_pairs": {
            "type": "number",
            "description": "Count of active market pairs tracked by CoinMarketCap across all exchanges.",
            "example": 21209
          },
          "active_exchanges": {
            "type": "number",
            "description": "Count of active exchanges tracked by CoinMarketCap. This includes all exchanges with a `listing_status` of \"active\" or \"listed\" as returned by our /exchange/map call.",
            "example": 445
          },
          "total_exchanges": {
            "type": "number",
            "description": "Count of all exchanges tracked by CoinMarketCap. This includes \"inactive\" `listing_status` exchanges.",
            "example": 677
          },
          "last_updated": {
            "type": "string",
            "format": "date",
            "description": "Timestamp of when this record was last updated.",
            "example": "2019-05-16T18:47:00.000Z"
          },
          "quote": {
            "$ref": "#/components/schemas/Global_Metrics_Quotes_Latest_-_Quote_map"
          }
        },
        "required": [
          "active_cryptocurrencies",
          "total_cryptocurrencies",
          "active_market_pairs",
          "active_exchanges",
          "total_exchanges",
          "last_updated",
          "quote"
        ]
      },
      "Global_Metrics_Quotes_Latest_-_Response_Model": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Global_Metrics_Quotes_Latest_-_Results_Object"
          },
          "status": {
            "$ref": "#/components/schemas/API_Status_Object"
          }
        },
        "required": ["data"]
      },
      "FCAS_Listings_Latest_-_Cryptocurrency_object": {
        "type": "object",
        "description": "A cryptocurrency object for every cryptocurrency that matched list options.",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique CoinMarketCap ID for this cryptocurrency.",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "The name of this cryptocurrency.",
            "example": "Bitcoin"
          },
          "symbol": {
            "type": "string",
            "description": "The ticker symbol for this cryptocurrency.",
            "example": "BTC"
          },
          "slug": {
            "type": "string",
            "description": "The web URL friendly shorthand version of this cryptocurrency name.",
            "example": "bitcoin"
          },
          "score": {
            "type": "integer",
            "description": "The cryptocurrency's current FCAS score out of 1000",
            "example": 1000,
            "minimum": 0,
            "maximum": 1000
          },
          "grade": {
            "type": "string",
            "description": "The cryptocurrency's current FCAS letter grade",
            "example": "A"
          },
          "percent_change_24h": {
            "type": "number",
            "description": "24 hour % FCAS score change",
            "example": 0.03
          },
          "point_change_24h": {
            "type": "number",
            "description": "24 hour FCAS point change",
            "example": 5,
            "minimum": -1000,
            "maximum": 1000
          },
          "last_updated": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of the last time this cryptocurrency's FCAS value was updated.",
            "example": "2018-06-02T23:59:59.999Z"
          }
        },
        "required": ["id", "name", "symbol", "slug"]
      },
      "FCAS_Listings_Latest_-_Results_array": {
        "type": "array",
        "description": "Array of cryptocurrency objects matching the list options.",
        "items": {
          "$ref": "#/components/schemas/FCAS_Listings_Latest_-_Cryptocurrency_object"
        },
        "required": ["FCAS Listings Latest - Cryptocurrency object"]
      },
      "FCAS_Listings_Latest_-_Response_Model": {
        "type": "object",
        "example": {
          "data": [
            {
              "id": 1027,
              "name": "Ethereum",
              "symbol": "ETH",
              "slug": "ethereum",
              "score": 971,
              "grade": "S",
              "last_updated": "2021-05-05T00:00:00Z"
            },
            {
              "id": 2010,
              "name": "Cardano",
              "symbol": "ADA",
              "slug": "cardano",
              "score": 961,
              "grade": "S",
              "last_updated": "2021-05-05T00:00:00Z"
            }
          ],
          "status": {
            "timestamp": "2018-06-02T22:51:28.209Z",
            "error_code": 0,
            "error_message": "",
            "elapsed": 10,
            "credit_count": 1
          }
        },
        "properties": {
          "data": {
            "$ref": "#/components/schemas/FCAS_Listings_Latest_-_Results_array"
          },
          "status": {
            "$ref": "#/components/schemas/API_Status_Object"
          }
        },
        "required": ["data"]
      },
      "FCAS_Quote_Latest_-_Cryptocurrency_object": {
        "type": "object",
        "description": "A cryptocurrency object for each requested.",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique CoinMarketCap ID for this cryptocurrency.",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "The name of this cryptocurrency.",
            "example": "Bitcoin"
          },
          "symbol": {
            "type": "string",
            "description": "The ticker symbol for this cryptocurrency.",
            "example": "BTC"
          },
          "slug": {
            "type": "string",
            "description": "The web URL friendly shorthand version of this cryptocurrency name.",
            "example": "bitcoin"
          },
          "score": {
            "type": "integer",
            "description": "The cryptocurrency's current FCAS score out of 1000",
            "example": 1000,
            "minimum": 0,
            "maximum": 1000
          },
          "grade": {
            "type": "string",
            "description": "The cryptocurrency's current FCAS letter grade",
            "example": "A"
          },
          "percent_change_24h": {
            "type": "number",
            "description": "24 hour % FCAS score change",
            "example": 0.03
          },
          "point_change_24h": {
            "type": "number",
            "description": "24 hour FCAS point change",
            "example": 5,
            "minimum": -1000,
            "maximum": 1000
          },
          "last_updated": {
            "type": "string",
            "format": "date",
            "description": "Timestamp (ISO 8601) of the last time this cryptocurrency's FCAS value was updated.",
            "example": "2018-06-02T23:59:59.999Z"
          }
        },
        "required": ["id", "name", "symbol", "slug"]
      },
      "FCAS_Quote_Latest_-_Cryptocurrency_Results_map": {
        "type": "object",
        "description": "A map of cryptocurrency objects by ID or symbol (as used in query parameters).",
        "example": {
          "1": {
            "id": 1,
            "name": "Bitcoin",
            "symbol": "BTC",
            "slug": "bitcoin",
            "score": 894,
            "grade": "A",
            "percent_change_24h": 0.56,
            "point_change_24h": 5,
            "last_updated": "2019-08-08T00:00:00Z"
          }
        },
        "properties": {
          "$key": {
            "$ref": "#/components/schemas/FCAS_Quote_Latest_-_Cryptocurrency_object"
          }
        },
        "required": ["$key"]
      },
      "FCAS_Quote_Latest_-_Response_Model": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/FCAS_Quote_Latest_-_Cryptocurrency_Results_map"
          },
          "status": {
            "$ref": "#/components/schemas/API_Status_Object"
          }
        },
        "required": ["data"]
      }
    },
    "securitySchemes": {
      "ApiKey": {
        "x-displayName": "API Key",
        "type": "apiKey",
        "name": "X-CMC_PRO_API_KEY",
        "in": "header",
        "description": "Get your API Key here: https://coinmarketcap.com/api/"
      }
    }
  },
  "security": [
    {
      "ApiKey": []
    }
  ]
}
