{
  "openapi": "3.0.0",
  "servers": [
    {
      "url": "https://api.calendly.com"
    }
  ],
  "info": {
    "title": "Calendly",
    "description": "Calendly helps you schedule meetings without the back-and-forth emails",
    "version": "2.0.0",
    "x-categories": ["events"],
    "x-logo": {
      "url": "/logos/calendly.svg"
    },
    "contact": {
      "email": "support+developer@calendly.com",
      "name": "Calendly Developer Support",
      "url": "https://developer.calendly.com"
    }
  },
  "tags": [
    {
      "name": "Users"
    },
    {
      "name": "Event Types"
    },
    {
      "name": "Scheduled Events"
    },
    {
      "name": "Organizations"
    },
    {
      "name": "Webhooks"
    }
  ],
  "paths": {
    "/scheduled_events/{uuid}/invitees": {
      "get": {
        "summary": "List Event Invitees",
        "tags": ["Scheduled Events"],
        "security": [
          {
            "oauth2": []
          }
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["active", "canceled"]
            },
            "description": "Indicates if the invitee \"canceled\" or still \"active\""
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "created_at:asc"
            },
            "description": "Order results by the **created_at** field and direction specified: ascending (\"asc\") or descending (\"desc\")"
          },
          {
            "name": "email",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "email",
              "example": "bob@example.com"
            },
            "description": "Indicates if the results should be filtered by email address"
          },
          {
            "$ref": "#/components/parameters/PageToken"
          },
          {
            "$ref": "#/components/parameters/Count"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Service response",
                  "properties": {
                    "collection": {
                      "type": "array",
                      "description": "The set of event invitees matching the criteria",
                      "items": {
                        "$ref": "#/components/schemas/Invitee"
                      }
                    },
                    "pagination": {
                      "$ref": "#/paths/~1event_types/get/responses/200/content/application~1json/schema/properties/pagination"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/INVALID_ARGUMENT"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/PERMISSION_DENIED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "500": {
            "$ref": "#/components/responses/UNKNOWN"
          }
        },
        "description": "Returns a list of Invitees for an event.",
        "operationId": "getInvitees"
      }
    },
    "/scheduled_events": {
      "get": {
        "summary": "List User's Events",
        "description": "Returns a list of a event hostâ€™s (publisher) Events.",
        "tags": ["Scheduled Events"],
        "security": [
          {
            "oauth2": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uri",
              "example": "https://api.calendly.com/users/EBHAAFHDCAEQTSEZ"
            },
            "description": "Return events that are scheduled with the user associated with this URI",
            "required": true
          },
          {
            "name": "invitee_email",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "email",
              "example": "alice@example.com"
            },
            "description": "Return events that are scheduled with the user associated with this email address"
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["active", "canceled"]
            },
            "description": "Whether the scheduled event is `active` or `canceled`"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Order results by the specified field and direction. Accepts comma-separated list of {field}:{direction} values.\nSupported fields are: start_time.\nSort direction is specified as: asc, desc.",
            "example": "start_time:asc"
          },
          {
            "name": "min_start_time",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Include events with start times after to this time (sample time me format: \"2020-01-02T03:04:05.678Z\")",
            "example": "2020-01-02T12:30:00Z"
          },
          {
            "name": "max_start_time",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Include events with start times prior to this time (sample time me format: \"2020-01-02T03:04:05.678Z\")",
            "example": "2020-01-02T12:30:00Z"
          },
          {
            "$ref": "#/components/parameters/PageToken"
          },
          {
            "$ref": "#/components/parameters/Count"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Service response",
                  "properties": {
                    "collection": {
                      "type": "array",
                      "description": "The set of scheduled events matching the criteria",
                      "items": {
                        "$ref": "#/components/schemas/Event"
                      }
                    },
                    "pagination": {
                      "$ref": "#/paths/~1event_types/get/responses/200/content/application~1json/schema/properties/pagination"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/INVALID_ARGUMENT"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/PERMISSION_DENIED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "500": {
            "$ref": "#/components/responses/UNKNOWN"
          }
        },
        "operationId": "getScheduledEvents"
      },
      "parameters": []
    },
    "/event_types": {
      "get": {
        "summary": "List User's Event Types",
        "description": "Returns all Event Types associated with a specified User.",
        "tags": ["Event Types"],
        "security": [
          {
            "oauth2": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "description": "View available personal, team, and organization event types associated with the user's URI.",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uri"
            },
            "required": true
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "name:asc"
            },
            "description": "Order results by the specified field and direction. Accepts comma-separated list of {field}:{direction} values.\nSupported fields are: name.\nSort direction is specified as: asc, desc.",
            "examples": {
              "withOmittedDirection": {
                "summary": "Omit direction with fallback to asc by default",
                "value": "name"
              }
            }
          },
          {
            "$ref": "#/components/parameters/PageToken"
          },
          {
            "$ref": "#/components/parameters/Count"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Service response",
                  "properties": {
                    "collection": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EventType"
                      }
                    },
                    "pagination": {
                      "title": "Pagination Base",
                      "type": "object",
                      "properties": {
                        "count": {
                          "description": "The number of rows to return",
                          "type": "number"
                        },
                        "next_page": {
                          "type": "string",
                          "nullable": true,
                          "format": "uri",
                          "description": "Return the next page of an ordered list (\"null\" indicates no additional results are available)"
                        }
                      },
                      "required": ["count", "next_page"]
                    }
                  },
                  "required": ["collection", "pagination"]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/INVALID_ARGUMENT"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/PERMISSION_DENIED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "500": {
            "$ref": "#/components/responses/UNKNOWN"
          }
        },
        "operationId": "getEventTypes"
      },
      "parameters": []
    },
    "/users/{uuid}": {
      "get": {
        "summary": "Get user",
        "tags": ["Users"],
        "security": [
          {
            "oauth2": []
          }
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "User unique identifier, or the constant \"me\" to reference the caller",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Service response",
                  "properties": {
                    "resource": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/PERMISSION_DENIED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "500": {
            "$ref": "#/components/responses/UNKNOWN"
          }
        },
        "description": "Returns information about a specified User.",
        "operationId": "getUser"
      }
    },
    "/users/me": {
      "get": {
        "summary": "Get current user",
        "tags": ["Users"],
        "security": [
          {
            "oauth2": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Service response",
                  "properties": {
                    "resource": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/PERMISSION_DENIED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "500": {
            "$ref": "#/components/responses/UNKNOWN"
          }
        },
        "description": "Returns basic information about your user account.",
        "operationId": "getMyUserAccount",
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ]
      }
    },
    "/scheduled_events/{event_uuid}/invitees/{invitee_uuid}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "event_uuid",
          "in": "path",
          "required": true,
          "description": "The event's unique identifier"
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "invitee_uuid",
          "in": "path",
          "required": true,
          "description": "The invitee's unique identifier"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "summary": "Get Event Invitee",
        "tags": ["Scheduled Events"],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "resource:": {
                      "$ref": "#/components/schemas/Invitee"
                    }
                  }
                },
                "examples": {
                  "Invitee": {
                    "value": {
                      "created_at": "2020-01-01T20:30:00Z",
                      "email": "email@example.com",
                      "event": "https://api.calendly.com/scheduled_events/ABCDABCDABCDABCD",
                      "name": "John Doe",
                      "status": "active",
                      "timezone": "America/New_York",
                      "updated_at": "2020-01-01T20:30:00Z",
                      "uri": "https://api.calendly.com/api/v2/scheduled_events/ABCDABCDABCDABCD/invitees/ABCDABCDABCDABCD",
                      "questions_and_answers": [
                        {
                          "answer": "radio button answer",
                          "position": 0,
                          "question": "Question with Radio Buttons answer type"
                        },
                        {
                          "answer": "Multiple line\nAnswer",
                          "position": 1,
                          "question": "Question with Multiple Lines answer type"
                        },
                        {
                          "answer": "Answer 1\nAnswer 2\nAnswer 3",
                          "position": 2,
                          "question": "Question with Checkboxes answer type"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/INVALID_ARGUMENT"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "description": "Caller not authorized to view event",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/UNKNOWN/content/application~1json/schema/allOf/0"
                },
                "examples": {
                  "Unauthorized": {
                    "value": {
                      "title": "Permission Denied",
                      "message": "You do not have permission to view this event"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "500": {
            "$ref": "#/components/responses/UNKNOWN"
          }
        },
        "operationId": "get-scheduled_events-event_uuid-invitees-invitee_uuid",
        "security": [
          {
            "oauth2": []
          }
        ],
        "description": "Returns information about an Invitee (person invited to an event) associated with a URI.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ]
      }
    },
    "/scheduled_events/{uuid}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "uuid",
          "in": "path",
          "required": true,
          "description": "The event's unique identifier"
        }
      ],
      "get": {
        "summary": "Get Event",
        "tags": ["Scheduled Events"],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "resource": {
                      "$ref": "#/components/schemas/Event"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/PERMISSION_DENIED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "500": {
            "$ref": "#/components/responses/UNKNOWN"
          }
        },
        "operationId": "get-scheduled_events-uuid",
        "security": [
          {
            "oauth2": []
          }
        ],
        "description": "Returns information about an Event associated with a URI.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ]
      }
    },
    "/event_types/{uuid}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "uuid",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get Event Type",
        "tags": ["Event Types"],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "resource": {
                      "$ref": "#/components/schemas/EventType"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/INVALID_ARGUMENT"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/PERMISSION_DENIED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "500": {
            "$ref": "#/components/responses/UNKNOWN"
          }
        },
        "operationId": "get-event_types-uuid",
        "security": [
          {
            "oauth2": []
          }
        ],
        "description": "<!-- theme: info -->\n> This endpoint hasn't been released yet.\n\nReturns Event Type associated with the specified UUID.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ]
      }
    },
    "/organizations/{uuid}/invitations": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "uuid",
          "in": "path",
          "required": true,
          "description": "The organization's unique identifier"
        }
      ],
      "get": {
        "summary": "List Organization Invitations",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "collection": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1organizations~1%7Buuid%7D~1invitations/post/responses/201/content/application~1json/schema/properties/resource"
                      }
                    },
                    "pagination": {
                      "$ref": "#/paths/~1event_types/get/responses/200/content/application~1json/schema/properties/pagination"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/INVALID_ARGUMENT"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/PERMISSION_DENIED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "500": {
            "$ref": "#/components/responses/UNKNOWN"
          }
        },
        "operationId": "get-organizations-uuid-invitations",
        "description": "Returns a list of Organization Invitations that were sent to the organization's members.",
        "security": [
          {
            "oauth2": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Count"
          },
          {
            "$ref": "#/components/parameters/PageToken"
          },
          {
            "schema": {
              "type": "string",
              "default": "created_at:asc"
            },
            "in": "query",
            "name": "sort",
            "description": "Order results by the field name and direction specified (ascending or descending). Returns multiple sets of results in a comma-separated list."
          },
          {
            "schema": {
              "type": "string",
              "format": "email",
              "example": "bob@example.com"
            },
            "in": "query",
            "name": "email",
            "description": "Indicates if the results should be filtered by email address"
          },
          {
            "schema": {
              "type": "string",
              "enum": ["pending", "accepted", "declined"]
            },
            "in": "query",
            "name": "status",
            "description": "\t\nIndicates if the results should be filtered by status  (\"pending\", \"accepted\", or \"declined\")"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ],
        "tags": ["Organizations"]
      },
      "post": {
        "summary": "Invite User to Organization",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "resource": {
                      "title": "Organization Invitation",
                      "type": "object",
                      "properties": {
                        "uri": {
                          "type": "string",
                          "description": "Canonical reference (unique identifier) for the organization invitation",
                          "format": "uri"
                        },
                        "organization": {
                          "type": "string",
                          "example": "https://api.calendly.com/organizations/012345678901234567890",
                          "description": "Canonical reference (unique identifier) for the organization"
                        },
                        "email": {
                          "type": "string",
                          "description": "The email address of the person who was invited to join the organization",
                          "format": "email"
                        },
                        "status": {
                          "type": "string",
                          "description": "The status of the invitation (\"pending\", \"accepted\", or \"declined\")",
                          "enum": ["pending", "accepted", "declined"]
                        },
                        "created_at": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2019-08-07T06:05:04.321Z",
                          "description": "The moment the invitation was created (e.g. â€œ2020-01-02T03:04:05.678Z\")"
                        },
                        "updated_at": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2019-01-02T03:04:05.678Z",
                          "description": "The moment the invitation was last updated (e.g. \"2020-01-02T03:04:05.678Z\")"
                        },
                        "last_sent_at": {
                          "type": "string",
                          "nullable": true,
                          "description": "The moment the invitation was last sent (e.g. \"2020-01-02T03:04:05.678Z\")",
                          "format": "date-time",
                          "example": "2019-01-02T03:04:05.678Z"
                        },
                        "user": {
                          "type": "string",
                          "format": "uri",
                          "example": "https://api.calendly.com/users/012345678901234567890",
                          "description": "If the invitation was sent by a user, this is the unique reference to that user"
                        }
                      },
                      "required": [
                        "uri",
                        "organization",
                        "email",
                        "status",
                        "created_at",
                        "updated_at",
                        "last_sent_at"
                      ],
                      "description": "Organization Invitation object"
                    }
                  }
                },
                "examples": {
                  "Invitation": {
                    "value": {
                      "created_at": "2020-01-01T20:30:00Z",
                      "email": "email@example.com",
                      "last_sent_at": "2020-01-01T20:30:00Z",
                      "organization": "https://api.calendly.com/organizations/ABCDABCDABCDABCD",
                      "status": "pending",
                      "updated_at": "2020-01-01T20:30:00Z",
                      "uri": "https://api.calendly.com/organizations/ABCDABCDABCDABCD/invitations/DCBADCBADCBADCBA"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/UNKNOWN/content/application~1json/schema/allOf/0"
                },
                "examples": {
                  "Email is Invalid": {
                    "value": {
                      "title": "Invalid Email",
                      "message": "invalid_email@example is an invalid email format"
                    }
                  },
                  "Email is Blank": {
                    "value": {
                      "title": "Invalid Argument",
                      "message": "The supplied parameters are invalid.",
                      "details": [
                        {
                          "parameter": "email",
                          "message": "must be filled"
                        }
                      ]
                    }
                  },
                  "Email Exists in Organization": {
                    "value": {
                      "title": "Already Organization Member",
                      "message": "email@example.com is already in the organization"
                    }
                  },
                  "Invitation Already Exists": {
                    "value": {
                      "title": "Already Invited",
                      "message": "email@example.com has already been invited"
                    }
                  },
                  "Quantity Overflow": {
                    "value": {
                      "title": "Please Upgrade Your Account to Send More Invitations",
                      "message": "You already sent all the invitations youâ€™re allotted based upon the number of seats purchased with your account. Please purchase more seats to send more invitations."
                    }
                  },
                  "Trial Quantity Overflow": {
                    "value": {
                      "title": "Please Upgrade Your Account to Send More Invitations",
                      "message": "You already sent all the invitations allotted to you with a trial account."
                    }
                  },
                  "Race Condition": {
                    "value": {
                      "title": "Race Condition",
                      "message": "A race condition occurred when processing the request.  Please try the request again."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/PERMISSION_DENIED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "500": {
            "$ref": "#/components/responses/UNKNOWN"
          }
        },
        "operationId": "post-organizations-uuid-invitations",
        "description": "\t\nInvites a user to an organization.",
        "security": [
          {
            "oauth2": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "The email of the user being invited",
                    "format": "email",
                    "example": "alice@example.com"
                  }
                },
                "required": ["email"]
              }
            }
          }
        },
        "tags": ["Organizations"],
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ]
      }
    },
    "/organizations/{org_uuid}/invitations/{uuid}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "org_uuid",
          "in": "path",
          "required": true,
          "description": "The organizationâ€™s unique identifier"
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "uuid",
          "in": "path",
          "description": "The organization invitation's unique identifier",
          "required": true
        }
      ],
      "delete": {
        "summary": "Revoke User's Organization Invitation",
        "tags": ["Organizations"],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/UNKNOWN/content/application~1json/schema/allOf/0"
                },
                "examples": {
                  "Invitation Already Accepted": {
                    "value": {
                      "title": "Invitation Already Accepted",
                      "message": "The invitation has already been accepted."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/PERMISSION_DENIED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "500": {
            "$ref": "#/components/responses/UNKNOWN"
          }
        },
        "operationId": "revoke-users-organization-invitation",
        "description": "Use this to revoke an Organization Invitation to an organization. Once revoked, the invitation link that was sent to the invitee is no longer valid.",
        "security": [
          {
            "oauth2": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ]
      },
      "get": {
        "summary": "Get Organization Invitation",
        "operationId": "get-organizations-org_uuid-invitations-uuid",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "resource": {
                      "$ref": "#/paths/~1organizations~1%7Buuid%7D~1invitations/post/responses/201/content/application~1json/schema/properties/resource"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/INVALID_ARGUMENT"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/PERMISSION_DENIED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "500": {
            "$ref": "#/components/responses/UNKNOWN"
          }
        },
        "description": "Returns an Organization Invitation that was sent to the organization's members.",
        "security": [
          {
            "oauth2": []
          }
        ],
        "tags": ["Organizations"],
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ]
      }
    },
    "/organization_memberships/{uuid}": {
      "get": {
        "summary": "Get Organization Membership",
        "tags": ["Organizations"],
        "security": [
          {
            "oauth2": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "resource": {
                      "$ref": "#/components/schemas/OrganizationMembership"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/INVALID_ARGUMENT"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "description": "Caller not authorized to perform this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/UNKNOWN/content/application~1json/schema/allOf/0"
                },
                "examples": {
                  "User belongs to another organization": {
                    "value": {
                      "title": "Permission Denied",
                      "message": "This user is not in your organization"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "500": {
            "$ref": "#/components/responses/UNKNOWN"
          }
        },
        "description": "Returns information about a user's Organization Membership",
        "operationId": "get-organizations-uuid-memberships",
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ]
      },
      "delete": {
        "summary": "Remove User from Organization",
        "tags": ["Organizations"],
        "operationId": "delete-organizations-uuid-memberships",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/INVALID_ARGUMENT"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "description": "Caller not authorized to perform this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/UNKNOWN/content/application~1json/schema/allOf/0"
                },
                "examples": {
                  "Caller's Role is User": {
                    "value": {
                      "title": "Permission Denied",
                      "message": "You do not have permission to perform this action"
                    }
                  },
                  "Member is Owner": {
                    "value": {
                      "title": "Permission Denied",
                      "message": "You can not change owner role"
                    }
                  },
                  "Member is the caller's account": {
                    "value": {
                      "title": "Permission Denied",
                      "message": "You can not remove yourself from organization"
                    }
                  },
                  "Member belongs to another Organization": {
                    "value": {
                      "title": "Permission Denied",
                      "message": "You cannot modify members from another organization"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "500": {
            "$ref": "#/components/responses/UNKNOWN"
          }
        },
        "description": "Removes a user from an organization.\n\nNotes:\n\n* To remove users, the caller must have admin rights for the organization\n\n* An organization owner canâ€™t be removed",
        "security": [
          {
            "oauth2": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ]
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "uuid",
          "in": "path",
          "required": true,
          "description": "The organization membership's unique identifier"
        }
      ]
    },
    "/organization_memberships": {
      "get": {
        "summary": "List Organization Memberships",
        "tags": ["Organizations"],
        "security": [
          {
            "oauth2": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageToken"
          },
          {
            "$ref": "#/components/parameters/Count"
          },
          {
            "schema": {
              "type": "string",
              "format": "email",
              "example": "user@example.com"
            },
            "in": "query",
            "name": "email",
            "description": "Indicates if the results should be filtered by email address"
          },
          {
            "schema": {
              "type": "string",
              "format": "uri",
              "example": "https://api.calendly.com/organizations/012345678901234567890"
            },
            "in": "query",
            "name": "organization",
            "description": "Indicates if the results should be filtered by organization"
          },
          {
            "schema": {
              "type": "string",
              "example": "https://api.calendly.com/users/012345678901234567890",
              "format": "uri"
            },
            "in": "query",
            "name": "user",
            "description": "Indicates if the results should be filtered by user"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Service response",
                  "properties": {
                    "collection": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OrganizationMembership"
                      }
                    },
                    "pagination": {
                      "$ref": "#/paths/~1event_types/get/responses/200/content/application~1json/schema/properties/pagination"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/INVALID_ARGUMENT"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "description": "Caller not authorized to perform this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/UNKNOWN/content/application~1json/schema/allOf/0"
                },
                "examples": {
                  "User belongs to another organization": {
                    "value": {
                      "title": "Permission Denied",
                      "message": "This user is not in your organization"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "500": {
            "$ref": "#/components/responses/UNKNOWN"
          }
        },
        "description": "Use this to list the Organization Memberships for all users belonging to an organization, use:\n\n* `user` to look up a user's membership in an organization\n\n* `organization` to look up all users that belong to the organization\n\nThis endpoint can also be used to retrieve your organization uuid.",
        "operationId": "get-organization-memberships"
      },
      "parameters": []
    },
    "/webhook_subscriptions": {
      "post": {
        "summary": "Create Webhook Subscription",
        "operationId": "post-users-uuid-webhooks",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "resource": {
                      "title": "Webhook Subscription",
                      "type": "object",
                      "description": "Webhook Subscription Object",
                      "properties": {
                        "uri": {
                          "type": "string",
                          "description": "Canonical reference (unique identifier) for the webhook",
                          "format": "uri"
                        },
                        "callback_url": {
                          "type": "string",
                          "description": "The callback URL to use when the event is triggered",
                          "format": "uri"
                        },
                        "created_at": {
                          "type": "string",
                          "description": "The moment when the webhook subscription was created (e.g. \"2020-01-02T03:04:05.678Z\")",
                          "format": "date-time"
                        },
                        "updated_at": {
                          "type": "string",
                          "description": "The moment when the webhook subscription was last updated (e.g. \"2020-01-02T03:04:05.678Z\")",
                          "format": "date-time"
                        },
                        "retry_started_at": {
                          "type": "string",
                          "description": "The date and time the webhook subscription is retried",
                          "format": "date-time",
                          "nullable": true
                        },
                        "state": {
                          "type": "string",
                          "description": "Indicates if the webhook subscription is \"active\" or \"disabled\"",
                          "enum": ["active", "disabled"]
                        },
                        "events": {
                          "type": "array",
                          "description": "A list of events to which the webhook is subscribed",
                          "uniqueItems": true,
                          "items": {
                            "type": "string",
                            "enum": ["invitee.created", "invitee.canceled"]
                          }
                        },
                        "scope": {
                          "type": "string",
                          "enum": ["user", "organization"],
                          "description": "The scope of the webhook subscription"
                        },
                        "organization": {
                          "type": "string",
                          "description": "The URI of the organization that's associated with the webhook subscription",
                          "format": "uri"
                        },
                        "user": {
                          "type": "string",
                          "description": "The URI of the user that's associated with the webhook subscription",
                          "format": "uri",
                          "nullable": true
                        },
                        "creator": {
                          "type": "string",
                          "format": "uri",
                          "description": "The URI of the user who created the webhook subscription",
                          "nullable": true
                        }
                      },
                      "required": [
                        "uri",
                        "callback_url",
                        "created_at",
                        "updated_at",
                        "retry_started_at",
                        "state",
                        "events",
                        "scope",
                        "organization",
                        "user",
                        "creator"
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/INVALID_ARGUMENT"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/PERMISSION_DENIED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "409": {
            "description": "Attempt to create a resource that already exists",
            "content": {
              "application/json": {
                "examples": {
                  "URL Already Exists": {
                    "value": {
                      "title": "Already Exists",
                      "message": "Hook with this url already exists"
                    }
                  }
                },
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/responses/UNKNOWN/content/application~1json/schema/allOf/0"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "title": {
                          "type": "string",
                          "enum": ["Already Exists"]
                        },
                        "message": {
                          "type": "string",
                          "enum": ["Hook with this url already exists"]
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "description": "Create a Webhook Subscription for an Organization or User.",
        "tags": ["Webhooks"],
        "security": [
          {
            "oauth2": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "Canonical reference (unique identifier) for the resource",
                    "format": "uri"
                  },
                  "events": {
                    "type": "array",
                    "description": "List of user events to subscribe to.",
                    "uniqueItems": true,
                    "items": {
                      "type": "string",
                      "enum": ["invitee.canceled", "invitee.created"]
                    }
                  },
                  "organization": {
                    "type": "string",
                    "description": "The unique reference to the organization that the webhook will be tied to.",
                    "format": "uri"
                  },
                  "user": {
                    "type": "string",
                    "description": "The unique reference to the user that the webhook will be tied to.",
                    "format": "uri"
                  },
                  "scope": {
                    "type": "string",
                    "enum": ["organization", "user"],
                    "description": "Indicates if the webhook subscription scope will be \"organization\" or \"user\""
                  }
                },
                "required": ["url", "events", "organization", "scope"]
              },
              "examples": {
                "User Scope Webhook": {
                  "value": {
                    "url": "https://blah.foo/bar",
                    "events": ["invitee.created", "invitee.canceled"],
                    "organization": "https://api.calendly.com/organizations/AAAAAAAAAAAAAAAA",
                    "user": "https://api.calendly.com/users/BBBBBBBBBBBBBBBB",
                    "scope": "user"
                  }
                },
                "Organization Scope Webhook": {
                  "value": {
                    "url": "https://blah.foo/bar",
                    "events": ["invitee.created", "invitee.canceled"],
                    "organization": "https://api.calendly.com/organizations/AAAAAAAAAAAAAAAA",
                    "scope": "organization"
                  }
                }
              }
            }
          },
          "description": ""
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ]
      },
      "get": {
        "summary": "List Webhook Subscriptions",
        "operationId": "get-webhooks",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "collection": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1webhook_subscriptions/post/responses/201/content/application~1json/schema/properties/resource"
                      }
                    },
                    "pagination": {
                      "$ref": "#/paths/~1event_types/get/responses/200/content/application~1json/schema/properties/pagination"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/INVALID_ARGUMENT"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/PERMISSION_DENIED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "description": "Get a list of Webhook Subscriptions for an Organization or User with a UUID.",
        "tags": ["Webhooks"],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uri"
            },
            "in": "query",
            "name": "organization",
            "description": "Indicates if the results should be filtered by organization",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "format": "uri"
            },
            "in": "query",
            "name": "user",
            "description": "Indicates if the results should be filtered by user. This parameter is only required if the `scope` parameter is set to `user`."
          },
          {
            "$ref": "#/components/parameters/PageToken"
          },
          {
            "$ref": "#/components/parameters/Count"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "sort",
            "description": "Order results by the specified field and direction. Accepts comma-separated list of {field}:{direction} values.\nSupported fields are: created_at.\nSort direction is specified as: asc, desc."
          },
          {
            "schema": {
              "type": "string",
              "enum": ["organization", "user"]
            },
            "in": "query",
            "name": "scope",
            "description": "Filter the list by organization or user",
            "required": true
          },
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ]
      }
    },
    "/webhook_subscriptions/{webhook_uuid}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "webhook_uuid",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get Webhook Subscription",
        "tags": ["Webhooks"],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "resource": {
                      "$ref": "#/paths/~1webhook_subscriptions/post/responses/201/content/application~1json/schema/properties/resource"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/PERMISSION_DENIED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          }
        },
        "operationId": "get-users-user_uuid-webhooks-webhook_uuid",
        "description": "Get a Webhook Subscription for an Organization or User with a specified UUID.",
        "security": [
          {
            "oauth2": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ]
      },
      "delete": {
        "summary": "Delete Webhook Subscription",
        "operationId": "delete-users-user_uuid-webhooks-webhook_uuid",
        "description": "Delete a Webhook Subscription for an Organization or User with a specified UUID.",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "$ref": "#/components/responses/UNAUTHENTICATED"
          },
          "403": {
            "$ref": "#/components/responses/PERMISSION_DENIED"
          },
          "404": {
            "$ref": "#/components/responses/NOT_FOUND"
          },
          "500": {
            "$ref": "#/components/responses/UNKNOWN"
          }
        },
        "tags": ["Webhooks"],
        "security": [
          {
            "oauth2": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://auth.calendly.com/oauth/authorize",
            "tokenUrl": "https://auth.calendly.com/oauth/token",
            "scopes": {},
            "refreshUrl": "https://auth.calendly.com/oauth/token"
          }
        }
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "description": "Information about the user.",
        "title": "User",
        "properties": {
          "uri": {
            "type": "string",
            "format": "uri",
            "description": "Canonical reference (unique identifier) for the user",
            "example": "https://api.calendly.com/users/012345678901234567890"
          },
          "name": {
            "type": "string",
            "description": "The user's name (human-readable format)"
          },
          "slug": {
            "type": "string",
            "description": "The portion of URL for the user's scheduling page (where invitees book sessions), rendered in a human-readable format"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The user's email address"
          },
          "scheduling_url": {
            "type": "string",
            "format": "uri",
            "description": "The URL of the user's Calendly landing page (that lists all the user's event types)"
          },
          "timezone": {
            "type": "string",
            "example": "America/New York",
            "description": "The time zone offset to use when presenting time to the user"
          },
          "avatar_url": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "description": "The URL of the user's avatar (image)",
            "example": "https://01234567890.cloudfront.net/uploads/user/avatar/0123456/a1b2c3d4.png"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2019-01-02T03:04:05.678Z",
            "description": "The moment when the user's record was created (e.g. \"2020-01-02T03:04:05.678Z\")"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2019-08-07T06:05:04.321Z",
            "description": "The moment when the user's record was last updated (e.g. \"2020-01-02T03:04:05.678Z\")"
          }
        },
        "required": [
          "uri",
          "name",
          "slug",
          "email",
          "scheduling_url",
          "timezone",
          "avatar_url",
          "created_at",
          "updated_at"
        ]
      },
      "Event": {
        "type": "object",
        "description": "Information about a scheduled meeting",
        "title": "Event",
        "properties": {
          "uri": {
            "type": "string",
            "format": "uri",
            "description": "Canonical reference (unique identifier) for the resource"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "description": "The event name"
          },
          "status": {
            "type": "string",
            "enum": ["active", "canceled"],
            "description": "Indicates if the event is \"active\" or \"canceled\""
          },
          "start_time": {
            "type": "string",
            "format": "date-time",
            "description": "The moment the event was scheduled to start (e.g. \"2020-01-02T03:04:05.678Z\")"
          },
          "end_time": {
            "type": "string",
            "format": "date-time",
            "description": "The moment the event was scheduled to end (e.g. \"2020-01-02T03:04:05.678Z\")"
          },
          "event_type": {
            "type": "string",
            "description": "The event type associated with this event",
            "format": "uri",
            "example": "https://api.calendly.com/event_types/GBGBDCAADAEDCRZ2"
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "invitees_counter": {
            "type": "object",
            "required": ["total", "active", "limit"],
            "properties": {
              "total": {
                "type": "number",
                "description": "Total invitees for an event, including invitees that have canceled"
              },
              "active": {
                "type": "number",
                "description": "Total invitees for an event that have not canceled"
              },
              "limit": {
                "type": "number",
                "description": "Maximum number of active invitees that can book the event"
              }
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The moment when the event was created (e.g. \"2020-01-02T03:04:05.678Z\")",
            "example": "2019-01-02T03:04:05.678Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The moment when the event was last updated (e.g. \"2020-01-02T03:04:05.678Z\")",
            "example": "2019-01-02T03:04:05.678Z"
          }
        },
        "required": [
          "uri",
          "name",
          "status",
          "start_time",
          "end_time",
          "event_type",
          "location",
          "invitees_counter",
          "created_at",
          "updated_at"
        ]
      },
      "Location": {
        "description": "The polymorphic base type for an event location that Calendly supports",
        "nullable": true,
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "physical": "#/components/schemas/InPersonMeeting",
            "outbound_call": "#/components/schemas/OutboundCall",
            "inbound_call": "#/components/schemas/InboundCall",
            "google_conference": "#/components/schemas/GoogleConference",
            "zoom_conference": "#/components/schemas/ZoomConference",
            "gotomeeting_conference": "#/components/schemas/GotoMeetingConference",
            "microsoft_teams_conference": "#/components/schemas/MicrosoftTeamsConference",
            "custom": "#/components/schemas/CustomLocation",
            "ask_invitee": "#/components/schemas/InviteeSpecifiedLocation"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/InPersonMeeting"
          },
          {
            "$ref": "#/components/schemas/OutboundCall"
          },
          {
            "$ref": "#/components/schemas/InboundCall"
          },
          {
            "$ref": "#/components/schemas/GoogleConference"
          },
          {
            "$ref": "#/components/schemas/ZoomConference"
          },
          {
            "$ref": "#/components/schemas/GotoMeetingConference"
          },
          {
            "$ref": "#/components/schemas/MicrosoftTeamsConference"
          },
          {
            "$ref": "#/components/schemas/CustomLocation"
          },
          {
            "$ref": "#/components/schemas/InviteeSpecifiedLocation"
          }
        ],
        "title": "Location"
      },
      "InPersonMeeting": {
        "description": "Information about the physical (in-person) event location",
        "type": "object",
        "title": "In-Person Meeting",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["physical"],
            "description": "Indicates that the event host (publisher) will call the invitee"
          },
          "location": {
            "description": "The physical location specified by the event host (publisher)",
            "type": "string"
          }
        },
        "required": ["type", "location"]
      },
      "OutboundCall": {
        "description": "Meeting publisher will call the Invitee",
        "type": "object",
        "title": "Outbound Call",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["outbound_call"],
            "description": "Indicates that the event host (publisher) will call the invitee"
          },
          "location": {
            "nullable": true,
            "type": "string",
            "description": "The phone number the event host (publisher) will use to call the invitee"
          }
        },
        "required": ["type", "location"]
      },
      "InboundCall": {
        "description": "Invitee will call meeting publisher at the specified phone number",
        "type": "object",
        "title": "Inbound Call",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["inbound_call"],
            "description": "\t\nIndicates that the invitee will call the event host"
          },
          "location": {
            "description": "The phone number the invitee will use to call the event host (publisher)",
            "type": "string"
          }
        },
        "required": ["type", "location"]
      },
      "GoogleConference": {
        "description": "Details about an Event that will take place using a Google Meet / Hangout conference",
        "type": "object",
        "title": "Google Conference",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["google_conference"],
            "description": "The event location is a Google Meet or Hangouts conference"
          },
          "status": {
            "type": "string",
            "enum": ["initiated", "processing", "pushed", "failed"],
            "description": "Indicates the current status of the Google conference"
          },
          "join_url": {
            "nullable": true,
            "type": "string",
            "description": "Google conference meeting url",
            "format": "uri"
          }
        },
        "required": ["type", "status", "join_url"]
      },
      "ZoomConference": {
        "description": "Meeting will take place in a Zoom conference",
        "type": "object",
        "title": "Zoom Conference",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["zoom_conference"],
            "description": "The event location is a Zoom conference"
          },
          "status": {
            "type": "string",
            "description": "Indicates the current status of the Zoom conference",
            "enum": ["initiated", "processing", "pushed", "failed"]
          },
          "join_url": {
            "nullable": true,
            "type": "string",
            "description": "Zoom meeting url",
            "format": "uri"
          },
          "data": {
            "description": "The conference metadata supplied by Zoom",
            "nullable": true,
            "type": "object",
            "properties": {
              "id": {
                "description": "The conference ID provided by Zoom",
                "type": "string"
              },
              "settings": {
                "type": "object",
                "properties": {
                  "global_dial_in_numbers": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "number": {
                          "type": "string",
                          "description": "Phone number"
                        },
                        "country": {
                          "type": "string",
                          "description": "Country code"
                        },
                        "type": {
                          "type": "string"
                        },
                        "city": {
                          "type": "string"
                        },
                        "country_name": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "extra": {
                "description": "",
                "type": "object",
                "properties": {
                  "intl_numbers_url": {
                    "type": "string",
                    "description": "Zoom International Dial-in Numbers URL",
                    "format": "uri"
                  }
                }
              },
              "password": {
                "type": "string",
                "description": "Zoom meeting password",
                "format": "password"
              }
            }
          }
        },
        "required": ["type", "status", "join_url", "data"]
      },
      "MicrosoftTeamsConference": {
        "description": "Meeting will take place in a Microsoft Teams conference",
        "type": "object",
        "title": "Microsoft Teams Conference",
        "properties": {
          "type": {
            "type": "string",
            "description": "The event location is a Zoom conference",
            "enum": ["microsoft_teams_conference"]
          },
          "status": {
            "type": "string",
            "description": "Indicates the current status of the Microsoft Teams conference",
            "enum": ["initiated", "processing", "pushed", "failed"]
          },
          "join_url": {
            "nullable": true,
            "type": "string",
            "description": "Microsoft Teams meeting url",
            "format": "uri"
          },
          "data": {
            "description": "The conference metadata supplied by Microsoft Teams",
            "nullable": true,
            "type": "object",
            "properties": {
              "id": {
                "description": "The conference ID provided by Microsoft Teams",
                "type": "string"
              },
              "audioConferencing": {
                "nullable": true,
                "type": "object",
                "properties": {
                  "conferenceId": {
                    "type": "string"
                  },
                  "dialinUrl": {
                    "type": "string",
                    "format": "uri"
                  },
                  "tollNumber": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "required": ["type", "status", "join_url", "data"]
      },
      "GotoMeetingConference": {
        "description": "Details about an Event that will take place using a GotoMeeting conference",
        "type": "object",
        "title": "GoToMeeting Conference",
        "properties": {
          "type": {
            "type": "string",
            "description": "The event location is a GoToMeeting conference",
            "enum": ["gotomeeting"]
          },
          "status": {
            "description": "Indicates the current status of the GoToMeeting conference",
            "type": "string",
            "enum": ["initiated", "processing", "pushed", "failed"]
          },
          "join_url": {
            "nullable": true,
            "type": "string",
            "description": "GoToMeeting conference meeting url",
            "format": "uri"
          },
          "data": {
            "nullable": true,
            "description": "The conference metadata supplied by GoToMeeting",
            "type": "object",
            "properties": {
              "uniqueMeetingId": {
                "type": "number",
                "description": "Canonical reference (unique identifier) for the GoToMeeting conference"
              },
              "conferenceCallInfo": {
                "type": "string"
              }
            }
          }
        },
        "required": ["type", "status", "join_url", "data"]
      },
      "CustomLocation": {
        "description": "Use this to describe an existing Calendly-supported event location.",
        "type": "object",
        "title": "Custom Location",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["custom"],
            "description": "The event location doesn't fall into a standard category defined by the event host (publisher)"
          },
          "location": {
            "nullable": true,
            "description": "The location description provided by the event host (publisher)",
            "type": "string"
          }
        },
        "required": ["type", "location"]
      },
      "InviteeSpecifiedLocation": {
        "description": "Information about an event location thatâ€™s specified by the invitee.",
        "type": "object",
        "title": "Invitee Specified Location",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["ask_invitee"],
            "description": "The event location selected by the invitee"
          },
          "location": {
            "description": "The event location description provided by the invitee",
            "type": "string"
          }
        },
        "required": ["type", "location"]
      },
      "EventType": {
        "type": "object",
        "description": "A configuration for an Event",
        "title": "Event Type",
        "properties": {
          "uri": {
            "description": "Canonical reference (unique identifier) for the event type",
            "type": "string",
            "format": "uri",
            "example": "https://api.calendly.com/event-types/012345678901234567890"
          },
          "name": {
            "description": "The event type name (in human-readable format)",
            "type": "string",
            "example": "Sample Event Type",
            "nullable": true
          },
          "active": {
            "description": "Indicates if the event is active or not.",
            "type": "boolean"
          },
          "slug": {
            "description": "The portion of the event type's URL that identifies a specific web page (in a human-readable format)",
            "type": "string",
            "nullable": true,
            "example": "sample-event-type"
          },
          "scheduling_url": {
            "description": "The URL of the userâ€™s scheduling site where invitees book this event type",
            "type": "string",
            "format": "uri",
            "example": "https://calendly.com/calendly-user/sample-event-type"
          },
          "duration": {
            "description": "The length of sessions booked with this event type",
            "type": "number",
            "example": 30
          },
          "kind": {
            "description": "Indicates if the event type is \"solo\" (belongs to an individual user) or \"group\"",
            "type": "string",
            "enum": ["solo", "group"]
          },
          "pooling_type": {
            "description": "Indicates if the event type is \"round robin\" (alternates between hosts) or \"collective\" (invitees pick a time when all participants are available) or \"null\" (the event type doesnâ€™t consider the availability of a group participants)",
            "type": "string",
            "nullable": true,
            "enum": ["round_robin", "collective"]
          },
          "type": {
            "description": "Indicates if the event type is \"AdhocEventType\" (ad hoc event) or \"StandardEventType\" (standard event type)",
            "type": "string",
            "enum": ["StandardEventType", "AdhocEventType"]
          },
          "color": {
            "description": "The hexadecimal color value of the event type's scheduling page",
            "type": "string",
            "pattern": "^#[a-f\\d]{6}$",
            "example": "#fff200"
          },
          "created_at": {
            "description": "The moment the event type was created (e.g. \"2020-01-02T03:04:05.678Z\")",
            "type": "string",
            "format": "date-time",
            "example": "2019-01-02T03:04:05.678Z"
          },
          "updated_at": {
            "description": "The moment the event type was last updated (e.g. \"2020-01-02T03:04:05.678Z\")",
            "type": "string",
            "format": "date-time",
            "example": "2019-08-07T06:05:04.321Z"
          },
          "internal_note": {
            "type": "string",
            "description": "Contents of a note that may be associated with the event type",
            "nullable": true
          },
          "description_plain": {
            "description": "The event type's description (in non formatted text)",
            "type": "string",
            "nullable": true
          },
          "description_html": {
            "description": "The event type's description (formatted with HTML)",
            "type": "string",
            "nullable": true
          },
          "profile": {
            "$ref": "#/components/schemas/Profile"
          }
        },
        "required": [
          "uri",
          "name",
          "active",
          "slug",
          "scheduling_url",
          "duration",
          "kind",
          "pooling_type",
          "type",
          "color",
          "created_at",
          "updated_at",
          "internal_note",
          "description_plain",
          "description_html",
          "profile"
        ]
      },
      "Profile": {
        "type": "object",
        "nullable": true,
        "description": "The profile of the User that's associated with the Event Type (note: some event types don't have user profiles)",
        "title": "Profile",
        "properties": {
          "type": {
            "type": "string",
            "description": "Indicates if the profile belongs to a \"user\" (individual) or \"team\"",
            "enum": ["User", "Team"]
          },
          "name": {
            "type": "string",
            "description": "Human-readable name for the profile of the user that's associated with the event type",
            "example": "Tamara Jones"
          },
          "owner": {
            "type": "string",
            "description": "The unique reference to the user associated with the profile",
            "format": "uri",
            "example": "https://api.calendly.com/users/ABC123"
          }
        },
        "required": ["type", "name", "owner"]
      },
      "Invitee": {
        "type": "object",
        "description": "An individual who has been invited to meet with a Calendly member",
        "title": "Invitee",
        "properties": {
          "uri": {
            "type": "string",
            "format": "uri",
            "description": "Canonical reference (unique identifier) for the invitee"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The inviteeâ€™s email address"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "description": "The inviteeâ€™s name (in human-readable format)"
          },
          "status": {
            "type": "string",
            "enum": ["active", "canceled"],
            "description": "Indicates if the event is \"active\" or \"canceled\""
          },
          "questions_and_answers": {
            "type": "array",
            "description": "A collection of the invitee's responses to questions on the event booking confirmation form",
            "minItems": 0,
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/InviteeQuestionAndAnswer"
            }
          },
          "timezone": {
            "type": "string",
            "nullable": true,
            "description": "Time zone offset (from UTC) to use when displaying time  to the invitee"
          },
          "event": {
            "type": "string",
            "format": "uri",
            "description": "A reference to the event",
            "example": "https://api.calendly.com/scheduled_events/ABC123"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2019-01-02T03:04:05.678Z",
            "description": "The moment when the event was created (e.g. \"2020-01-02T03:04:05.678Z\")"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2019-08-07T06:05:04.321Z",
            "description": "The moment when the event was last updated (e.g. \"2020-01-02T03:04:05.678Z\")"
          },
          "tracking": {
            "$ref": "#/components/schemas/InviteeTracking"
          },
          "text_reminder_number": {
            "type": "string",
            "nullable": true,
            "example": "+1 404-555-1234",
            "description": "The phone number to use when sending text (SMS) reminders"
          },
          "rescheduled": {
            "type": "boolean",
            "description": "Indicates if this invitee has rescheduled. If `true`, a reference to the new Invitee instance is provided in the `new_invitee` field."
          },
          "old_invitee": {
            "nullable": true,
            "type": "string",
            "format": "uri",
            "description": "Reference to old Invitee instance that got rescheduled"
          },
          "new_invitee": {
            "nullable": true,
            "type": "string",
            "format": "uri",
            "description": "Link to new invitee, after reschedule"
          }
        },
        "required": [
          "uri",
          "email",
          "name",
          "status",
          "questions_and_answers",
          "timezone",
          "event",
          "created_at",
          "updated_at",
          "tracking",
          "text_reminder_number",
          "rescheduled",
          "old_invitee",
          "new_invitee"
        ]
      },
      "OrganizationMembership": {
        "type": "object",
        "title": "Organization Membership",
        "properties": {
          "uri": {
            "type": "string",
            "format": "uri",
            "description": "Canonical reference (unique identifier) for the membership",
            "example": "https://api.calendly.com/organization_memberships/ABC123"
          },
          "role": {
            "type": "string",
            "description": "The user's role in the organization",
            "enum": ["user", "admin", "owner"]
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "organization": {
            "type": "string",
            "format": "uri",
            "description": "A unique reference to the organization",
            "example": "https://api.calendly.com/organizations/012345678901234567890"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2019-08-07T06:05:04.321Z",
            "description": "The moment when the membership record was last updated (e.g. \"2020-01-02T03:04:05.678Z\")"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2019-01-02T03:04:05.678Z",
            "description": "The moment when the membership record was created (e.g. \"2020-01-02T03:04:05.678Z\")"
          }
        },
        "required": ["uri", "role", "user", "organization", "updated_at", "created_at"]
      },
      "InviteeQuestionAndAnswer": {
        "title": "Invitee Question and Answer",
        "type": "object",
        "description": "A response to a question on a booking page form",
        "properties": {
          "question": {
            "type": "string",
            "description": "A question on the invitee's booking form"
          },
          "answer": {
            "type": "string",
            "description": "The invitee's answer to the question"
          },
          "position": {
            "type": "number",
            "description": "The position of the question in relation to others on the booking form"
          }
        },
        "required": ["question", "answer", "position"]
      },
      "InviteeTracking": {
        "title": "Invitee Tracking",
        "type": "object",
        "description": "The UTM and Salesforce tracking parameters associated with an Invitee",
        "properties": {
          "utm_campaign": {
            "type": "string",
            "nullable": true,
            "description": "The UTM parameter used to track a campaign"
          },
          "utm_source": {
            "type": "string",
            "nullable": true,
            "description": "The UTM parameter that identifies the source (platform where the traffic originates)"
          },
          "utm_medium": {
            "type": "string",
            "nullable": true,
            "description": "The UTM parameter that identifies the type of input (e.g. Cost Per Click (CPC), social media, affiliate or QR code)"
          },
          "utm_content": {
            "type": "string",
            "nullable": true,
            "description": "UTM content tracking parameter"
          },
          "utm_term": {
            "type": "string",
            "nullable": true,
            "description": "The UTM parameter used to track keywords"
          },
          "salesforce_uuid": {
            "type": "string",
            "nullable": true,
            "description": "The Salesforce record unique identifier"
          }
        },
        "required": ["utm_campaign", "utm_source", "utm_medium", "utm_content", "utm_term", "salesforce_uuid"]
      }
    },
    "responses": {
      "INVALID_ARGUMENT": {
        "description": "Request is not valid",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/responses/UNKNOWN/content/application~1json/schema/allOf/0"
                },
                {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string",
                      "enum": ["Invalid Argument"]
                    },
                    "message": {
                      "type": "string",
                      "enum": ["The supplied parameters are invalid."]
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "UNAUTHENTICATED": {
        "description": "Cannot authenticate caller",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/responses/UNKNOWN/content/application~1json/schema/allOf/0"
                },
                {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string",
                      "enum": ["Unauthenticated"]
                    },
                    "message": {
                      "type": "string",
                      "enum": [
                        "The access token is invalid",
                        "The access token expired",
                        "The access token was revoked"
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "PERMISSION_DENIED": {
        "description": "Caller not authorized to perform this action",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/responses/UNKNOWN/content/application~1json/schema/allOf/0"
                },
                {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string",
                      "enum": ["Permission Denied"]
                    },
                    "message": {
                      "type": "string",
                      "enum": [
                        "This user is not in your organization",
                        "You do not have permission",
                        "You do not have permission to access this resource.",
                        "You are not allowed to view this event",
                        "Please upgrade your Calendly account to Premium",
                        "Unauthorized"
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "NOT_FOUND": {
        "description": "Requested resource not found",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/responses/UNKNOWN/content/application~1json/schema/allOf/0"
                },
                {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string",
                      "enum": ["Resource Not Found"]
                    },
                    "message": {
                      "type": "string",
                      "enum": ["The server could not find the requested resource."]
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "UNKNOWN": {
        "description": "An error has occurred on the server",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "title": "Error Response",
                  "type": "object",
                  "description": "Error Object",
                  "properties": {
                    "title": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "parameter": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        },
                        "required": ["message"]
                      }
                    }
                  },
                  "required": ["title", "message"]
                },
                {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string",
                      "enum": ["Internal Server Error"]
                    },
                    "message": {
                      "type": "string",
                      "enum": [
                        "The server encountered an unexpected condition that prevented it from fulfilling the request."
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "parameters": {
      "Count": {
        "name": "count",
        "description": "The number of rows to return",
        "in": "query",
        "schema": {
          "type": "number",
          "default": 20,
          "minimum": 1
        }
      },
      "PageToken": {
        "name": "page_token",
        "description": "The token to pass to get the next portion of the collection",
        "in": "query",
        "schema": {
          "type": "string"
        }
      },
      "Authorization": {
        "name": "Authorization",
        "required": true,
        "description": "Authorization header",
        "in": "header",
        "schema": {
          "type": "string",
          "default": "Bearer YOUR_ACCESS_TOKEN"
        }
      }
    }
  }
}
