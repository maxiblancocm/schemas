{
  "openapi": "3.0.0",
  "info": {
    "title": "1inch",
    "version": "4",
    "description": "",
    "contact": {},
    "x-categories": ["exchanges"]
  },
  "paths": {
    "/v4.0/{network}/healthcheck": {
      "get": {
        "x-ignore": true,
        "operationId": "FactoryHealthCheckController_healthcheck",
        "summary": "API health check",
        "parameters": [{ "$ref": "#/components/parameters/network" }],
        "responses": {
          "200": { "description": "Always returns code 200 if API is stable" }
        },
        "tags": ["Healthcheck"]
      }
    },
    "/v4.0/{network}/approve/spender": {
      "get": {
        "operationId": "ChainApproveController_getSpender",
        "summary": "Get 1inch router address",
        "description": "Address of the 1inch router that must be trusted to spend funds for the exchange",
        "parameters": [{ "$ref": "#/components/parameters/network" }],
        "responses": {
          "200": {
            "description": "Address of the 1inch router that must be trusted to spend funds for the exchange",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApproveSpenderResponseDto"
                }
              }
            }
          }
        },
        "tags": ["Approve"]
      }
    },
    "/v4.0/{network}/approve/transaction": {
      "get": {
        "operationId": "ChainApproveController_getCallData",
        "summary": "Get approve transaction data",
        "description": "Generate data for calling the contract in order to allow the 1inch router to spend funds",
        "parameters": [
          { "$ref": "#/components/parameters/network" },
          {
            "name": "tokenAddress",
            "required": true,
            "in": "query",
            "description": "Token address you want to exchange",
            "schema": { "type": "string" }
          },
          {
            "name": "amount",
            "required": false,
            "in": "query",
            "example": "100000000000",
            "description": "The number of tokens that the 1inch router is allowed to spend.If not specified, it will be allowed to spend an infinite amount of tokens.",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction body to allow the exchange with the 1inch router",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApproveCalldataResponseDto"
                }
              }
            }
          }
        },
        "tags": ["Approve"]
      }
    },
    "/v4.0/{network}/approve/allowance": {
      "get": {
        "operationId": "ChainApproveController_getAllowance",
        "summary": "Get current allowance",
        "description": "Get the number of tokens that the 1inch router is allowed to spend",
        "parameters": [
          { "$ref": "#/components/parameters/network" },
          {
            "name": "tokenAddress",
            "required": true,
            "in": "query",
            "description": "Token address you want to exchange",
            "schema": { "type": "string" }
          },
          {
            "name": "walletAddress",
            "required": true,
            "in": "query",
            "description": "Wallet address for which you want to check",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["Approve"]
      }
    },
    "/v4.0/{network}/tokens": {
      "get": {
        "x-actionOnly": true,
        "operationId": "ChainTokensController_getTokens",
        "summary": "List supported tokens",
        "description": "List of tokens that are available for swap in the 1inch Aggregation protocol",
        "parameters": [{ "$ref": "#/components/parameters/network" }],
        "responses": {
          "200": {
            "description": "All supported tokens (can also use your own)",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TokensResponseDto" }
              }
            }
          }
        },
        "tags": ["Info"]
      }
    },
    "/v4.0/{network}/presets": {
      "get": {
        "x-ignore": true,
        "operationId": "ChainPresetsController_getPresets",
        "summary": "List preset configurations",
        "description": "List of preset configurations for the 1inch router",
        "parameters": [{ "$ref": "#/components/parameters/network" }],
        "responses": { "200": { "description": "" } },
        "tags": ["Info"]
      }
    },
    "/v4.0/{network}/liquidity-sources": {
      "get": {
        "x-actionOnly": true,
        "operationId": "ChainProtocolsController_getProtocolsImages",
        "summary": "List liquidity sources",
        "description": "List of liquidity sources that are available for routing in the 1inch Aggregation protocol",
        "parameters": [{ "$ref": "#/components/parameters/network" }],
        "responses": {
          "200": {
            "description": "All supported protocols public",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProtocolsResponseDto"
                }
              }
            }
          }
        },
        "tags": ["Info"]
      }
    },
    "/v4.0/{network}/quote": {
      "get": {
        "operationId": "ExchangeController_getQuote",
        "summary": "Get quote",
        "description": "Find the best quote to exchange via 1inch router",
        "parameters": [
          { "$ref": "#/components/parameters/network" },
          {
            "name": "fromTokenAddress",
            "required": true,
            "in": "query",
            "description": "contract address of a token to sell",
            "example": "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE",
            "schema": { "type": "string" }
          },
          {
            "name": "toTokenAddress",
            "required": true,
            "in": "query",
            "description": "contract address of a token to buy",
            "example": "0x111111111117dc0aa78b770fa6a738034120c302",
            "schema": { "type": "string" }
          },
          {
            "name": "amount",
            "required": true,
            "in": "query",
            "description": "amount of a token to sell, set in minimal divisible units e.g.: 1.00 DAI set as 1000000000000000000; 51.03 USDC set as 51030000",
            "example": "10000000000000000",
            "schema": { "type": "string" }
          },
          {
            "name": "protocols",
            "required": false,
            "in": "query",
            "description": "specify liquidity protocols. If not set, all liquidity protocols will be used; you can disable any protocol by listing all protocols except those you don't need; default: all",
            "schema": { "type": "string" }
          },
          {
            "name": "fee",
            "required": false,
            "in": "query",
            "description": "this percentage of fromTokenAddress token amount will be sent to referrerAddress, the rest will be used as input for a swap; Min: 0; max: 3; Max: 0; max: 3; default: 0;  !should be the same for quote and swap!",
            "schema": { "type": "string" }
          },
          {
            "name": "gasLimit",
            "required": false,
            "in": "query",
            "description": "maximum amount of gas for a swap; should be the same for a quote and swap",
            "schema": { "type": "integer" }
          },
          {
            "name": "connectorTokens",
            "required": false,
            "in": "query",
            "description": "token-connectors can be specified via this parameter. The more is set — the longer route estimation will take. If not set, default token-connectors will be used. If a token you want to exchange doesn't have a pool with one of the default token-connectors this parameter will help find the route; max: 5; !should be the same for quote and swap!",
            "allowEmptyValue": true,
            "schema": { "type": "string" }
          },
          {
            "name": "complexityLevel",
            "required": false,
            "in": "query",
            "description": "maximum number of token-connectors to be used in a transaction. The more is used — the longer route estimation will take, the more complex route might be as a result. If not set, two token-connectors may be used; min: 0; max: 3; default: 2; !should be the same for quote and swap!",
            "schema": { "type": "string" }
          },
          {
            "name": "mainRouteParts",
            "required": false,
            "in": "query",
            "description": "maximum amount of gas for a swap; default: 10; max: 50; should be the same for quote and swap",
            "schema": { "type": "number" }
          },
          {
            "name": "parts",
            "required": false,
            "in": "query",
            "description": "limit maximum number of parts each main route parts can be split into; default: 50; max: 100; should be the same for quote and swap",
            "schema": { "type": "number" }
          },
          {
            "name": "gasPrice",
            "required": false,
            "in": "query",
            "description": "1inch takes in account gas expenses to determine exchange route. It is important to use the same gas price on the quote and swap methods. default: \"fast\" from network",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Quote",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/QuoteResponseDto" }
              }
            }
          },
          "400": {
            "description": "One of the following errors: <br><br>Insufficient liquidity<br>Cannot estimate<br>You may not have enough ETH balance for gas fee<br>FromTokenAddress cannot be equals to toTokenAddress<br>Cannot estimate. Don't forget about miner fee. Try to leave the buffer of ETH for gas<br>Not enough balance<br>Not enough allowance",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SwapErrorDto" }
              }
            }
          }
        },
        "tags": ["Swap"]
      }
    },
    "/v4.0/{network}/swap": {
      "get": {
        "operationId": "ExchangeController_getSwap",
        "summary": "Get swap data",
        "description": "Generate data for calling the 1inch router for exchange",
        "parameters": [
          { "$ref": "#/components/parameters/network" },
          {
            "name": "fromTokenAddress",
            "required": true,
            "in": "query",
            "description": "contract address of a token to sell",
            "example": "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE",
            "schema": { "type": "string" }
          },
          {
            "name": "toTokenAddress",
            "required": true,
            "in": "query",
            "description": "contract address of a token to buy",
            "example": "0x111111111117dc0aa78b770fa6a738034120c302",
            "schema": { "type": "string" }
          },
          {
            "name": "amount",
            "required": true,
            "in": "query",
            "description": "amount of a token to sell, set in minimal divisible units e.g.: 1.00 DAI set as 1000000000000000000; 51.03 USDC set as 51030000",
            "example": "10000000000000000",
            "schema": { "type": "string" }
          },
          {
            "name": "fromAddress",
            "required": true,
            "in": "query",
            "description": "address of a seller, make sure that this address has approved to spend fromTokenAddress in needed amount",
            "schema": { "type": "string" }
          },
          {
            "name": "slippage",
            "required": true,
            "in": "query",
            "description": "limit of price slippage you are willing to accept in percentage, may be set with decimals. 0.5 means 0.5% slippage is acceptable. Low values increase chances that transaction will fail, high values increase chances of front running. min: 0; max: 50;",
            "example": 1,
            "schema": { "type": "number" }
          },
          {
            "name": "protocols",
            "required": false,
            "in": "query",
            "description": "specify liquidity protocols. If not set, all liquidity protocols will be used; you can disable any protocol by listing all protocols except those you don't need; default: all",
            "schema": { "type": "string" }
          },
          {
            "name": "destReceiver",
            "required": false,
            "in": "query",
            "description": "Receiver of destination currency. default: fromAddress",
            "schema": { "type": "string" }
          },
          {
            "name": "referrerAddress",
            "required": false,
            "in": "query",
            "description": "",
            "schema": { "type": "string" }
          },
          {
            "name": "fee",
            "required": false,
            "in": "query",
            "description": "this percentage of fromTokenAddress token amount will be sent to referrerAddress, the rest will be used as input for a swap; Min: 0; max: 3; Max: 0; max: 3; default: 0;  !should be the same for quote and swap!",
            "schema": { "type": "string" }
          },
          {
            "name": "disableEstimate",
            "required": false,
            "in": "query",
            "description": "",
            "schema": { "type": "boolean" }
          },
          {
            "name": "permit",
            "required": false,
            "in": "query",
            "description": "https://eips.ethereum.org/EIPS/eip-2612",
            "schema": { "type": "string" }
          },
          {
            "name": "burnChi",
            "required": false,
            "in": "query",
            "description": "default: false; Suggest to check user's balance and allowance before set this flag; CHI should be approved to spender address",
            "schema": { "type": "boolean" }
          },
          {
            "name": "allowPartialFill",
            "required": false,
            "in": "query",
            "description": "",
            "schema": { "type": "boolean" }
          },
          {
            "name": "parts",
            "required": false,
            "in": "query",
            "description": "limit maximum number of parts each main route parts can be split into; default: 50; max: 100; should be the same for quote and swap",
            "schema": { "type": "number" }
          },
          {
            "name": "mainRouteParts",
            "required": false,
            "in": "query",
            "description": "maximum amount of gas for a swap; default: 10; max: 50; should be the same for quote and swap",
            "schema": { "type": "number" }
          },
          {
            "name": "connectorTokens",
            "required": false,
            "in": "query",
            "description": "token-connectors can be specified via this parameter. The more is set — the longer route estimation will take. If not set, default token-connectors will be used. If a token you want to exchange doesn't have a pool with one of the default token-connectors this parameter will help find the route; max: 5; !should be the same for quote and swap!",
            "allowEmptyValue": true,
            "schema": { "type": "string" }
          },
          {
            "name": "complexityLevel",
            "required": false,
            "in": "query",
            "description": "maximum number of token-connectors to be used in a transaction. The more is used — the longer route estimation will take, the more complex route might be as a result. If not set, two token-connectors may be used; min: 0; max: 3; default: 2; !should be the same for quote and swap!",
            "schema": { "type": "string" }
          },
          {
            "name": "gasLimit",
            "required": false,
            "in": "query",
            "description": "maximum amount of gas for a swap; should be the same for a quote and swap",
            "schema": { "type": "integer" }
          },
          {
            "name": "gasPrice",
            "required": false,
            "in": "query",
            "description": "1inch takes in account gas expenses to determine exchange route. It is important to use the same gas price on the quote and swap methods. default: \"fast\" from network",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Swap",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SwapResponseDto" }
              }
            }
          },
          "400": {
            "description": "One of the following errors: <br><br>Insufficient liquidity<br>Cannot estimate<br>You may not have enough ETH balance for gas fee<br>FromTokenAddress cannot be equals to toTokenAddress<br>Cannot estimate. Don't forget about miner fee. Try to leave the buffer of ETH for gas<br>Not enough balance<br>Not enough allowance",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SwapErrorDto" }
              }
            }
          }
        },
        "tags": ["Swap"]
      }
    }
  },
  "tags": [],
  "servers": [{ "url": "https://api.1inch.io" }],
  "components": {
    "schemas": {
      "ApproveSpenderResponseDto": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "Address of the 1inch router that must be trusted to spend funds for the exchange"
          }
        },
        "required": ["address"]
      },
      "ApproveCalldataResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "description": "The encoded data to call the approve method on the swapped token contract"
          },
          "gasPrice": {
            "type": "string",
            "description": "Gas price for fast transaction processing"
          },
          "to": {
            "type": "string",
            "description": "Token address that will be allowed to exchange through 1inch router",
            "example": "0x6b175474e89094c44da98b954eedeac495271d0f"
          },
          "value": {
            "type": "string",
            "description": "Native token value in WEI (for approve is always 0)"
          }
        },
        "required": ["data", "gasPrice", "to", "value"]
      },
      "TokenDto": {
        "type": "object",
        "properties": {
          "symbol": { "type": "string" },
          "name": { "type": "string" },
          "address": { "type": "string" },
          "decimals": { "type": "number" },
          "logoURI": { "type": "string" }
        },
        "required": ["symbol", "name", "address", "decimals", "logoURI"]
      },
      "TokensResponseDto": {
        "type": "object",
        "properties": {
          "tokens": {
            "description": "List of supported tokens",
            "type": "array",
            "items": { "$ref": "#/components/schemas/TokenDto" }
          }
        },
        "required": ["tokens"]
      },
      "ProtocolImageDto": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "Protocol id" },
          "title": { "type": "string", "description": "Protocol title" },
          "img": { "type": "string", "description": "Protocol logo image" },
          "img_color": {
            "type": "string",
            "description": "Protocol logo image in color"
          }
        },
        "required": ["id", "title", "img", "img_color"]
      },
      "ProtocolsResponseDto": {
        "type": "object",
        "properties": {
          "protocols": {
            "description": "List of protocols that are available for routing in the 1inch Aggregation protocol",
            "type": "array",
            "items": { "$ref": "#/components/schemas/ProtocolImageDto" }
          }
        },
        "required": ["protocols"]
      },
      "PathViewDto": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "part": { "type": "number" },
          "fromTokenAddress": { "type": "string" },
          "toTokenAddress": { "type": "string" }
        },
        "required": ["name", "part", "fromTokenAddress", "toTokenAddress"]
      },
      "QuoteResponseDto": {
        "type": "object",
        "properties": {
          "fromToken": {
            "description": "Source token info",
            "allOf": [{ "$ref": "#/components/schemas/TokenDto" }]
          },
          "toToken": {
            "description": "Destination token info",
            "allOf": [{ "$ref": "#/components/schemas/TokenDto" }]
          },
          "toTokenAmount": {
            "type": "string",
            "description": "Expected amount of destination token"
          },
          "fromTokenAmount": {
            "type": "string",
            "description": "Amount of source token"
          },
          "protocols": {
            "description": "Selected protocols in a path",
            "type": "array",
            "items": { "$ref": "#/components/schemas/PathViewDto" }
          },
          "estimatedGas": { "type": "number" }
        },
        "required": [
          "fromToken",
          "toToken",
          "toTokenAmount",
          "fromTokenAmount",
          "protocols",
          "estimatedGas"
        ]
      },
      "NestErrorMeta": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of field",
            "example": "fromTokenAddress"
          },
          "value": {
            "type": "object",
            "description": "Value of field",
            "example": "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee"
          }
        },
        "required": ["type", "value"]
      },
      "SwapErrorDto": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "description": "HTTP code",
            "example": 400
          },
          "error": {
            "type": "string",
            "description": "Error code description",
            "example": "Bad Request"
          },
          "description": {
            "type": "string",
            "description": "Error description (one of the following)"
          },
          "requestId": { "type": "string", "description": "Request id" },
          "meta": {
            "description": "Meta information",
            "type": "array",
            "items": { "$ref": "#/components/schemas/NestErrorMeta" }
          }
        },
        "required": ["statusCode", "error", "description", "requestId", "meta"]
      },
      "Tx": {
        "type": "object",
        "properties": {
          "from": { "type": "string" },
          "to": { "type": "string" },
          "data": { "type": "string" },
          "value": { "type": "string" },
          "gasPrice": { "type": "string" },
          "gas": { "type": "string" }
        },
        "required": ["from", "to", "data", "value", "gasPrice", "gas"]
      },
      "SwapResponseDto": {
        "type": "object",
        "properties": {
          "fromToken": {
            "description": "Source token info",
            "allOf": [{ "$ref": "#/components/schemas/TokenDto" }]
          },
          "toToken": {
            "description": "Destination token info",
            "allOf": [{ "$ref": "#/components/schemas/TokenDto" }]
          },
          "toTokenAmount": {
            "type": "string",
            "description": "Expected amount of destination token"
          },
          "fromTokenAmount": {
            "type": "string",
            "description": "Amount of source token"
          },
          "protocols": {
            "description": "Selected protocols in a path",
            "type": "array",
            "items": { "type": "string" }
          },
          "tx": {
            "description": "Transaction object",
            "allOf": [{ "$ref": "#/components/schemas/Tx" }]
          }
        },
        "required": [
          "fromToken",
          "toToken",
          "toTokenAmount",
          "fromTokenAmount",
          "protocols",
          "tx"
        ]
      }
    },
    "parameters": {
      "network": {
        "name": "network",
        "in": "path",
        "description": "Blockchain Network",
        "required": true,
        "schema": {
          "type": "integer",
          "oneOf": [
            { "title": "Ethereum", "x-const": 1 },
            { "title": "BNB Chain (BSC)", "x-const": 56 },
            { "title": "Polygon", "x-const": 137 },
            { "title": "Optimism", "x-const": 10 },
            { "title": "Arbitrum", "x-const": 42161 },
            { "title": "Gnosis Chain", "x-const": 10 },
            { "title": "Avalanche", "x-const": 43114 },
            { "title": "Fantom", "x-const": 250 }
          ]
        }
      }
    }
  }
}
