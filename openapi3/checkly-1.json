{
  "openapi": "3.0.0",
  "info": {
    "title": "Checkly",
    "version": "V1 (beta)",
    "description": "Delightful Active Monitoring for the Modern Stack",
    "x-categories": ["monitoring"],
    "x-logo": { "url": "https://flowoid.s3.amazonaws.com/logos/checkly.svg" }
  },
  "security": [{ "Bearer": [] }],
  "tags": [],
  "paths": {
    "/v1/alert-channels": {
      "get": {
        "summary": "List all alert channels",
        "operationId": "getV1Alertchannels",
        "description": "Lists all configured alert channels and their subscribed checks.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Limit the number of results"
          },
          {
            "description": "Page number",
            "name": "page",
            "in": "query",
            "schema": { "type": "number", "default": 1 }
          }
        ],
        "tags": ["Alert channels"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AlertChannelsList" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create an alert channel",
        "operationId": "postV1Alertchannels",
        "description": "Creates a new alert channel",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "name": "x-checkly-account",
            "in": "header",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/AlertChannelCreate"
        },
        "tags": ["Alert channels"],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AlertChannel" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnauthorizedError" }
              }
            }
          },
          "402": {
            "description": "Payment Required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRequiredError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/alert-channels/{id}": {
      "get": {
        "summary": "Retrieve an alert channel",
        "operationId": "getV1AlertchannelsId",
        "description": "Show details of a specific alert channel.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "number" },
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer" }
          }
        ],
        "tags": ["Alert channels"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AlertChannel" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an alert channel",
        "operationId": "deleteV1AlertchannelsId",
        "description": "Permanently removes an alert channel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer" }
          }
        ],
        "tags": ["Alert channels"],
        "responses": {
          "204": { "description": "No Content" },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnauthorizedError" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update an alert channel",
        "operationId": "putV1AlertchannelsId",
        "description": "Update an alert channel",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "name": "x-checkly-account",
            "in": "header",
            "schema": { "type": "string" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/AlertChannelCreate"
        },
        "tags": ["Alert channels"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AlertChannel" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnauthorizedError" }
              }
            }
          },
          "402": {
            "description": "Payment Required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRequiredError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/alert-channels/{id}/subscriptions": {
      "put": {
        "summary": "Update the subscriptions of an alert channel",
        "operationId": "putV1AlertchannelsIdSubscriptions",
        "description": "Update the subscriptions of an alert channel. Use this to add a check to an alert channel so failure and recovery alerts are send out for that check.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "number" },
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SubscriptionSchema" }
            }
          }
        },
        "tags": ["Alert channels"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SubscriptionSchema" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/check-groups": {
      "get": {
        "summary": "List all check groups",
        "operationId": "getV1Checkgroups",
        "description": "Lists all current check groups in your account. The \"checks\" property is an array of check UUID's for convenient referencing. It is read only and you cannot use it to add checks to a group.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 1,
              "maximum": 100
            },
            "description": "Limit the number of results"
          },
          {
            "description": "Page number",
            "name": "page",
            "in": "query",
            "schema": { "type": "number", "default": 1 }
          }
        ],
        "tags": ["Check groups"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CheckGroupList" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a check group",
        "operationId": "postV1Checkgroups",
        "description": "Creates a new check group. You can add checks to the group by setting the \"groupId\" property of individual checks.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model_5" }
            }
          }
        },
        "tags": ["Check groups"],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_2" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "402": {
            "description": "Payment Required",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "name": "x-checkly-account",
            "in": "header",
            "schema": { "type": "string" }
          },
          {
            "description": "Determines whether a new check will automatically be added as a subscriber to all existing alert channels when it gets created.",
            "name": "autoAssignAlerts",
            "in": "query",
            "schema": { "type": "boolean", "default": true }
          }
        ]
      }
    },
    "/v1/check-groups/{groupId}/checks/{checkId}": {
      "get": {
        "summary": "Retrieve one check in a specific group with group settings applied",
        "operationId": "getV1CheckgroupsGroupidChecksCheckid",
        "description": "Show details of one check in a specific check group with the group settings applied.",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": { "type": "number" },
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general"
          },
          {
            "name": "checkId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "checkId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "tags": ["Check groups"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CheckGroupCheck" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/check-groups/{id}": {
      "delete": {
        "summary": "Delete a check group.",
        "operationId": "deleteV1CheckgroupsId",
        "description": "Permanently removes a check group. You cannot delete a check group if it still contains checks.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "number" }
          }
        ],
        "tags": ["Check groups"],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Retrieve a check group",
        "operationId": "getV1CheckgroupsId",
        "description": "Show details of a specific check group",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "number" },
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer" }
          }
        ],
        "tags": ["Check groups"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_2" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a check group",
        "operationId": "putV1CheckgroupsId",
        "description": "Updates a check group.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "number" },
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer" }
          },
          {
            "description": "Determines whether a new check will automatically be added as a subscriber to all existing alert channels when it gets created.",
            "name": "autoAssignAlerts",
            "in": "query",
            "schema": { "type": "boolean", "default": true }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model_9" }
            }
          }
        },
        "tags": ["Check groups"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_2" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/check-groups/{id}/checks": {
      "get": {
        "summary": "Retrieve all checks in a specific group with group settings applied",
        "operationId": "getV1CheckgroupsIdChecks",
        "description": "Lists all checks in a specific check group with the group settings applied.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "number" },
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "required": true
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 1,
              "maximum": 100
            },
            "description": "Limit the number of results"
          },
          {
            "description": "Page number",
            "name": "page",
            "in": "query",
            "schema": { "type": "number", "default": 1 }
          }
        ],
        "tags": ["Check groups"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckGroupChecksList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/check-results-rolled-up/{checkId}": {
      "get": {
        "summary": "Lists all rolled up check results",
        "operationId": "getV1CheckresultsrolledupCheckid",
        "description": "Lists the rolled up check results *per hour* for a specific check. <br><br>This means that one hour after a raw result for a check is recorded, it is also available in the rolled up results. <br><br>The result contains all discrete response times and aggregated counters for failing and successful check. Using this data you can reconstruct averages, percentiles and ratios, approximating the individual raw check results very closely. <br><br>You can filter by check type and result type to narrow down the list. Use the `to` and `from` parameters to specify a date range. Depending on the check type, some fields might be null.<br><br>Note that results from this endpoint start at roughly *2019-4-11*, earlier results are not available.",
        "parameters": [
          {
            "name": "checkId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            }
          },
          { "name": "page", "in": "query", "schema": { "type": "number" } },
          {
            "description": "Provide a data center location, e.g. \"eu-west-1\" to filter by location",
            "name": "location",
            "in": "query",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "description": "Select results up to this UNIX timestamp date, i.e. < date",
            "name": "to",
            "in": "query",
            "required": false,
            "schema": { "type": "number" }
          },
          {
            "description": "Select results from this UNIX timestamp date, i.e. >= date",
            "name": "from",
            "in": "query",
            "required": false,
            "schema": { "type": "number" }
          }
        ],
        "tags": ["Check results (rolled up)"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RolledUpCheckResultsList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          }
        }
      }
    },
    "/v1/check-results/{checkId}": {
      "get": {
        "summary": "Lists all check results",
        "operationId": "getV1CheckresultsCheckid",
        "description": "Lists the full, raw check results for a specific check. We keep raw results for 30 days. After 30 days they are erased. However we keep the rolled up results for an indefinite period. <br><br> You can filter by check type and result type to narrow down the list. Use the `to` and `from` parameters to specify a date range (UNIX timestamp in seconds). Depending on the check type, some fields might be null.",
        "parameters": [
          {
            "name": "checkId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "required": true
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Limit the number of results"
          },
          {
            "description": "Provide a data center location, e.g. \"eu-west-1\" to filter by location",
            "name": "location",
            "in": "query",
            "required": false,
            "schema": { "type": "string", "default": 1 }
          },
          {
            "description": "Select results up to this UNIX timestamp date in seconds, i.e. < date",
            "name": "to",
            "in": "query",
            "required": false,
            "schema": { "type": "number", "format": "date" }
          },
          {
            "description": "Select results from this UNIX timestamp date in seconds, i.e. >= date",
            "name": "from",
            "in": "query",
            "required": false,
            "schema": { "type": "number", "format": "date" }
          },
          {
            "description": "The type of the check",
            "name": "checkType",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "BROWSER",
                "API",
                "us-west-1",
                "us-west-2",
                "ca-central-1",
                "sa-east-1",
                "eu-west-1",
                "eu-central-1",
                "eu-west-2",
                "eu-west-3",
                "eu-north-1",
                "eu-south-1",
                "me-south-1",
                "ap-southeast-1",
                "ap-northeast-1",
                "ap-east-1",
                "ap-southeast-2",
                "ap-southeast-3",
                "ap-northeast-2",
                "ap-northeast-3",
                "ap-south-1",
                "af-south-1"
              ]
            },
            "required": false
          },
          {
            "description": "Check result has one or more failures",
            "name": "hasFailures",
            "in": "query",
            "schema": { "type": "boolean", "enum": ["BROWSER", "API"] }
          },
          {
            "description": "Check result has one or more failures",
            "name": "hasFailures",
            "in": "query",
            "schema": { "type": "boolean" }
          }
        ],
        "tags": ["Check results"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CheckResultsList" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "402": {
            "description": "Payment Required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRequiredError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/check-results/{checkId}/{checkResultId}": {
      "get": {
        "summary": "Retrieve a check result",
        "operationId": "getV1CheckresultsCheckidCheckresultid",
        "description": "Show details of a specific check result.",
        "parameters": [
          {
            "name": "checkId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general"
          },
          {
            "name": "checkResultId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "checkResultId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "tags": ["Check results"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CheckResult" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/check-statuses": {
      "get": {
        "summary": "List all check statuses",
        "operationId": "getV1Checkstatuses",
        "description": "Shows the current status information for all checks in your account. The check status records are continuously updatedas new check results come in.",
        "tags": ["Check status"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CheckStatusList" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "name": "x-checkly-account",
            "in": "header",
            "schema": { "type": "string" }
          }
        ]
      }
    },
    "/v1/check-statuses/{checkId}": {
      "get": {
        "summary": "Retrieve check status details",
        "operationId": "getV1CheckstatusesCheckid",
        "description": "Show the current status information for a specific check.",
        "parameters": [
          {
            "name": "checkId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general"
          },
          {
            "name": "checkId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "tags": ["Check status"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CheckStatus" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/checks": {
      "get": {
        "summary": "List all checks",
        "operationId": "getV1Checks",
        "description": "Lists all current checks in your account.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Limit the number of results"
          },
          {
            "description": "Page number",
            "name": "page",
            "in": "query",
            "schema": { "type": "number", "default": 1 }
          },
          {
            "description": "Filters the results by a string contained in the URL of an API check, for instance a domain like \"www.myapp.com\". Only returns API checks.",
            "name": "apiCheckUrlFilterPattern",
            "in": "query",
            "required": false,
            "schema": { "type": "string", "minLength": 1 }
          }
        ],
        "tags": ["Checks"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CheckList" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a check",
        "operationId": "postV1Checks",
        "description": "Creates a new API or browser check. Will return a `402` when you are over the limit of your plan.\n    When using the `globalAlertSetting`, the `alertSetting` can be `null`",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CheckCreate" }
            }
          }
        },
        "tags": ["Checks"],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Check" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "402": {
            "description": "Payment Required",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "name": "x-checkly-account",
            "in": "header",
            "schema": { "type": "string" }
          },
          {
            "description": "Determines whether a new check will automatically be added as a subscriber to all existing alert channels when it gets created.",
            "name": "autoAssignAlerts",
            "in": "query",
            "schema": { "type": "boolean", "default": true }
          }
        ],
        "deprecated": true
      }
    },
    "/v1/checks/{id}": {
      "delete": {
        "summary": "Delete a check",
        "operationId": "deleteV1ChecksId",
        "description": "Permanently removes a API or browser check and all its related status and results data.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "tags": ["Checks"],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Retrieve a check",
        "operationId": "getV1ChecksId",
        "description": "Show details of a specific API or browser check",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "tags": ["Checks"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Check" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a check",
        "operationId": "putV1ChecksId",
        "description": "Updates a new API or browser check.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Determines whether a new check will automatically be added as a subscriber to all existing alert channels when it gets created.",
            "name": "autoAssignAlerts",
            "in": "query",
            "schema": { "type": "boolean", "default": true }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model_14" }
            }
          }
        },
        "tags": ["Checks"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Check" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/v1/dashboards": {
      "get": {
        "summary": "List all dashboards",
        "operationId": "getV1Dashboards",
        "description": "Lists all current dashboards in your account.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Limit the number of results"
          },
          {
            "description": "Page number",
            "name": "page",
            "in": "query",
            "schema": { "type": "number", "default": 1 }
          }
        ],
        "tags": ["Dashboards"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DashboardsList" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a dashboard",
        "operationId": "postV1Dashboards",
        "description": "Creates a new dashboard. Will return a 409 when attempting to create a dashboard with a custom URL or custom domain that is already taken.",
        "requestBody": { "$ref": "#/components/requestBodies/DashboardSchema" },
        "tags": ["Dashboards"],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DashboardResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "name": "x-checkly-account",
            "in": "header",
            "schema": { "type": "string" }
          }
        ]
      }
    },
    "/v1/dashboards/{id}": {
      "delete": {
        "summary": "Delete a dashboard",
        "operationId": "deleteV1DashboardsId",
        "description": "Permanently removes a dashboard.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "tags": ["Dashboards"],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Retrieve a dashboard",
        "operationId": "getV1DashboardsId",
        "description": "Show details of a specific dashboard.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "tags": ["Dashboards"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DashboardResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a dashboard",
        "operationId": "putV1DashboardsId",
        "description": "Updates a dashboard. Will return a 409 when attempting to create a dashboard with a custom URL or custom domain that is already taken.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": { "$ref": "#/components/requestBodies/DashboardSchema" },
        "tags": ["Dashboards"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DashboardResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          }
        }
      }
    },
    "/v1/maintenance-windows": {
      "get": {
        "summary": "List all maintenance windows",
        "operationId": "getV1Maintenancewindows",
        "description": "Lists all maintenance windows in your account.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Limit the number of results"
          },
          {
            "description": "Page number",
            "name": "page",
            "in": "query",
            "schema": { "type": "number", "default": 1 }
          }
        ],
        "tags": ["Maintenance windows"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceWindowsList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a maintenance window",
        "operationId": "postV1Maintenancewindows",
        "description": "Creates a new maintenance window.",
        "requestBody": { "$ref": "#/components/requestBodies/Model_20" },
        "tags": ["Maintenance windows"],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_18" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "name": "x-checkly-account",
            "in": "header",
            "schema": { "type": "string" }
          }
        ]
      }
    },
    "/v1/maintenance-windows/{id}": {
      "delete": {
        "summary": "Delete a maintenance window",
        "operationId": "deleteV1MaintenancewindowsId",
        "description": "Permanently removes a maintenance window.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer" }
          }
        ],
        "tags": ["Maintenance windows"],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Retrieve a maintenance window",
        "operationId": "getV1MaintenancewindowsId",
        "description": "Show details of a specific maintenance window.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer" }
          }
        ],
        "tags": ["Maintenance windows"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_18" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a maintenance window",
        "operationId": "putV1MaintenancewindowsId",
        "description": "Updates a maintenance window.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer" }
          }
        ],
        "requestBody": { "$ref": "#/components/requestBodies/Model_20" },
        "tags": ["Maintenance windows"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_18" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/snippets": {
      "get": {
        "summary": "List all snippets",
        "operationId": "getV1Snippets",
        "description": "Lists all current snippets in your account.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Limit the number of results"
          },
          {
            "description": "Page number",
            "name": "page",
            "in": "query",
            "schema": { "type": "number", "default": 1 }
          }
        ],
        "tags": ["Snippets"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SnippetsList" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a snippet",
        "operationId": "postV1Snippets",
        "description": "Creates a new snippet.",
        "requestBody": { "$ref": "#/components/requestBodies/SnippetCreate" },
        "tags": ["Snippets"],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Snippet" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "name": "x-checkly-account",
            "in": "header",
            "schema": { "type": "string" }
          }
        ]
      }
    },
    "/v1/snippets/{id}": {
      "delete": {
        "summary": "Delete a snippet",
        "operationId": "deleteV1SnippetsId",
        "description": "Permanently removes a snippet.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "number" }
          }
        ],
        "tags": ["Snippets"],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Retrieve a snippet",
        "operationId": "getV1SnippetsId",
        "description": "Show details of a specific snippet.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "number" },
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer" }
          }
        ],
        "tags": ["Snippets"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Snippet" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a snippet",
        "operationId": "putV1SnippetsId",
        "description": "Updates a snippet.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "number" },
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer" }
          }
        ],
        "requestBody": { "$ref": "#/components/requestBodies/SnippetCreate" },
        "tags": ["Snippets"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Snippet" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/variables": {
      "get": {
        "summary": "List all environment variables",
        "operationId": "getV1Variables",
        "description": "Lists all current environment variables in your account.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Limit the number of results"
          },
          {
            "description": "Page number",
            "name": "page",
            "in": "query",
            "schema": { "type": "number", "default": 1 }
          }
        ],
        "tags": ["Environment variables"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentVariablesList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a environment variable",
        "operationId": "postV1Variables",
        "description": "Creates a new environment variable.",
        "requestBody": {
          "$ref": "#/components/requestBodies/EnvironmentVariable",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/EnvironmentVariable" }
            }
          }
        },
        "tags": ["Environment variables"],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EnvironmentVariable" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "name": "x-checkly-account",
            "in": "header",
            "schema": { "type": "string" }
          }
        ]
      }
    },
    "/v1/variables/{key}": {
      "delete": {
        "summary": "Delete an environment variable",
        "operationId": "deleteV1VariablesKey",
        "description": "Permanently removes an environment variable. Uses the \"key\" field as the ID for deletion.",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "tags": ["Environment variables"],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Retrieve an environment variable",
        "operationId": "getV1VariablesKey",
        "description": "Show details of a specific environment variable. Uses the \"key\" field for selection.",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general"
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "tags": ["Environment variables"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EnvironmentVariable" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a environment variable",
        "operationId": "putV1VariablesKey",
        "description": "Updates an environment variable. Uses the \"key\" field as the ID for updating. Only updates the value.",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general"
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/EnvironmentVariable",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnvironmentVariableUpdate"
              }
            }
          }
        },
        "tags": ["Environment variables"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EnvironmentVariable" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Model_1" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/badges/checks/{checkId}": {
      "get": {
        "operationId": "getV1BadgesChecksCheckid",
        "description": "Get check status badge. You can enable the badges feature in <a href=\"https://app.checklyhq.com/settings/account/general\">account settings</a>",
        "parameters": [
          {
            "name": "checkId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "style",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "flat",
                "plastic",
                "flat-square",
                "for-the-badge",
                "social"
              ],
              "default": "flat"
            }
          },
          {
            "name": "theme",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["light", "dark", "default"],
              "default": "default"
            }
          },
          {
            "name": "responseTime",
            "in": "query",
            "schema": { "type": "boolean", "default": false }
          }
        ],
        "tags": ["Badges"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": { "type": "string", "pattern": "(<svg)([^<]*|[^>]*)" }
              }
            }
          }
        }
      }
    },
    "/v1/badges/groups/{groupId}": {
      "get": {
        "operationId": "getV1BadgesGroupsGroupid",
        "description": "Get group status badge. You can enable the badges feature in <a href=\"https://app.checklyhq.com/settings/account/general\">account settings</a>",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": { "type": "integer" }
          },
          {
            "name": "style",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "flat",
                "plastic",
                "flat-square",
                "for-the-badge",
                "social"
              ],
              "default": "flat"
            }
          },
          {
            "name": "theme",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["light", "dark", "default"],
              "default": "default"
            }
          },
          {
            "name": "responseTime",
            "in": "query",
            "schema": { "type": "boolean", "default": false }
          }
        ],
        "tags": ["Badges"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": { "type": "string", "pattern": "(<svg)([^<]*|[^>]*)" }
              }
            }
          }
        }
      }
    },
    "/v1/check-alerts": {
      "get": {
        "summary": "List all alerts for your account",
        "operationId": "getV1Checkalerts",
        "description": "Lists all alerts for your account.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "name": "x-checkly-account",
            "in": "header",
            "schema": { "type": "string" }
          },
          {
            "description": "Limit the number of results",
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            }
          },
          {
            "description": "Page number",
            "name": "page",
            "in": "query",
            "schema": { "type": "number", "default": 1 }
          },
          {
            "description": "Select documents up from this UNIX timestamp (>= date). Defaults to now - 6 hours.",
            "name": "from",
            "in": "query",
            "required": false,
            "schema": { "type": "string", "format": "date" }
          },
          {
            "description": "Optional. Select alerts up to this UNIX timestamp (< date). Defaults to 6 hours after \"from\".",
            "name": "to",
            "in": "query",
            "required": false,
            "schema": { "type": "string", "format": "date" }
          }
        ],
        "tags": ["Check alerts"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CheckAlertList" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnauthorizedError" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFoundError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/check-alerts/{checkId}": {
      "get": {
        "summary": "List alerts for a specific check",
        "operationId": "getV1CheckalertsCheckid",
        "description": "Lists all the alerts for a specific check.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "name": "x-checkly-account",
            "in": "header",
            "schema": { "type": "string" }
          },
          {
            "name": "checkId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Limit the number of results",
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            }
          },
          {
            "description": "Page number",
            "name": "page",
            "in": "query",
            "schema": { "type": "number", "default": 1 }
          },
          {
            "description": "Select documents up from this UNIX timestamp (>= date). Defaults to now - 6 hours.",
            "name": "from",
            "in": "query",
            "required": false,
            "schema": { "type": "string", "format": "date" }
          },
          {
            "description": "Optional. Select alerts up to this UNIX timestamp (< date). Defaults to 6 hours after \"from\".",
            "name": "to",
            "in": "query",
            "required": false,
            "schema": { "type": "string", "format": "date" }
          }
        ],
        "tags": ["Check alerts"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CheckAlertList" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnauthorizedError" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFoundError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/checks/api": {
      "post": {
        "summary": "Create an API check",
        "operationId": "postV1ChecksApi",
        "description": "Creates a new API check. Will return a `402` when you are over the limit of your plan.\n    When using the `globalAlertSetting`, the `alertSetting` can be `null`",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "name": "x-checkly-account",
            "in": "header",
            "schema": { "type": "string" }
          },
          {
            "description": "Determines whether a new check will automatically be added as a subscriber to all existing alert channels when it gets created.",
            "name": "autoAssignAlerts",
            "in": "query",
            "schema": { "type": "boolean", "default": true }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CheckAPICreate" }
            }
          }
        },
        "tags": ["Checks"],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CheckAPI" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnauthorizedError" }
              }
            }
          },
          "402": {
            "description": "Payment Required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRequiredError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/checks/api/{id}": {
      "put": {
        "summary": "Update an API check",
        "operationId": "putV1ChecksApiId",
        "description": "Updates an API check.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "name": "x-checkly-account",
            "in": "header",
            "schema": { "type": "string" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Determines whether a new check will automatically be added as a subscriber to all existing alert channels when it gets created.",
            "name": "autoAssignAlerts",
            "in": "query",
            "schema": { "type": "boolean", "default": true }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CheckAPIUpdate" }
            }
          }
        },
        "tags": ["Checks"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CheckAPI" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnauthorizedError" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/checks/browser": {
      "post": {
        "summary": "Create a browser check",
        "operationId": "postV1ChecksBrowser",
        "description": "Creates a new browser check. Will return a `402` when you are over the limit of your plan.\n    When using the `globalAlertSetting`, the `alertSetting` can be `null`",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "name": "x-checkly-account",
            "in": "header",
            "schema": { "type": "string" }
          },
          {
            "description": "Determines whether a new check will automatically be added as a subscriber to all existing alert channels when it gets created.",
            "name": "autoAssignAlerts",
            "in": "query",
            "schema": { "type": "boolean", "default": true }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CheckBrowserCreate" }
            }
          }
        },
        "tags": ["Checks"],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CheckBrowser" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnauthorizedError" }
              }
            }
          },
          "402": {
            "description": "Payment Required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRequiredError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/checks/browser/{id}": {
      "put": {
        "summary": "Update a browser check",
        "operationId": "putV1ChecksBrowserId",
        "description": "Updates a browser check.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "name": "x-checkly-account",
            "in": "header",
            "schema": { "type": "string" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Determines whether a new check will automatically be added as a subscriber to all existing alert channels when it gets created.",
            "name": "autoAssignAlerts",
            "in": "query",
            "schema": { "type": "boolean", "default": true }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CheckBrowserUpdate" }
            }
          }
        },
        "tags": ["Checks"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CheckBrowser" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnauthorizedError" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/dashboards/{dashboardId}": {
      "delete": {
        "summary": "Delete a dashboard",
        "operationId": "deleteV1DashboardsDashboardid",
        "description": "Permanently removes a dashboard.",
        "parameters": [
          {
            "name": "dashboardId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "tags": ["Dashboards"],
        "responses": {
          "204": { "description": "No Content" },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnauthorizedError" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Retrieve a dashboard",
        "operationId": "getV1DashboardsDashboardid",
        "description": "Show details of a specific dashboard.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "name": "x-checkly-account",
            "in": "header",
            "schema": { "type": "string" }
          },
          {
            "name": "dashboardId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "tags": ["Dashboards"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Dashboard" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnauthorizedError" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFoundError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a dashboard",
        "operationId": "putV1DashboardsDashboardid",
        "description": "Updates a dashboard. Will return a 409 when attempting to create a dashboard with a custom URL or custom domain that is already taken.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "name": "x-checkly-account",
            "in": "header",
            "schema": { "type": "string" }
          },
          {
            "name": "dashboardId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": { "$ref": "#/components/requestBodies/DashboardCreate" },
        "tags": ["Dashboards"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Dashboard" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnauthorizedError" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFoundError" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ConflictError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/locations": {
      "get": {
        "summary": "Lists all supported locations",
        "operationId": "getV1Locations",
        "description": "Lists all supported locationss.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "name": "x-checkly-account",
            "in": "header",
            "schema": { "type": "string" }
          }
        ],
        "tags": ["Location"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LocationList" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/private-locations": {
      "get": {
        "summary": "List all private locations",
        "operationId": "getV1Privatelocations",
        "description": "Lists all private locations in your account.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "name": "x-checkly-account",
            "in": "header",
            "schema": { "type": "string" }
          }
        ],
        "tags": ["Private locations"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/privateLocationsListSchema"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnauthorizedError" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a private location",
        "operationId": "postV1Privatelocations",
        "description": "Creates a new private location.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "name": "x-checkly-account",
            "in": "header",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/privateLocationCreate" }
            }
          }
        },
        "tags": ["Private locations"],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/commonPrivateLocationSchemaResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnauthorizedError" }
              }
            }
          },
          "402": {
            "description": "Payment Required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRequiredError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/private-locations/{id}": {
      "delete": {
        "summary": "Remove a private location",
        "operationId": "deleteV1PrivatelocationsId",
        "description": "Permanently removes a private location.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "name": "x-checkly-account",
            "in": "header",
            "schema": { "type": "string" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "tags": ["Private locations"],
        "responses": {
          "204": { "description": "No Content" },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnauthorizedError" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Retrieve a private location",
        "operationId": "getV1PrivatelocationsId",
        "description": "Show details of a specific private location.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "name": "x-checkly-account",
            "in": "header",
            "schema": { "type": "string" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "tags": ["Private locations"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/privateLocationsSchema"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnauthorizedError" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFoundError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a private location",
        "operationId": "putV1PrivatelocationsId",
        "description": "Updates a private location.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "name": "x-checkly-account",
            "in": "header",
            "schema": { "type": "string" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/privateLocationUpdate" }
            }
          }
        },
        "tags": ["Private locations"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/commonPrivateLocationSchemaResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnauthorizedError" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/private-locations/{id}/keys": {
      "post": {
        "summary": "Generate a new API Key for a private location",
        "operationId": "postV1PrivatelocationsIdKeys",
        "description": "Creates an api key on the private location.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "name": "x-checkly-account",
            "in": "header",
            "schema": { "type": "string" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "tags": ["Private locations"],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/privateLocationKeys" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnauthorizedError" }
              }
            }
          },
          "402": {
            "description": "Payment Required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRequiredError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/private-locations/{id}/keys/{keyId}": {
      "delete": {
        "summary": "Remove an existing API key for a private location",
        "operationId": "deleteV1PrivatelocationsIdKeysKeyid",
        "description": "Permanently removes an api key from a private location.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "name": "x-checkly-account",
            "in": "header",
            "schema": { "type": "string" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "keyId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "tags": ["Private locations"],
        "responses": {
          "204": { "description": "No Content" },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnauthorizedError" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/private-locations/{id}/metrics": {
      "get": {
        "summary": "Get private location health metrics from a window of time.",
        "operationId": "getV1PrivatelocationsIdMetrics",
        "description": "Get private location health metrics from a window of time.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "name": "x-checkly-account",
            "in": "header",
            "schema": { "type": "string" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Select metrics beginning with this UNIX timestamp. Must be less than 15 days ago.",
            "name": "from",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "format": "date" }
          },
          {
            "description": "Select metrics up to this UNIX timestamp.",
            "name": "to",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "format": "date" }
          }
        ],
        "tags": ["Private locations"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/privateLocationsMetricsHistoryResponseSchema"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnauthorizedError" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/reporting": {
      "get": {
        "summary": "Generates a report with aggregate statistics for checks and check groups.",
        "operationId": "getV1Reporting",
        "description": "Generates a report with aggregated statistics for all checks or a filtered set of checks over a specified time window.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "name": "x-checkly-account",
            "in": "header",
            "schema": { "type": "string" }
          },
          {
            "description": "Custom start time of reporting window in unix timestamp format. Setting a custom \"from\" timestamp overrides the use of any \"presetWindow\".",
            "name": "from",
            "in": "query",
            "required": false,
            "schema": { "type": "string", "format": "date" }
          },
          {
            "description": "Custom end time of reporting window in unix timestamp format. Setting a custom \"to\" timestamp overrides the use of any \"presetWindow\".",
            "name": "to",
            "in": "query",
            "required": false,
            "schema": { "type": "string", "format": "date" }
          },
          {
            "description": "Preset reporting windows are used for quickly generating report on commonly used windows. Can be overridden by using a custom \"to\" and \"from\" timestamp.",
            "name": "presetWindow",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "last24Hrs",
                "last7Days",
                "last30Days",
                "thisWeek",
                "thisMonth",
                "lastWeek",
                "lastMonth"
              ],
              "default": "last24Hrs"
            }
          },
          {
            "description": "Use tags to filter the checks you want to see in your report.",
            "name": "filterByTags",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": { "type": "string" },
              "default": []
            }
          },
          {
            "description": "Filter checks by activated status.",
            "name": "deactivated",
            "in": "query",
            "required": false,
            "schema": { "type": "boolean", "default": false }
          }
        ],
        "tags": ["Reporting"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ReportingList" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnauthorizedError" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/runtimes": {
      "get": {
        "summary": "Lists all supported runtimes",
        "operationId": "getV1Runtimes",
        "description": "Lists all supported runtimes and the included NPM packages for Browser checks and setup & teardown scripts for API checks.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "name": "x-checkly-account",
            "in": "header",
            "schema": { "type": "string" }
          }
        ],
        "tags": ["Runtimes"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RuntimeList" }
              }
            }
          },
          "429": { "description": "Too Many Requests" }
        }
      }
    },
    "/v1/runtimes/{id}": {
      "get": {
        "summary": "Shows details for one specific runtime",
        "operationId": "getV1RuntimesId",
        "description": "Shows the details of all included NPM packages and their version for one specific runtime",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "name": "x-checkly-account",
            "in": "header",
            "schema": { "type": "string" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "tags": ["Runtimes"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Runtime" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NotFoundError" }
              }
            }
          },
          "429": { "description": "Too Many Requests" }
        }
      }
    },
    "/v1/triggers/check-groups/{groupId}": {
      "delete": {
        "summary": "Delete the check group trigger",
        "operationId": "deleteV1TriggersCheckgroupsGroupid",
        "description": "Deletes the check groups trigger",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": { "type": "integer" }
          }
        ],
        "tags": ["Triggers"],
        "responses": {
          "204": { "description": "No Content" },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnauthorizedError" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get the check group trigger",
        "operationId": "getV1TriggersCheckgroupsGroupid",
        "description": "Finds the check group trigger",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "name": "x-checkly-account",
            "in": "header",
            "schema": { "type": "string" }
          },
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": { "type": "integer" }
          }
        ],
        "tags": ["Triggers"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CheckGroupTrigger" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnauthorizedError" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create the check group trigger",
        "operationId": "postV1TriggersCheckgroupsGroupid",
        "description": "Creates the check group trigger",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "name": "x-checkly-account",
            "in": "header",
            "schema": { "type": "string" }
          },
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": { "type": "integer" }
          }
        ],
        "tags": ["Triggers"],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CheckGroupTrigger" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnauthorizedError" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/triggers/checks/{checkId}": {
      "delete": {
        "summary": "Delete the check trigger",
        "operationId": "deleteV1TriggersChecksCheckid",
        "description": "Deletes the check trigger",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "name": "x-checkly-account",
            "in": "header",
            "schema": { "type": "string" }
          },
          {
            "name": "checkId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "tags": ["Triggers"],
        "responses": {
          "204": { "description": "No Content" },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnauthorizedError" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get the check trigger",
        "operationId": "getV1TriggersChecksCheckid",
        "description": "Finds the check trigger",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "name": "x-checkly-account",
            "in": "header",
            "schema": { "type": "string" }
          },
          {
            "name": "checkId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "tags": ["Triggers"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CheckTrigger" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnauthorizedError" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create the check trigger",
        "operationId": "postV1TriggersChecksCheckid",
        "description": "Creates the check trigger",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "name": "x-checkly-account",
            "in": "header",
            "schema": { "type": "string" }
          },
          {
            "name": "checkId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "tags": ["Triggers"],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CheckTrigger" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnauthorizedError" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/reporting/browser-checks/{id}": {
      "get": {
        "summary": "Generates a customizable report for all Browser Check metrics. Allows aggregations like sum and p99. [ALPHA] ",
        "operationId": "getV2ReportingBrowserchecksId",
        "description": "Generates a report with aggregated or non-aggregated statistics for a specific Browser Check over a specified time window.",
        "parameters": [
          {
            "description": "Your Checkly account ID, you can find it at https://app.checklyhq.com/settings/account/general",
            "name": "x-checkly-account",
            "in": "header",
            "schema": { "type": "string" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Custom start time of reporting window in unix timestamp format. Setting a custom \"from\" timestamp overrides the use of any \"presetWindow\".",
            "name": "from",
            "in": "query",
            "required": false,
            "schema": { "type": "string", "format": "date" }
          },
          {
            "description": "Custom end time of reporting window in unix timestamp format. Setting a custom \"to\" timestamp overrides the use of any \"presetWindow\".",
            "name": "to",
            "in": "query",
            "required": false,
            "schema": { "type": "string", "format": "date" }
          },
          {
            "description": "Preset reporting windows are used for quickly generating report on commonly used windows. Can be overridden by using a custom \"to\" and \"from\" timestamp.",
            "name": "presetWindow",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "last24Hours",
                "last7Days",
                "last30Days",
                "thisWeek",
                "thisMonth",
                "lastWeek",
                "lastMonth"
              ],
              "default": "last24Hours"
            }
          },
          {
            "description": "The time interval to use for aggregating metrics in minutes. For example, five minutes is 300, 24 hours is 1440.",
            "name": "aggregationInterval",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 43200,
              "default": 1440
            }
          },
          {
            "description": "Determines how the series data is grouped.",
            "name": "groupBy",
            "in": "query",
            "required": false,
            "schema": { "type": "string", "enum": ["runLocation", "page"] }
          },
          {
            "description": "Use status to filter for check either failing or successful check result data.",
            "name": "filterByStatus",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": { "type": "string", "enum": ["success", "failure"] },
              "default": []
            }
          },
          {
            "description": "metrics options for browser checks",
            "name": "metrics",
            "in": "query",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "TTFB",
                  "FCP",
                  "LCP",
                  "CLS",
                  "TBT",
                  "consoleErrors",
                  "networkErrors",
                  "userScriptErrors",
                  "documentErrors",
                  "TTFB_avg",
                  "TTFB_max",
                  "TTFB_median",
                  "TTFB_min",
                  "TTFB_p90",
                  "TTFB_p95",
                  "TTFB_p99",
                  "TTFB_stddev",
                  "TTFB_sum",
                  "FCP_avg",
                  "FCP_max",
                  "FCP_median",
                  "FCP_min",
                  "FCP_p90",
                  "FCP_p95",
                  "FCP_p99",
                  "FCP_stddev",
                  "FCP_sum",
                  "LCP_avg",
                  "LCP_max",
                  "LCP_median",
                  "LCP_min",
                  "LCP_p90",
                  "LCP_p95",
                  "LCP_p99",
                  "LCP_stddev",
                  "LCP_sum",
                  "CLS_avg",
                  "CLS_max",
                  "CLS_median",
                  "CLS_min",
                  "CLS_p90",
                  "CLS_p95",
                  "CLS_p99",
                  "CLS_stddev",
                  "CLS_sum",
                  "TBT_avg",
                  "TBT_max",
                  "TBT_median",
                  "TBT_min",
                  "TBT_p90",
                  "TBT_p95",
                  "TBT_p99",
                  "TBT_stddev",
                  "TBT_sum",
                  "consoleErrors_avg",
                  "consoleErrors_max",
                  "consoleErrors_median",
                  "consoleErrors_min",
                  "consoleErrors_p90",
                  "consoleErrors_p95",
                  "consoleErrors_p99",
                  "consoleErrors_stddev",
                  "consoleErrors_sum",
                  "networkErrors_avg",
                  "networkErrors_max",
                  "networkErrors_median",
                  "networkErrors_min",
                  "networkErrors_p90",
                  "networkErrors_p95",
                  "networkErrors_p99",
                  "networkErrors_stddev",
                  "networkErrors_sum",
                  "userScriptErrors_avg",
                  "userScriptErrors_max",
                  "userScriptErrors_median",
                  "userScriptErrors_min",
                  "userScriptErrors_p90",
                  "userScriptErrors_p95",
                  "userScriptErrors_p99",
                  "userScriptErrors_stddev",
                  "userScriptErrors_sum",
                  "documentErrors_avg",
                  "documentErrors_max",
                  "documentErrors_median",
                  "documentErrors_min",
                  "documentErrors_p90",
                  "documentErrors_p95",
                  "documentErrors_p99",
                  "documentErrors_stddev",
                  "documentErrors_sum"
                ]
              }
            }
          }
        ],
        "tags": ["Reporting"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/attributes" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnauthorizedError" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ForbiddenError" }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          }
        }
      }
    }
  },
  "servers": [{ "url": "https://api.checklyhq.com/" }],
  "components": {
    "requestBodies": {
      "SnippetCreate": {
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/SnippetCreate" }
          }
        }
      },
      "DashboardSchema": {
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/DashboardSchema" }
          }
        }
      },
      "Model_20": {
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Model_20" }
          }
        }
      },
      "EnvironmentVariable": {
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/EnvironmentVariable" }
          }
        }
      },
      "AlertChannelCreate": {
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/AlertChannelCreate" }
          }
        }
      },
      "DashboardCreate": {
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/DashboardCreate" }
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "name": "Authorization",
        "in": "header",
        "description": "The Checkly Public API uses API keys to authenticate requests. You can get the API Key <a href=\"https://app.checklyhq.com/settings/user/api-keys\" target=\"_blank\">here</a>.</br>Your API key is like a password: <br>keep it secure!</br></br>Authentication to the API is performed using the Bearer auth method in the Authorization header and using the account ID.</br></br>For example, set <b>Authorization</b> header while using cURL: <code>curl -H \"Authorization: Bearer [apiKey]\" \"X-Checkly-Account: [accountId]\"</code></br>"
      }
    },
    "schemas": {
      "config": { "type": "object" },
      "SubscriptionSchema": {
        "type": "object",
        "properties": {
          "id": { "type": "number" },
          "checkId": { "type": "string" },
          "activated": { "type": "boolean" }
        },
        "required": ["checkId", "activated"]
      },
      "subscriptions": {
        "type": "array",
        "description": "All checks subscribed to this channel.",
        "items": { "$ref": "#/components/schemas/SubscriptionSchema" }
      },
      "AlertChannel": {
        "type": "object",
        "properties": {
          "id": { "type": "number", "example": 1 },
          "type": {
            "type": "string",
            "description": "The type of alert channel, i.e. EMAIL or SLACK.",
            "example": "SMS"
          },
          "config": { "$ref": "#/components/schemas/config" },
          "subscriptions": { "$ref": "#/components/schemas/subscriptions" },
          "created_at": { "type": "string", "format": "date" },
          "updated_at": { "type": "string", "format": "date" },
          "sendRecovery": { "type": "boolean" },
          "sendFailure": { "type": "boolean" },
          "sendDegraded": { "type": "boolean" },
          "sslExpiry": {
            "type": "boolean",
            "description": "Determines if an alert should be send for expiring SSL certificates.",
            "default": false
          },
          "sslExpiryThreshold": {
            "type": "integer",
            "description": "At what moment in time to start alerting on SSL certificates.",
            "default": 30,
            "minimum": 1,
            "maximum": 30
          }
        }
      },
      "AlertChannelsList": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/AlertChannel" }
      },
      "tags": { "type": "array", "items": { "type": "string" } },
      "locations": { "type": "array", "items": { "type": "string" } },
      "KeyValue": {
        "type": "object",
        "properties": {
          "key": { "type": "string" },
          "value": { "type": "string", "default": "" },
          "locked": { "type": "boolean", "default": false }
        },
        "required": ["key", "value"]
      },
      "Headers": {
        "type": "array",
        "default": [],
        "items": { "$ref": "#/components/schemas/KeyValue" }
      },
      "QueryParameters": {
        "type": "array",
        "default": [],
        "items": { "$ref": "#/components/schemas/KeyValue" }
      },
      "Assertions": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string",
            "enum": [
              "STATUS_CODE",
              "JSON_BODY",
              "HEADERS",
              "TEXT_BODY",
              "RESPONSE_TIME"
            ]
          },
          "property": { "type": "string", "default": "" },
          "comparison": {
            "type": "string",
            "enum": [
              "EQUALS",
              "NOT_EQUALS",
              "HAS_KEY",
              "NOT_HAS_KEY",
              "HAS_VALUE",
              "NOT_HAS_VALUE",
              "IS_EMPTY",
              "NOT_EMPTY",
              "GREATER_THAN",
              "LESS_THAN",
              "CONTAINS",
              "NOT_CONTAINS",
              "IS_NULL",
              "NOT_NULL"
            ]
          },
          "target": { "type": "string", "default": "" }
        }
      },
      "assertions": {
        "type": "array",
        "description": "Check the main Checkly documentation on assertions for specific values like regular expressions and JSON path descriptors you can use in the \"property\" field.",
        "default": [],
        "items": {
          "$ref": "#/components/schemas/Assertions",
          "type": "string"
        },
        "example": [{ "source": "STATUS_CODE", "target": 200 }]
      },
      "basicAuth": {
        "type": "object",
        "properties": {
          "username": { "type": "string", "default": "" },
          "password": { "type": "string", "default": "" }
        },
        "required": ["username", "password"]
      },
      "apiCheckDefaults": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "The base url for this group which you can reference with the {{GROUP_BASE_URL}} variable in all group checks.",
            "default": ""
          },
          "headers": { "$ref": "#/components/schemas/Headers" },
          "queryParameters": { "$ref": "#/components/schemas/QueryParameters" },
          "assertions": { "$ref": "#/components/schemas/assertions" },
          "basicAuth": { "$ref": "#/components/schemas/basicAuth" }
        }
      },
      "browserCheckDefaults": { "type": "object" },
      "EnvironmentVariable": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The key of the environment variable (this value cannot be changed).",
            "example": "API_KEY"
          },
          "value": {
            "type": "string",
            "default": "",
            "description": "The value of the environment variable.",
            "example": "bAxD7biGCZL6K60Q"
          },
          "locked": {
            "type": "boolean",
            "description": "Used only in the UI to hide the value like a password ",
            "default": false
          }
        },
        "required": ["key", "value"]
      },
      "environmentVariables": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/EnvironmentVariable" },
        "description": "Key/value pairs for setting environment variables during check execution. Use global environment variables whenever possible.",
        "example": []
      },
      "runBasedEscalation": {
        "type": "object",
        "properties": {
          "failedRunThreshold": {
            "type": "number",
            "description": "After how many failed consecutive check runs an alert notification should be send",
            "default": 1,
            "enum": [1, 2, 3, 4, 5]
          }
        }
      },
      "timeBasedEscalation": {
        "type": "object",
        "properties": {
          "minutesFailingThreshold": {
            "type": "number",
            "description": "After how many minutes after a check starts failing an alert should be send",
            "default": 5,
            "enum": [5, 10, 15, 30]
          }
        }
      },
      "reminders": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "How many reminders to send out after the initial alert notification",
            "default": 0,
            "enum": [0, 1, 2, 3, 4, 5, 100000]
          },
          "interval": {
            "type": "number",
            "description": "At what interval the reminders should be send",
            "default": 5,
            "enum": [5, 10, 15, 30]
          }
        }
      },
      "sslCertificates": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Determines if alert notifications should be send for expiring SSL certificates",
            "default": true
          },
          "alertThreshold": {
            "type": "integer",
            "description": "At what moment in time to start alerting on SSL certificates",
            "default": 30,
            "minimum": 1,
            "maximum": 30
          }
        }
      },
      "AlertSettingsSchema": {
        "type": "object",
        "default": {
          "escalationType": "RUN_BASED",
          "runBasedEscalation": { "failedRunThreshold": 1 },
          "timeBasedEscalation": { "minutesFailingThreshold": 5 },
          "reminders": { "amount": 0, "interval": 5 },
          "sslCertificates": { "enabled": false, "alertThreshold": 30 }
        },
        "enum": [{}],
        "properties": {
          "escalationType": {
            "type": "string",
            "description": "Determines what type of escalation to use",
            "default": "RUN_BASED",
            "enum": ["RUN_BASED", "TIME_BASED"]
          },
          "runBasedEscalation": {
            "$ref": "#/components/schemas/runBasedEscalation"
          },
          "timeBasedEscalation": {
            "$ref": "#/components/schemas/timeBasedEscalation"
          },
          "reminders": { "$ref": "#/components/schemas/reminders" },
          "sslCertificates": { "$ref": "#/components/schemas/sslCertificates" }
        }
      },
      "AlertChannelSubscription": {
        "type": "object",
        "properties": {
          "alertChannelId": { "type": "number" },
          "activated": { "type": "boolean", "default": true }
        },
        "required": ["alertChannelId", "activated"]
      },
      "alertChannelSubscriptions": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/AlertChannelSubscription" }
      },
      "CheckGroupList": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model_2" }
      },
      "Tags": {
        "type": "array",
        "description": "Tags for organizing and filtering checks",
        "items": { "type": "string" }
      },
      "Locations": {
        "type": "array",
        "description": "An array of one or more data center locations where to run the checks",
        "default": ["us-east-1"],
        "minItems": 1,
        "items": {
          "type": "string",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "ca-central-1",
            "sa-east-1",
            "eu-west-1",
            "eu-central-1",
            "eu-west-2",
            "eu-west-3",
            "eu-north-1",
            "eu-south-1",
            "me-south-1",
            "ap-southeast-1",
            "ap-northeast-1",
            "ap-east-1",
            "ap-southeast-2",
            "ap-northeast-2",
            "ap-south-1",
            "af-south-1"
          ]
        }
      },
      "request": {
        "type": "object",
        "properties": {
          "method": {
            "type": "string",
            "default": "GET",
            "enum": ["GET", "POST", "PUT", "HEAD", "DELETE", "PATCH"],
            "example": "GET"
          },
          "url": {
            "type": "string",
            "default": "localhost",
            "example": "https://api.checklyhq.com"
          },
          "followRedirects": { "type": "boolean" },
          "body": { "type": "string", "default": "" },
          "bodyType": {
            "type": "string",
            "default": "NONE",
            "enum": ["NONE", "JSON", "FORM", "RAW", "GRAPHQL"]
          },
          "headers": { "$ref": "#/components/schemas/Headers" },
          "queryParameters": { "$ref": "#/components/schemas/QueryParameters" },
          "assertions": { "$ref": "#/components/schemas/assertions" },
          "basicAuth": { "$ref": "#/components/schemas/basicAuth" },
          "data": { "type": "string", "example": "" },
          "params": { "$ref": "#/components/schemas/params" }
        },
        "required": ["method", "url"],
        "description": "The request for the API."
      },
      "EnvironmentVariables": {
        "type": "array",
        "description": "Key/value pairs for setting environment variables during check execution. These are only relevant for Browser checks. Use global environment variables whenever possible.",
        "items": { "$ref": "#/components/schemas/EnvironmentVariable" }
      },
      "AlertEmail": {
        "type": "object",
        "properties": { "address": { "type": "string", "default": "" } },
        "required": ["address"]
      },
      "email": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/AlertEmail" }
      },
      "AlertWebhook": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "default": "" },
          "url": { "type": "string", "default": "" },
          "method": {
            "type": "string",
            "default": "POST",
            "enum": ["GET", "POST", "PUT", "HEAD", "DELETE", "PATCH"]
          },
          "headers": { "$ref": "#/components/schemas/Headers" },
          "queryParameters": { "$ref": "#/components/schemas/QueryParameters" }
        },
        "required": ["url"]
      },
      "webhook": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/AlertWebhook" }
      },
      "AlertSlack": {
        "type": "object",
        "properties": { "url": { "type": "string", "default": "" } },
        "required": ["url"]
      },
      "slack": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/AlertSlack" }
      },
      "AlertSms": {
        "type": "object",
        "properties": {
          "number": { "type": "string", "default": "" },
          "name": { "type": "string" }
        },
        "required": ["number", "name"]
      },
      "sms": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/AlertSms" }
      },
      "AlertChannels": {
        "type": "object",
        "properties": {
          "email": { "$ref": "#/components/schemas/email" },
          "webhook": { "$ref": "#/components/schemas/webhook" },
          "slack": { "$ref": "#/components/schemas/slack" },
          "sms": { "$ref": "#/components/schemas/sms" }
        }
      },
      "CheckGroupCheck": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "name": {
            "type": "string",
            "description": "The name of the check",
            "example": "Check"
          },
          "checkType": {
            "type": "string",
            "description": "The type of the check",
            "enum": ["BROWSER", "API"]
          },
          "frequency": {
            "type": "number",
            "enum": [5, 10, 15, 30, 60, 720, 1440],
            "required": ["frequency", "frequency"],
            "description": "How often the check should run in minutes.",
            "default": 10
          },
          "activated": {
            "type": "boolean",
            "description": "Determines if the check is running or not",
            "default": true
          },
          "muted": {
            "type": "boolean",
            "description": "Determines if any notifications will be send out when a check fails and/or recovers",
            "default": false
          },
          "doubleCheck": {
            "type": "boolean",
            "description": "Setting this to \"true\" will trigger a retry when a check fails from the failing region and another, randomly selected region before marking the check as failed",
            "default": true
          },
          "sslCheck": {
            "type": "boolean",
            "description": "Determines if the SSL certificate should be validated for expiry"
          },
          "shouldFail": {
            "type": "boolean",
            "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404",
            "default": false
          },
          "locations": { "$ref": "#/components/schemas/Model_6" },
          "request": { "$ref": "#/components/schemas/request" },
          "script": {
            "type": "string",
            "description": "A valid piece of Node.js javascript code describing a browser interaction with the Puppeteer or Playwright frameworks.",
            "required": ["script"],
            "optional": ["script"]
          },
          "environmentVariables": {
            "$ref": "#/components/schemas/EnvironmentVariables"
          },
          "tags": { "$ref": "#/components/schemas/Tags" },
          "setupSnippetId": {
            "type": "number",
            "description": "An ID reference to a snippet to use in the setup phase of an API check"
          },
          "tearDownSnippetId": {
            "type": "number",
            "description": "An ID reference to a snippet to use in the teardown phase of an API check"
          },
          "localSetupScript": {
            "type": "string",
            "description": "A valid piece of Node.js code to run in the setup phase"
          },
          "localTearDownScript": {
            "type": "string",
            "description": "A valid piece of Node.js code to run in the teardown phase"
          },
          "alertSettings": { "$ref": "#/components/schemas/Model_7" },
          "useGlobalAlertSettings": {
            "type": "boolean",
            "description": "When true, the account level alert setting will be used, not the alert setting defined on this check",
            "default": true
          },
          "degradedResponseTime": {
            "type": "number",
            "description": "The response time in milliseconds where a check should be considered degraded",
            "default": 10000,
            "minimum": 0,
            "maximum": 300000
          },
          "maxResponseTime": {
            "type": "number",
            "description": "The response time in milliseconds where a check should be considered failing",
            "default": 20000,
            "minimum": 0,
            "maximum": 300000
          },
          "groupId": {
            "type": "number",
            "description": "The id of the check group this check is part of",
            "example": "null"
          },
          "groupOrder": {
            "type": "number",
            "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD",
            "minimum": 0,
            "example": "null"
          },
          "alertChannelSubscriptions": {
            "$ref": "#/components/schemas/alertChannelSubscriptions"
          },
          "alertChannels": { "$ref": "#/components/schemas/AlertChannels" },
          "created_at": { "type": "string", "format": "date" },
          "updated_at": { "type": "string", "format": "date" },
          "runtimeId": {
            "type": "string",
            "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
            "enum": ["2022.02", "2021.10", "2021.06", "2020.01"]
          },
          "frequencyOffset": { "type": "integer", "minimum": 1 },
          "privateLocations": {
            "$ref": "#/components/schemas/privateLocations"
          }
        },
        "required": ["name", "checkType", "activated", "request", "script"]
      },
      "Check": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "name": {
            "type": "string",
            "description": "The name of the check",
            "example": "Check"
          },
          "checkType": {
            "type": "string",
            "description": "The type of the check",
            "enum": ["BROWSER", "API"]
          },
          "frequency": {
            "type": "number",
            "enum": [5, 10, 15, 30, 60, 720, 1440],
            "required": ["frequency", "frequency"],
            "description": "How often the check should run in minutes.",
            "default": 10
          },
          "activated": {
            "type": "boolean",
            "description": "Determines if the check is running or not",
            "default": true
          },
          "muted": {
            "type": "boolean",
            "description": "Determines if any notifications will be send out when a check fails and/or recovers",
            "default": false
          },
          "doubleCheck": {
            "type": "boolean",
            "description": "Setting this to \"true\" will trigger a retry when a check fails from the failing region and another, randomly selected region before marking the check as failed",
            "default": true
          },
          "sslCheck": {
            "type": "boolean",
            "description": "Determines if the SSL certificate should be validated for expiry"
          },
          "shouldFail": {
            "type": "boolean",
            "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404",
            "default": false
          },
          "locations": { "$ref": "#/components/schemas/Model_10" },
          "request": { "$ref": "#/components/schemas/request" },
          "script": {
            "type": "string",
            "description": "A valid piece of Node.js javascript code describing a browser interaction with the Puppeteer or Playwright frameworks.",
            "required": ["script"],
            "optional": ["script"]
          },
          "environmentVariables": {
            "$ref": "#/components/schemas/EnvironmentVariables"
          },
          "tags": { "$ref": "#/components/schemas/Tags" },
          "setupSnippetId": {
            "type": "number",
            "description": "An ID reference to a snippet to use in the setup phase of an API check"
          },
          "tearDownSnippetId": {
            "type": "number",
            "description": "An ID reference to a snippet to use in the teardown phase of an API check"
          },
          "localSetupScript": {
            "type": "string",
            "description": "A valid piece of Node.js code to run in the setup phase"
          },
          "localTearDownScript": {
            "type": "string",
            "description": "A valid piece of Node.js code to run in the teardown phase"
          },
          "alertSettings": { "$ref": "#/components/schemas/Model_7" },
          "useGlobalAlertSettings": {
            "type": "boolean",
            "description": "When true, the account level alert setting will be used, not the alert setting defined on this check",
            "default": true
          },
          "degradedResponseTime": {
            "type": "number",
            "description": "The response time in milliseconds where a check should be considered degraded",
            "default": 10000,
            "minimum": 0,
            "maximum": 300000
          },
          "maxResponseTime": {
            "type": "number",
            "description": "The response time in milliseconds where a check should be considered failing",
            "default": 20000,
            "minimum": 0,
            "maximum": 300000
          },
          "groupId": {
            "type": "number",
            "description": "The id of the check group this check is part of",
            "example": "null"
          },
          "groupOrder": {
            "type": "number",
            "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD",
            "minimum": 0,
            "example": "null"
          },
          "alertChannelSubscriptions": {
            "$ref": "#/components/schemas/alertChannelSubscriptions"
          },
          "alertChannels": { "$ref": "#/components/schemas/AlertChannels" },
          "created_at": { "type": "string", "format": "date" },
          "updated_at": { "type": "string", "format": "date" },
          "runtimeId": {
            "type": "string",
            "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
            "enum": ["2022.02", "2021.10", "2021.06", "2020.01"]
          },
          "frequencyOffset": { "type": "integer", "minimum": 1 },
          "privateLocations": {
            "$ref": "#/components/schemas/privateLocations"
          }
        },
        "required": ["name", "checkType", "activated", "script"]
      },
      "CheckGroupChecksList": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Check" }
      },
      "responseTimes": { "type": "array", "items": { "type": "string" } },
      "RolledUpCheckResult": {
        "type": "object",
        "properties": {
          "checkId": { "type": "string" },
          "runLocation": {
            "type": "string",
            "description": "What data center location this set of check results originated from"
          },
          "errorCount": {
            "type": "number",
            "description": "The total amount of errored out check results for this hour. This value should be 0 in almost all cases as it records failures in the Checkly backend."
          },
          "failureCount": {
            "type": "number",
            "description": "The total amount of failed check results for this hour."
          },
          "resultsCount": {
            "type": "number",
            "description": "The total amount of results recorded for this hour. Depends on how often this check is scheduled to run. "
          },
          "hour": {
            "type": "string",
            "format": "date",
            "description": "All results per time unit / per location are rolled up to a specific hour"
          },
          "responseTimes": { "$ref": "#/components/schemas/responseTimes" }
        }
      },
      "RolledUpCheckResultsList": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/RolledUpCheckResult" }
      },
      "apiCheckResult": { "type": "object" },
      "browserCheckResult": { "type": "object" },
      "CheckResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID of this result"
          },
          "name": { "type": "string", "description": "The name of the check" },
          "checkId": { "type": "string", "description": "The ID of the check" },
          "hasFailures": {
            "type": "boolean",
            "description": "Describes if any failure has occurred during this check run. This is should be your mainmain focus for assessing API or browser check behaviour. Assertions that fail, timeouts or failing scripts all resolve tothis value being true"
          },
          "hasErrors": {
            "type": "boolean",
            "description": "Describes if an internal error has occured in Checkly's backend. This should be false in almost all cases."
          },
          "isDegraded": {
            "type": "boolean",
            "description": "A check is degraded if it is over the degradation limit set by the \"degradedResponseTime\" field on the check. Applies only to API checks."
          },
          "overMaxResponseTime": {
            "type": "boolean",
            "description": "Set to true if the response time is over the limit set by the \"maxResponseTime\" field on the check. Applies only to API checks."
          },
          "runLocation": {
            "type": "string",
            "description": "What data center location this check result originated from"
          },
          "startedAt": { "type": "string", "format": "date" },
          "stoppedAt": { "type": "string", "format": "date" },
          "created_at": { "type": "string", "format": "date" },
          "responseTime": {
            "type": "number",
            "description": "Describes the time it took to execute relevant parts of this check. Any setup timeor system time needed to start executing this check in the Checkly backend is not part of this."
          },
          "apiCheckResult": { "$ref": "#/components/schemas/apiCheckResult" },
          "browserCheckResult": {
            "$ref": "#/components/schemas/browserCheckResult"
          },
          "checkRunId": {
            "type": "number",
            "description": "The id of the specific check run that created this check result"
          },
          "attempts": {
            "type": "number",
            "description": "How often this check was retried. This will be larger than 0 when double checking is enabled"
          }
        }
      },
      "CheckResultsList": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/CheckResult" }
      },
      "CheckStatus": {
        "type": "object",
        "properties": {
          "checkId": {
            "type": "string",
            "description": "The ID of check this status belongs to",
            "example": "a762b148-0819-4b62-b50e-643e26f226ca"
          },
          "hasFailures": {
            "type": "boolean",
            "description": "Describes if this check is currently failing. If any of the assertions for an API checkfail this value is true. If a browser check fails for whatever reason, this is true",
            "example": false
          },
          "hasErrors": {
            "type": "boolean",
            "description": "Describes if due to some error outside of normal operation this check is failing. This should be extremely rare and only when there is an error in the Checkly backend",
            "example": false
          },
          "isDegraded": {
            "type": "boolean",
            "description": "A check is degraded if it is over the degradation limit set by the \"degradedResponseTime\" field on the check. Applies only to API checks.",
            "example": true
          },
          "longestRun": {
            "type": "number",
            "description": "The longest ever recorded response time for this check",
            "example": 10
          },
          "shortestRun": {
            "type": "number",
            "description": "The shortest ever recorded response time for this check",
            "example": 5
          },
          "lastRunLocation": {
            "type": "string",
            "description": "What location this check was last run at",
            "example": "us-east-1"
          },
          "lastCheckRunId": {
            "type": "string",
            "description": "The unique incrementing ID for each check run",
            "example": "245d6b86-8302-4409-8bb4-87d3937552c5"
          },
          "sslDaysRemaining": {
            "type": "number",
            "description": "How many days remain till the current SSL certificate expires",
            "example": 3
          },
          "created_at": { "type": "string", "format": "date" },
          "updated_at": { "type": "string", "format": "date" },
          "name": {
            "type": "string",
            "description": "The name of the check.",
            "example": "API Check"
          }
        },
        "required": ["name"]
      },
      "CheckStatusList": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/CheckStatus" }
      },
      "CheckList": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Check" }
      },
      "CheckCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the check",
            "example": "Check"
          },
          "checkType": {
            "type": "string",
            "description": "The type of the check",
            "enum": ["BROWSER", "API"]
          },
          "frequency": {
            "type": "number",
            "enum": [5, 10, 15, 30, 60, 720, 1440],
            "required": ["frequency", "frequency"],
            "description": "How often the check should run in minutes.",
            "default": 10
          },
          "activated": {
            "type": "boolean",
            "description": "Determines if the check is running or not",
            "default": true
          },
          "muted": {
            "type": "boolean",
            "description": "Determines if any notifications will be send out when a check fails and/or recovers",
            "default": false
          },
          "doubleCheck": {
            "type": "boolean",
            "description": "Setting this to \"true\" will trigger a retry when a check fails from the failing region and another, randomly selected region before marking the check as failed",
            "default": true
          },
          "sslCheck": {
            "type": "boolean",
            "description": "Determines if the SSL certificate should be validated for expiry"
          },
          "shouldFail": {
            "type": "boolean",
            "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404",
            "default": false
          },
          "locations": { "$ref": "#/components/schemas/Model_11" },
          "request": { "$ref": "#/components/schemas/request" },
          "script": {
            "type": "string",
            "description": "A valid piece of Node.js javascript code describing a browser interaction with the Puppeteer or Playwright frameworks.",
            "required": ["script"],
            "optional": ["script"]
          },
          "environmentVariables": {
            "$ref": "#/components/schemas/EnvironmentVariables"
          },
          "tags": { "$ref": "#/components/schemas/Tags" },
          "setupSnippetId": {
            "type": "number",
            "description": "An ID reference to a snippet to use in the setup phase of an API check"
          },
          "tearDownSnippetId": {
            "type": "number",
            "description": "An ID reference to a snippet to use in the teardown phase of an API check"
          },
          "localSetupScript": {
            "type": "string",
            "description": "A valid piece of Node.js code to run in the setup phase"
          },
          "localTearDownScript": {
            "type": "string",
            "description": "A valid piece of Node.js code to run in the teardown phase"
          },
          "alertSettings": { "$ref": "#/components/schemas/Model_7" },
          "useGlobalAlertSettings": {
            "type": "boolean",
            "description": "When true, the account level alert setting will be used, not the alert setting defined on this check",
            "default": true
          },
          "degradedResponseTime": {
            "type": "number",
            "description": "The response time in milliseconds where a check should be considered degraded",
            "default": 10000,
            "minimum": 0,
            "maximum": 300000
          },
          "maxResponseTime": {
            "type": "number",
            "description": "The response time in milliseconds where a check should be considered failing",
            "default": 20000,
            "minimum": 0,
            "maximum": 300000
          },
          "groupId": {
            "type": "number",
            "description": "The id of the check group this check is part of",
            "example": "null"
          },
          "groupOrder": {
            "type": "number",
            "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD",
            "minimum": 0,
            "example": "null"
          },
          "runtimeId": {
            "type": "string",
            "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
            "enum": ["2022.02", "2021.10", "2021.06", "2020.01"]
          },
          "alertChannelSubscriptions": {
            "$ref": "#/components/schemas/Model10"
          },
          "frequencyOffset": {
            "type": "integer",
            "description": "Used for setting seconds for check frequencies under 1 minutes (only for API checks) and spreading checks over a time range for frequencies over 1 minute. This works as follows: Checks with a frequency of 0 can have a frequencyOffset of 10, 20 or 30 meaning they will run every 10, 20 or 30 seconds. Checks with a frequency lower than and equal to 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.floor(frequency * 10)\", i.e. for a check that runs every 5 minutes the max frequencyOffset is 50. Checks with a frequency higher than 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.ceil(frequency / 60)\", i.e. for a check that runs every 720 minutes, the max frequencyOffset is 12. ",
            "minimum": 1
          },
          "privateLocations": {
            "$ref": "#/components/schemas/privateLocations"
          }
        },
        "required": ["name", "checkType", "activated", "script"]
      },
      "DashboardResponse": {
        "type": "object",
        "properties": {
          "customUrl": {
            "type": "string",
            "description": "A subdomain name under \"checklyhq.com\". Needs to be unique across all users."
          },
          "customDomain": {
            "type": "string",
            "description": "A custom user domain, e.g. \"status.example.com\". See the docs on updating your DNS and SSL usage."
          },
          "logo": {
            "type": "string",
            "description": "A URL pointing to an image file."
          },
          "header": {
            "type": "string",
            "description": "A piece of text displayed at the top of your dashboard."
          },
          "width": {
            "type": "string",
            "description": "Determines whether to use the full screen or focus in the center.",
            "enum": ["FULL", "960PX"]
          },
          "refreshRate": {
            "type": "number",
            "description": "How often to refresh the dashboard in seconds.",
            "enum": [60, 300, 600]
          },
          "paginate": {
            "type": "boolean",
            "description": "Determines of pagination is on or off.",
            "default": true
          },
          "paginationRate": {
            "type": "number",
            "description": "How often to trigger pagination in seconds.",
            "enum": [30, 60, 300]
          },
          "tags": { "$ref": "#/components/schemas/Model_15" },
          "hideTags": {
            "type": "boolean",
            "description": "Show or hide the tags on the dashboard.",
            "default": false
          },
          "dashboardId": { "type": "string" }
        },
        "required": [
          "customUrl",
          "customDomain",
          "logo",
          "header",
          "refreshRate",
          "paginate",
          "paginationRate",
          "hideTags",
          "dashboardId"
        ]
      },
      "DashboardsList": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/DashboardResponse" }
      },
      "DashboardSchema": {
        "type": "object",
        "properties": {
          "customUrl": {
            "type": "string",
            "description": "A subdomain name under \"checklyhq.com\". Needs to be unique across all users."
          },
          "customDomain": {
            "type": "string",
            "description": "A custom user domain, e.g. \"status.example.com\". See the docs on updating your DNS and SSL usage."
          },
          "logo": {
            "type": "string",
            "description": "A URL pointing to an image file."
          },
          "header": {
            "type": "string",
            "description": "A piece of text displayed at the top of your dashboard."
          },
          "width": {
            "type": "string",
            "description": "Determines whether to use the full screen or focus in the center.",
            "enum": ["FULL", "960PX"]
          },
          "refreshRate": {
            "type": "number",
            "description": "How often to refresh the dashboard in seconds.",
            "enum": [60, 300, 600]
          },
          "paginate": {
            "type": "boolean",
            "description": "Determines of pagination is on or off.",
            "default": true
          },
          "paginationRate": {
            "type": "number",
            "description": "How often to trigger pagination in seconds.",
            "enum": [30, 60, 300]
          },
          "tags": { "$ref": "#/components/schemas/Model_16" },
          "hideTags": {
            "type": "boolean",
            "description": "Show or hide the tags on the dashboard.",
            "default": false
          }
        },
        "required": [
          "customUrl",
          "customDomain",
          "logo",
          "header",
          "refreshRate",
          "paginate",
          "paginationRate",
          "hideTags"
        ]
      },
      "MaintenanceWindowsList": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model_18" }
      },
      "Snippet": {
        "type": "object",
        "properties": {
          "id": { "type": "number", "example": 1 },
          "name": {
            "type": "string",
            "description": "The snippet name",
            "example": "Snippet"
          },
          "script": {
            "type": "string",
            "description": "Your Node.js code that interacts with the API check lifecycle, or functions as a partial for browser checks.",
            "example": "request.url = request.url + '/extra'"
          },
          "created_at": { "type": "string", "format": "date" },
          "updated_at": { "type": "string", "format": "date" }
        }
      },
      "SnippetsList": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Snippet" }
      },
      "SnippetCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The snippet name",
            "example": "Snippet"
          },
          "script": {
            "type": "string",
            "description": "Your Node.js code that interacts with the API check lifecycle, or functions as a partial for browser checks.",
            "example": "request.url = request.url + '/extra'"
          }
        },
        "required": ["name", "script"]
      },
      "EnvironmentVariablesList": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/EnvironmentVariable" }
      },
      "Model_1": { "type": "object" },
      "Model_2": {
        "type": "object",
        "properties": {
          "id": { "type": "number" },
          "name": { "type": "string" },
          "activated": { "type": "boolean" },
          "muted": { "type": "boolean" },
          "tags": { "$ref": "#/components/schemas/tags" },
          "locations": { "$ref": "#/components/schemas/locations" },
          "concurrency": { "type": "number", "default": 3, "minimum": 1 },
          "apiCheckDefaults": {
            "$ref": "#/components/schemas/apiCheckDefaults"
          },
          "browserCheckDefaults": {
            "$ref": "#/components/schemas/browserCheckDefaults"
          },
          "environmentVariables": {
            "$ref": "#/components/schemas/environmentVariables"
          },
          "doubleCheck": { "type": "boolean" },
          "useGlobalAlertSettings": { "type": "boolean" },
          "alertSettings": {
            "$ref": "#/components/schemas/AlertSettingsSchema"
          },
          "alertChannelSubscriptions": {
            "$ref": "#/components/schemas/alertChannelSubscriptions"
          },
          "setupSnippetId": { "type": "number" },
          "tearDownSnippetId": { "type": "number" },
          "localSetupScript": { "type": "string" },
          "localTearDownScript": { "type": "string" },
          "created_at": { "type": "string", "format": "date" },
          "updated_at": { "type": "string", "format": "date" }
        },
        "required": [
          "name",
          "activated",
          "concurrency",
          "apiCheckDefaults",
          "browserCheckDefaults"
        ]
      },
      "Model_3": {
        "type": "object",
        "default": {},
        "properties": {
          "url": {
            "type": "string",
            "description": "The base url for this group which you can reference with the {{GROUP_BASE_URL}} variable in all group checks.",
            "default": ""
          },
          "headers": { "$ref": "#/components/schemas/Headers" },
          "queryParameters": { "$ref": "#/components/schemas/QueryParameters" },
          "assertions": { "$ref": "#/components/schemas/assertions" },
          "basicAuth": { "$ref": "#/components/schemas/basicAuth" }
        }
      },
      "Model_4": { "type": "object", "default": {} },
      "Model_5": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the check group"
          },
          "activated": {
            "type": "boolean",
            "description": "Determines if the checks in the  group are running or not",
            "default": true
          },
          "muted": {
            "type": "boolean",
            "description": "Determines if any notifications will be send out when a check in this group fails and/or recovers",
            "default": false
          },
          "tags": { "$ref": "#/components/schemas/Tags" },
          "locations": { "$ref": "#/components/schemas/Locations" },
          "concurrency": {
            "type": "number",
            "description": "Determines how many checks are invoked concurrently when triggering a check group from CI/CD or through the API.",
            "default": 3,
            "minimum": 1
          },
          "apiCheckDefaults": { "$ref": "#/components/schemas/Model_3" },
          "browserCheckDefaults": { "$ref": "#/components/schemas/Model_4" },
          "environmentVariables": {
            "$ref": "#/components/schemas/environmentVariables"
          },
          "doubleCheck": {
            "type": "boolean",
            "description": "Setting this to \"true\" will trigger a retry when a check fails from the failing region and another, randomly selected region before marking the check as failed",
            "default": true
          },
          "useGlobalAlertSettings": {
            "type": "boolean",
            "description": "When true, the account level alert setting will be used, not the alert setting defined on this check group",
            "default": true
          },
          "alertSettings": {
            "$ref": "#/components/schemas/AlertSettingsSchema"
          },
          "alertChannelSubscriptions": {
            "$ref": "#/components/schemas/alertChannelSubscriptions"
          },
          "setupSnippetId": {
            "type": "number",
            "description": "An ID reference to a snippet to use in the setup phase of an API check in this group"
          },
          "tearDownSnippetId": {
            "type": "number",
            "description": "An ID reference to a snippet to use in the teardown phase of an API check in this group"
          },
          "localSetupScript": {
            "type": "string",
            "description": "A valid piece of Node.js code to run in the setup phase of an API check in this group"
          },
          "localTearDownScript": {
            "type": "string",
            "description": "A valid piece of Node.js code to run in the teardown phase of an API check in this group"
          }
        },
        "required": ["name", "locations"]
      },
      "Model_6": {
        "type": "array",
        "description": "An array of one or more data center locations where to run the this check",
        "default": ["us-east-1"],
        "items": {
          "type": "string",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "ca-central-1",
            "sa-east-1",
            "eu-west-1",
            "eu-central-1",
            "eu-west-2",
            "eu-west-3",
            "eu-north-1",
            "eu-south-1",
            "me-south-1",
            "ap-southeast-1",
            "ap-northeast-1",
            "ap-east-1",
            "ap-southeast-2",
            "ap-northeast-2",
            "ap-south-1",
            "af-south-1"
          ]
        }
      },
      "Model_7": {
        "type": "object",
        "default": {
          "escalationType": "RUN_BASED",
          "runBasedEscalation": { "failedRunThreshold": 1 },
          "timeBasedEscalation": { "minutesFailingThreshold": 5 },
          "reminders": { "amount": 0, "interval": 5 },
          "sslCertificates": { "enabled": false, "alertThreshold": 30 }
        },
        "properties": {
          "escalationType": {
            "type": "string",
            "description": "Determines what type of escalation to use",
            "default": "RUN_BASED",
            "enum": ["RUN_BASED", "TIME_BASED"]
          },
          "runBasedEscalation": {
            "$ref": "#/components/schemas/runBasedEscalation"
          },
          "timeBasedEscalation": {
            "$ref": "#/components/schemas/timeBasedEscalation"
          },
          "reminders": { "$ref": "#/components/schemas/reminders" },
          "sslCertificates": { "$ref": "#/components/schemas/sslCertificates" }
        }
      },
      "Model_8": {
        "type": "object",
        "default": {},
        "properties": {
          "url": {
            "type": "string",
            "description": "The base url for this group which you can reference with the {{GROUP_BASE_URL}} variable in all group checks.",
            "default": ""
          },
          "headers": { "$ref": "#/components/schemas/Headers" },
          "queryParameters": { "$ref": "#/components/schemas/QueryParameters" },
          "assertions": { "$ref": "#/components/schemas/assertions" },
          "basicAuth": { "$ref": "#/components/schemas/basicAuth" }
        }
      },
      "Model_9": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the check group"
          },
          "activated": {
            "type": "boolean",
            "description": "Determines if the checks in the  group are running or not",
            "default": true
          },
          "muted": {
            "type": "boolean",
            "description": "Determines if any notifications will be send out when a check in this group fails and/or recovers",
            "default": false
          },
          "tags": { "$ref": "#/components/schemas/Tags" },
          "locations": { "$ref": "#/components/schemas/Locations" },
          "concurrency": {
            "type": "number",
            "description": "Determines how many checks are invoked concurrently when triggering a check group from CI/CD or through the API.",
            "default": 3,
            "minimum": 1
          },
          "apiCheckDefaults": { "$ref": "#/components/schemas/Model_8" },
          "browserCheckDefaults": { "$ref": "#/components/schemas/Model_4" },
          "environmentVariables": {
            "$ref": "#/components/schemas/environmentVariables"
          },
          "doubleCheck": {
            "type": "boolean",
            "description": "Setting this to \"true\" will trigger a retry when a check fails from the failing region and another, randomly selected region before marking the check as failed",
            "default": true
          },
          "useGlobalAlertSettings": {
            "type": "boolean",
            "description": "When true, the account level alert setting will be used, not the alert setting defined on this check group",
            "default": true
          },
          "alertSettings": {
            "$ref": "#/components/schemas/AlertSettingsSchema"
          },
          "alertChannelSubscriptions": {
            "$ref": "#/components/schemas/alertChannelSubscriptions"
          },
          "setupSnippetId": {
            "type": "number",
            "description": "An ID reference to a snippet to use in the setup phase of an API check in this group"
          },
          "tearDownSnippetId": {
            "type": "number",
            "description": "An ID reference to a snippet to use in the teardown phase of an API check in this group"
          },
          "localSetupScript": {
            "type": "string",
            "description": "A valid piece of Node.js code to run in the setup phase of an API check in this group"
          },
          "localTearDownScript": {
            "type": "string",
            "description": "A valid piece of Node.js code to run in the teardown phase of an API check in this group"
          }
        }
      },
      "Model_10": {
        "type": "array",
        "description": "An array of one or more data center locations where to run the this check",
        "default": ["us-east-1"],
        "items": {
          "type": "string",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "ca-central-1",
            "sa-east-1",
            "eu-west-1",
            "eu-central-1",
            "eu-west-2",
            "eu-west-3",
            "eu-north-1",
            "eu-south-1",
            "me-south-1",
            "ap-southeast-1",
            "ap-northeast-1",
            "ap-east-1",
            "ap-southeast-2",
            "ap-northeast-2",
            "ap-south-1",
            "af-south-1"
          ]
        }
      },
      "Model_11": {
        "type": "array",
        "description": "An array of one or more data center locations where to run the this check",
        "default": ["us-east-1"],
        "items": {
          "type": "string",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "ca-central-1",
            "sa-east-1",
            "eu-west-1",
            "eu-central-1",
            "eu-west-2",
            "eu-west-3",
            "eu-north-1",
            "eu-south-1",
            "me-south-1",
            "ap-southeast-1",
            "ap-northeast-1",
            "ap-east-1",
            "ap-southeast-2",
            "ap-northeast-2",
            "ap-south-1",
            "af-south-1"
          ]
        }
      },
      "Model_12": {
        "type": "array",
        "description": "An array of one or more data center locations where to run the this check",
        "default": ["us-east-1"],
        "items": {
          "type": "string",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "ca-central-1",
            "sa-east-1",
            "eu-west-1",
            "eu-central-1",
            "eu-west-2",
            "eu-west-3",
            "eu-north-1",
            "eu-south-1",
            "me-south-1",
            "ap-southeast-1",
            "ap-northeast-1",
            "ap-east-1",
            "ap-southeast-2",
            "ap-northeast-2",
            "ap-south-1",
            "af-south-1"
          ]
        }
      },
      "Model_13": {
        "type": "object",
        "default": {
          "escalationType": "RUN_BASED",
          "runBasedEscalation": { "failedRunThreshold": 1 },
          "timeBasedEscalation": { "minutesFailingThreshold": 5 },
          "reminders": { "amount": 0, "interval": 5 },
          "sslCertificates": { "enabled": false, "alertThreshold": 30 }
        },
        "properties": {
          "escalationType": {
            "type": "string",
            "description": "Determines what type of escalation to use",
            "default": "RUN_BASED",
            "enum": ["RUN_BASED", "TIME_BASED"]
          },
          "runBasedEscalation": {
            "$ref": "#/components/schemas/runBasedEscalation"
          },
          "timeBasedEscalation": {
            "$ref": "#/components/schemas/timeBasedEscalation"
          },
          "reminders": { "$ref": "#/components/schemas/reminders" },
          "sslCertificates": { "$ref": "#/components/schemas/sslCertificates" }
        }
      },
      "Model_14": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "description": "The name of the check" },
          "checkType": {
            "type": "string",
            "description": "The type of the check",
            "enum": ["BROWSER", "API"]
          },
          "frequency": {
            "type": "number",
            "enum": [5, 10, 15, 30, 60, 720, 1440],
            "required": ["frequency", "frequency"]
          },
          "activated": {
            "type": "boolean",
            "description": "Determines if the check is running or not",
            "default": true
          },
          "muted": {
            "type": "boolean",
            "description": "Determines if any notifications will be send out when a check fails and/or recovers",
            "default": false
          },
          "doubleCheck": {
            "type": "boolean",
            "description": "Setting this to \"true\" will trigger a retry when a check fails from the failing region and another, randomly selected region before marking the check as failed",
            "default": true
          },
          "sslCheck": {
            "type": "boolean",
            "description": "Determines if the SSL certificate should be validated for expiry"
          },
          "shouldFail": {
            "type": "boolean",
            "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404"
          },
          "locations": { "$ref": "#/components/schemas/Model_12" },
          "request": { "$ref": "#/components/schemas/request" },
          "script": {
            "type": "string",
            "description": "A valid piece of Node.js javascript code describing a browser interaction with the Puppeteer or Playwright frameworks.",
            "required": ["script"],
            "optional": ["script"]
          },
          "environmentVariables": {
            "$ref": "#/components/schemas/EnvironmentVariables"
          },
          "tags": { "$ref": "#/components/schemas/Tags" },
          "setupSnippetId": {
            "type": "number",
            "description": "An ID reference to a snippet to use in the setup phase of an API check"
          },
          "tearDownSnippetId": {
            "type": "number",
            "description": "An ID reference to a snippet to use in the teardown phase of an API check"
          },
          "localSetupScript": {
            "type": "string",
            "description": "A valid piece of Node.js code to run in the setup phase"
          },
          "localTearDownScript": {
            "type": "string",
            "description": "A valid piece of Node.js code to run in the teardown phase"
          },
          "alertSettings": { "$ref": "#/components/schemas/Model_13" },
          "useGlobalAlertSettings": {
            "type": "boolean",
            "description": "When true, the account level alert setting will be used, not the alert setting defined on this check",
            "default": true
          },
          "degradedResponseTime": {
            "type": "number",
            "description": "The response time in milliseconds where a check should be considered degraded",
            "default": 10000,
            "minimum": 0,
            "maximum": 300000
          },
          "maxResponseTime": {
            "type": "number",
            "description": "The response time in milliseconds where a check should be considered failing",
            "default": 20000,
            "minimum": 0,
            "maximum": 300000
          },
          "groupId": {
            "type": "number",
            "description": "The id of the check group this check is part of"
          },
          "groupOrder": {
            "type": "number",
            "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD",
            "minimum": 0
          }
        }
      },
      "Model_15": {
        "type": "array",
        "description": "A list of one or more tags that filter which checks to display on the dashboard.",
        "items": { "type": "string" }
      },
      "Model_16": {
        "type": "array",
        "description": "A list of one or more tags that filter which checks to display on the dashboard.",
        "items": { "type": "string" }
      },
      "Model_17": {
        "type": "array",
        "description": "The names of the checks and groups maintenance window should apply to",
        "items": { "type": "string" }
      },
      "Model_18": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "The id of the maintenance window"
          },
          "name": {
            "type": "string",
            "description": "The maintenance window name"
          },
          "tags": { "$ref": "#/components/schemas/Model_17" },
          "startsAt": {
            "type": "string",
            "format": "date",
            "description": "The start date of the maintenance window"
          },
          "endsAt": {
            "type": "string",
            "format": "date",
            "description": "The end date of the maintenance window"
          },
          "repeatInterval": {
            "type": "number",
            "description": "The repeat interval of the maintenance window from the first occurance",
            "minimum": 1
          },
          "repeatUnit": {
            "type": "string",
            "enum": ["DAY", "WEEK", "MONTH"],
            "required": ["repeatUnit"]
          },
          "repeatEndsAt": {
            "type": "string",
            "format": "date",
            "description": "The end date where the maintenance window should stop repeating"
          },
          "created_at": {
            "type": "string",
            "format": "date",
            "description": "The creation date of the maintenance window"
          },
          "updated_at": {
            "type": "string",
            "format": "date",
            "description": "The last date that the maintenance window was updated"
          }
        },
        "required": [
          "id",
          "name",
          "tags",
          "startsAt",
          "endsAt",
          "created_at",
          "updated_at"
        ]
      },
      "Model_19": {
        "type": "array",
        "description": "The names of the checks and groups maintenance window should apply to",
        "items": { "type": "string" }
      },
      "Model_20": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The maintenance window name"
          },
          "tags": { "$ref": "#/components/schemas/Model_19" },
          "startsAt": {
            "type": "string",
            "format": "date",
            "description": "The start date of the maintenance window"
          },
          "endsAt": {
            "type": "string",
            "format": "date",
            "description": "The end date of the maintenance window"
          },
          "repeatInterval": {
            "type": "number",
            "description": "The repeat interval of the maintenance window from the first occurance",
            "minimum": 1
          },
          "repeatUnit": {
            "type": "string",
            "enum": ["DAY", "WEEK", "MONTH"],
            "required": ["repeatUnit"]
          },
          "repeatEndsAt": {
            "type": "string",
            "format": "date",
            "description": "The end date where the maintenance window should stop repeating"
          }
        },
        "required": ["name", "tags", "startsAt", "endsAt"]
      },
      "AlertChanelSubscription": {
        "type": "object",
        "properties": {
          "id": { "type": "number", "example": 1 },
          "checkId": {
            "type": "string",
            "example": "25c96a27-c32d-49c0-832e-966add64cdb9"
          },
          "groupId": { "type": "number", "example": "null" },
          "activated": { "type": "boolean" }
        },
        "required": ["activated"]
      },
      "AlertChanelSubscriptionList": {
        "type": "array",
        "description": "All checks subscribed to this channel.",
        "example": [],
        "items": { "$ref": "#/components/schemas/AlertChanelSubscription" }
      },
      "attributes": { "type": "object" },
      "UnauthorizedError": {
        "type": "object",
        "properties": {
          "statusCode": { "type": "number", "enum": [401] },
          "error": { "type": "string", "enum": ["Unauthorized"] },
          "message": { "type": "string", "example": "Bad Token" },
          "attributes": { "$ref": "#/components/schemas/attributes" }
        },
        "required": ["statusCode", "error"]
      },
      "ForbiddenError": {
        "type": "object",
        "properties": {
          "statusCode": { "type": "number", "enum": [403] },
          "error": { "type": "string", "enum": ["Forbidden"] },
          "message": { "type": "string", "example": "Forbidden" }
        },
        "required": ["statusCode", "error"]
      },
      "TooManyRequestsError": {
        "type": "object",
        "properties": {
          "statusCode": { "type": "number", "enum": [429] },
          "error": { "type": "string", "enum": ["Too Many Requests"] },
          "message": { "type": "string", "example": "Too Many Requests" },
          "attributes": { "$ref": "#/components/schemas/attributes" }
        },
        "required": ["statusCode", "error"]
      },
      "AlertChannelCreateConfig": { "type": "object" },
      "AlertChannelCreate": {
        "type": "object",
        "properties": {
          "subscriptions": {
            "$ref": "#/components/schemas/AlertChanelSubscriptionList"
          },
          "type": {
            "type": "string",
            "example": "SMS",
            "enum": [
              "EMAIL",
              "SLACK",
              "WEBHOOK",
              "SMS",
              "PAGERDUTY",
              "OPSGENIE"
            ]
          },
          "config": { "$ref": "#/components/schemas/AlertChannelCreateConfig" },
          "sendRecovery": { "type": "boolean" },
          "sendFailure": { "type": "boolean" },
          "sendDegraded": { "type": "boolean" },
          "sslExpiry": {
            "type": "boolean",
            "description": "Determines if an alert should be send for expiring SSL certificates.",
            "default": false
          },
          "sslExpiryThreshold": {
            "type": "integer",
            "description": "At what moment in time to start alerting on SSL certificates.",
            "default": 30,
            "minimum": 1,
            "maximum": 30
          }
        },
        "required": ["type", "config"]
      },
      "PaymentRequiredError": {
        "type": "object",
        "properties": {
          "statusCode": { "type": "number", "enum": [402] },
          "error": { "type": "string", "enum": ["Payment Required"] },
          "message": { "type": "string", "example": "Payment Required" },
          "attributes": { "$ref": "#/components/schemas/attributes" }
        },
        "required": ["statusCode", "error"]
      },
      "NotFoundError": {
        "type": "object",
        "properties": {
          "statusCode": { "type": "number", "enum": [404] },
          "error": { "type": "string", "enum": ["Not Found"] },
          "message": { "type": "string", "example": "Not Found" }
        },
        "required": ["statusCode", "error"]
      },
      "CheckAlert": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID of this alert.",
            "example": "1"
          },
          "name": {
            "type": "string",
            "description": "The name of the check.",
            "example": "API Check"
          },
          "checkId": {
            "type": "string",
            "description": "The ID of check this alert belongs to.",
            "example": "cb2768aa-c222-4376-bf93-dce0df2e2e31"
          },
          "alertType": {
            "type": "string",
            "description": "The type of alert.",
            "example": "EMAIL"
          },
          "checkType": {
            "type": "string",
            "description": "The type of the check.",
            "example": "API",
            "enum": ["BROWSER", "API"]
          },
          "runLocation": {
            "type": "string",
            "description": "What data center location this check alert was triggered from.",
            "example": "us-east-1"
          },
          "responseTime": {
            "type": "number",
            "description": "Describes the time it took to execute relevant parts of this check. Any setup timeor system time needed to start executing this check in the Checkly backend is not part of this.",
            "example": 10
          },
          "error": {
            "type": "string",
            "description": "Any specific error messages that were part of the failing check triggering the alert.",
            "example": "OK"
          },
          "statusCode": {
            "type": "string",
            "description": "The status code of the response. Only applies to API checks.",
            "example": "200"
          },
          "created_at": {
            "type": "string",
            "format": "date",
            "description": "The date and time this check alert was created."
          },
          "startedAt": {
            "type": "string",
            "format": "date",
            "description": "The date and time this check alert was started."
          }
        },
        "required": ["name"]
      },
      "CheckAlertList": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/CheckAlert" }
      },
      "Assertion": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string",
            "enum": [
              "STATUS_CODE",
              "JSON_BODY",
              "HEADERS",
              "TEXT_BODY",
              "RESPONSE_TIME"
            ]
          },
          "property": { "type": "string", "default": "" },
          "comparison": {
            "type": "string",
            "enum": [
              "EQUALS",
              "NOT_EQUALS",
              "HAS_KEY",
              "NOT_HAS_KEY",
              "HAS_VALUE",
              "NOT_HAS_VALUE",
              "IS_EMPTY",
              "NOT_EMPTY",
              "GREATER_THAN",
              "LESS_THAN",
              "CONTAINS",
              "NOT_CONTAINS",
              "IS_NULL",
              "NOT_NULL"
            ]
          },
          "target": { "type": "string", "default": "" }
        }
      },
      "AssertionList": {
        "type": "array",
        "description": "Check the main Checkly documentation on assertions for specific values like regular expressions and JSON path descriptors you can use in the \"property\" field.",
        "example": [
          {
            "source": "STATUS_CODE",
            "comparision": "NOT_EMPTY",
            "target": "200"
          }
        ],
        "default": [],
        "items": { "$ref": "#/components/schemas/Assertion" }
      },
      "BasicAuth": {
        "type": "object",
        "properties": {
          "username": { "type": "string", "example": "admin", "default": "" },
          "password": { "type": "string", "example": "abc12345", "default": "" }
        },
        "required": ["username", "password"]
      },
      "AlertSettingsRunBasedEscalation": {
        "type": "object",
        "properties": {
          "failedRunThreshold": {
            "type": "number",
            "description": "After how many failed consecutive check runs an alert notification should be send.",
            "default": 1,
            "enum": [1, 2, 3, 4, 5]
          }
        }
      },
      "AlertSettingsTimeBasedEscalation": {
        "type": "object",
        "properties": {
          "minutesFailingThreshold": {
            "type": "number",
            "description": "After how many minutes after a check starts failing an alert should be send.",
            "default": 5,
            "enum": [5, 10, 15, 30]
          }
        }
      },
      "AlertSettingsReminders": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "How many reminders to send out after the initial alert notification.",
            "default": 0,
            "enum": [0, 1, 2, 3, 4, 5, 100000]
          },
          "interval": {
            "type": "number",
            "description": "At what interval the reminders should be send.",
            "default": 5,
            "enum": [5, 10, 15, 30]
          }
        }
      },
      "AlertSettingsSSLCertificates": {
        "type": "object",
        "description": "[DEPRECATED] `sslCertificates` is deprecated and is not longer used. Please ignore it, will be removed in a future version.",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Determines if alert notifications should be send for expiring SSL certificates.",
            "default": false
          },
          "alertThreshold": {
            "type": "integer",
            "description": "At what moment in time to start alerting on SSL certificates."
          }
        }
      },
      "Model1": {
        "type": "object",
        "description": "Alert channel subscription.",
        "properties": {
          "alertChannelId": { "type": "number" },
          "activated": { "type": "boolean", "default": true }
        },
        "required": ["alertChannelId", "activated"]
      },
      "privateLocations": {
        "type": "array",
        "description": "An array of one or more private locations where to run the check.",
        "example": ["data-center-eu"],
        "items": { "type": "string" }
      },
      "CheckLocationList": {
        "type": "array",
        "description": "An array of one or more data center locations where to run this check.",
        "example": ["us-east-1", "eu-central-1"],
        "default": [],
        "items": {
          "type": "string",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "ca-central-1",
            "sa-east-1",
            "eu-west-1",
            "eu-central-1",
            "eu-west-2",
            "eu-west-3",
            "eu-north-1",
            "eu-south-1",
            "me-south-1",
            "ap-southeast-1",
            "ap-northeast-1",
            "ap-east-1",
            "ap-southeast-2",
            "ap-southeast-3",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-south-1",
            "af-south-1"
          ]
        }
      },
      "CheckTagList": {
        "type": "array",
        "description": "Tags for organizing and filtering checks.",
        "example": ["production"],
        "default": [],
        "items": { "type": "string" }
      },
      "CheckAlertSettings": {
        "type": "object",
        "description": "Alert settings.",
        "default": {
          "escalationType": "RUN_BASED",
          "runBasedEscalation": { "failedRunThreshold": 1 },
          "timeBasedEscalation": { "minutesFailingThreshold": 5 },
          "reminders": { "amount": 0, "interval": 5 }
        },
        "properties": {
          "escalationType": {
            "type": "string",
            "description": "Determines what type of escalation to use.",
            "default": "RUN_BASED",
            "enum": ["RUN_BASED", "TIME_BASED"]
          },
          "runBasedEscalation": {
            "$ref": "#/components/schemas/AlertSettingsRunBasedEscalation"
          },
          "timeBasedEscalation": {
            "$ref": "#/components/schemas/AlertSettingsTimeBasedEscalation"
          },
          "reminders": {
            "$ref": "#/components/schemas/AlertSettingsReminders"
          },
          "sslCertificates": {
            "$ref": "#/components/schemas/AlertSettingsSSLCertificates"
          }
        }
      },
      "CheckAlertChannelSubscription": {
        "type": "object",
        "properties": {
          "alertChannelId": { "type": "number" },
          "activated": { "type": "boolean", "default": true }
        },
        "required": ["alertChannelId", "activated"]
      },
      "CheckAlertChannelSubscriptionList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/CheckAlertChannelSubscription"
        }
      },
      "CheckAlertEmail": {
        "type": "object",
        "properties": { "address": { "type": "string", "default": "" } },
        "required": ["address"]
      },
      "CheckAlertEmailList": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/CheckAlertEmail" }
      },
      "Model4": {
        "type": "array",
        "default": [],
        "items": { "$ref": "#/components/schemas/KeyValue" }
      },
      "Model5": {
        "type": "array",
        "default": [],
        "items": { "$ref": "#/components/schemas/KeyValue" }
      },
      "CheckAlertWebhook": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "default": "" },
          "url": { "type": "string", "default": "" },
          "method": {
            "type": "string",
            "default": "POST",
            "enum": ["GET", "POST", "PUT", "HEAD", "DELETE", "PATCH"]
          },
          "headers": { "$ref": "#/components/schemas/Model4" },
          "queryParameters": { "$ref": "#/components/schemas/Model5" }
        },
        "required": ["url"]
      },
      "CheckAlertWebhookList": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/CheckAlertWebhook" }
      },
      "CheckAlertSlack": {
        "type": "object",
        "properties": { "url": { "type": "string", "default": "" } },
        "required": ["url"]
      },
      "CheckAlertSlackList": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/CheckAlertSlack" }
      },
      "CheckAlertSMS": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "example": "+549110000000",
            "default": ""
          },
          "name": { "type": "string", "example": "SMS Alert" }
        },
        "required": ["number", "name"]
      },
      "CheckAlertSMSList": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/CheckAlertSMS" }
      },
      "CheckAlertChannels": {
        "type": "object",
        "properties": {
          "email": { "$ref": "#/components/schemas/CheckAlertEmailList" },
          "webhook": { "$ref": "#/components/schemas/CheckAlertWebhookList" },
          "slack": { "$ref": "#/components/schemas/CheckAlertSlackList" },
          "sms": { "$ref": "#/components/schemas/CheckAlertSMSList" }
        }
      },
      "ConflictError": {
        "type": "object",
        "properties": {
          "statusCode": { "type": "number", "enum": [409] },
          "error": { "type": "string", "enum": ["Conflict"] },
          "message": { "type": "string", "example": "Conflict" }
        },
        "required": ["statusCode", "error"]
      },
      "params": { "type": "object" },
      "Model10": {
        "type": "array",
        "description": "List of alert channel subscriptions.",
        "example": [],
        "items": { "$ref": "#/components/schemas/Model1" }
      },
      "Model11": {
        "type": "array",
        "description": "List of alert channel subscriptions.",
        "example": [],
        "items": { "$ref": "#/components/schemas/Model1" }
      },
      "Model12": {
        "type": "array",
        "default": [],
        "items": { "$ref": "#/components/schemas/KeyValue" }
      },
      "Model13": {
        "type": "array",
        "default": [],
        "items": { "$ref": "#/components/schemas/KeyValue" }
      },
      "Request": {
        "type": "object",
        "description": "Determines the request that the check is going to run.",
        "properties": {
          "method": {
            "type": "string",
            "default": "GET",
            "enum": ["GET", "POST", "PUT", "HEAD", "DELETE", "PATCH"]
          },
          "url": {
            "type": "string",
            "default": "https://api.checklyhq.com",
            "maxLength": 2048
          },
          "followRedirects": { "type": "boolean" },
          "skipSSL": { "type": "boolean", "default": false },
          "body": { "type": "string", "default": "" },
          "bodyType": {
            "type": "string",
            "default": "NONE",
            "enum": ["JSON", "FORM", "RAW", "GRAPHQL", "NONE"]
          },
          "headers": { "$ref": "#/components/schemas/Model12" },
          "queryParameters": { "$ref": "#/components/schemas/Model13" },
          "assertions": { "$ref": "#/components/schemas/AssertionList" },
          "basicAuth": { "$ref": "#/components/schemas/BasicAuth" }
        },
        "required": ["method", "url"]
      },
      "CheckAPICreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the check.",
            "example": "Check"
          },
          "activated": {
            "type": "boolean",
            "description": "Determines if the check is running or not.",
            "default": true
          },
          "muted": {
            "type": "boolean",
            "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
            "default": false
          },
          "doubleCheck": {
            "type": "boolean",
            "description": "Setting this to \"true\" will trigger a retry when a check fails from the failing region and another, randomly selected region before marking the check as failed.",
            "default": true
          },
          "shouldFail": {
            "type": "boolean",
            "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
            "default": false
          },
          "locations": { "$ref": "#/components/schemas/CheckLocationList" },
          "tags": { "$ref": "#/components/schemas/CheckTagList" },
          "alertSettings": {
            "$ref": "#/components/schemas/CheckAlertSettings"
          },
          "useGlobalAlertSettings": {
            "type": "boolean",
            "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
            "default": true
          },
          "groupId": {
            "type": "number",
            "description": "The id of the check group this check is part of.",
            "example": "null"
          },
          "groupOrder": {
            "type": "number",
            "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
            "example": "null",
            "minimum": 0
          },
          "runtimeId": {
            "type": "string",
            "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
            "enum": ["2022.02", "2021.10", "2021.06", "2020.01"]
          },
          "alertChannelSubscriptions": {
            "$ref": "#/components/schemas/Model11"
          },
          "request": { "$ref": "#/components/schemas/Request" },
          "frequency": {
            "type": "integer",
            "description": "How often the check should run in minutes.",
            "default": 10,
            "enum": [0, 1, 5, 10, 15, 30, 60, 720, 1440, 180, 360, 720, 1440]
          },
          "tearDownSnippetId": {
            "type": "number",
            "description": "An ID reference to a snippet to use in the teardown phase of an API check.",
            "example": "null"
          },
          "setupSnippetId": {
            "type": "number",
            "description": "An ID reference to a snippet to use in the setup phase of an API check.",
            "example": "null"
          },
          "frequencyOffset": {
            "type": "integer",
            "description": "Used for setting seconds for check frequencies under 1 minutes and spreading checks over a time range for frequencies over 1 minute. This works as follows: Checks with a frequency of 0 can have a frequencyOffset of 10, 20 or 30 meaning they will run every 10, 20 or 30 seconds. Checks with a frequency lower than and equal to 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.floor(frequency * 10)\", i.e. for a check that runs every 5 minutes the max frequencyOffset is 50. Checks with a frequency higher than 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.ceil(frequency / 60)\", i.e. for a check that runs every 720 minutes, the max frequencyOffset is 12. ",
            "minimum": 1
          },
          "localSetupScript": {
            "type": "string",
            "description": "A valid piece of Node.js code to run in the setup phase.",
            "example": ""
          },
          "localTearDownScript": {
            "type": "string",
            "description": "A valid piece of Node.js code to run in the teardown phase.",
            "example": ""
          },
          "degradedResponseTime": {
            "type": "number",
            "description": "The response time in milliseconds where a check should be considered degraded.",
            "default": 10000,
            "minimum": 0,
            "maximum": 300000
          },
          "maxResponseTime": {
            "type": "number",
            "description": "The response time in milliseconds where a check should be considered failing.",
            "default": 20000,
            "minimum": 0,
            "maximum": 300000
          },
          "privateLocations": {
            "$ref": "#/components/schemas/privateLocations"
          }
        },
        "required": ["name", "activated", "request"]
      },
      "Model14": {
        "type": "array",
        "default": [],
        "items": { "$ref": "#/components/schemas/KeyValue" }
      },
      "Model15": {
        "type": "array",
        "default": [],
        "items": { "$ref": "#/components/schemas/KeyValue" }
      },
      "Model16": {
        "type": "object",
        "description": "Determines the request that the check is going to run.",
        "properties": {
          "method": {
            "type": "string",
            "default": "GET",
            "enum": ["GET", "POST", "PUT", "HEAD", "DELETE", "PATCH"]
          },
          "url": {
            "type": "string",
            "default": "https://api.checklyhq.com",
            "maxLength": 2048
          },
          "followRedirects": { "type": "boolean" },
          "skipSSL": { "type": "boolean", "default": false },
          "body": { "type": "string", "default": "" },
          "bodyType": {
            "type": "string",
            "default": "NONE",
            "enum": ["JSON", "FORM", "RAW", "GRAPHQL", "NONE"]
          },
          "headers": { "$ref": "#/components/schemas/Model14" },
          "queryParameters": { "$ref": "#/components/schemas/Model15" },
          "assertions": { "$ref": "#/components/schemas/AssertionList" },
          "basicAuth": { "$ref": "#/components/schemas/BasicAuth" }
        },
        "required": ["method", "url"]
      },
      "CheckAPI": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "89b50cfd-a5c9-451f-a5a9-21cdce2fac0e"
          },
          "name": {
            "type": "string",
            "description": "The name of the check.",
            "example": "Check"
          },
          "activated": {
            "type": "boolean",
            "description": "Determines if the check is running or not.",
            "default": true
          },
          "muted": {
            "type": "boolean",
            "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
            "default": false
          },
          "doubleCheck": {
            "type": "boolean",
            "description": "Setting this to \"true\" will trigger a retry when a check fails from the failing region and another, randomly selected region before marking the check as failed.",
            "default": true
          },
          "shouldFail": {
            "type": "boolean",
            "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
            "default": false
          },
          "locations": { "$ref": "#/components/schemas/CheckLocationList" },
          "tags": { "$ref": "#/components/schemas/CheckTagList" },
          "alertSettings": {
            "$ref": "#/components/schemas/CheckAlertSettings"
          },
          "useGlobalAlertSettings": {
            "type": "boolean",
            "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
            "default": true
          },
          "groupId": {
            "type": "number",
            "description": "The id of the check group this check is part of.",
            "example": "null"
          },
          "groupOrder": {
            "type": "number",
            "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
            "example": "null",
            "minimum": 0
          },
          "runtimeId": {
            "type": "string",
            "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
            "enum": ["2022.02", "2021.10", "2021.06", "2020.01"]
          },
          "alertChannelSubscriptions": {
            "$ref": "#/components/schemas/CheckAlertChannelSubscriptionList"
          },
          "request": { "$ref": "#/components/schemas/Model16" },
          "frequency": {
            "type": "integer",
            "description": "How often the check should run in minutes.",
            "default": 10,
            "enum": [0, 1, 5, 10, 15, 30, 60, 720, 1440, 180, 360, 720, 1440]
          },
          "frequencyOffset": {
            "type": "integer",
            "description": "Used for setting seconds for check frequencies under 1 minutes (only for API checks) and spreading checks over a time range for frequencies over 1 minute. This works as follows: Checks with a frequency of 0 can have a frequencyOffset of 10, 20 or 30 meaning they will run every 10, 20 or 30 seconds. Checks with a frequency lower than and equal to 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.floor(frequency * 10)\", i.e. for a check that runs every 5 minutes the max frequencyOffset is 50. Checks with a frequency higher than 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.ceil(frequency / 60)\", i.e. for a check that runs every 720 minutes, the max frequencyOffset is 12. ",
            "minimum": 1
          },
          "tearDownSnippetId": {
            "type": "number",
            "description": "An ID reference to a snippet to use in the teardown phase of an API check."
          },
          "setupSnippetId": {
            "type": "number",
            "description": "An ID reference to a snippet to use in the setup phase of an API check."
          },
          "localSetupScript": {
            "type": "string",
            "description": "A valid piece of Node.js code to run in the setup phase.",
            "example": ""
          },
          "localTearDownScript": {
            "type": "string",
            "description": "A valid piece of Node.js code to run in the teardown phase.",
            "example": ""
          },
          "degradedResponseTime": {
            "type": "number",
            "description": "The response time in milliseconds where a check should be considered degraded.",
            "default": 10000,
            "minimum": 0,
            "maximum": 300000
          },
          "maxResponseTime": {
            "type": "number",
            "description": "The response time in milliseconds where a check should be considered failing.",
            "default": 20000,
            "minimum": 0,
            "maximum": 300000
          },
          "privateLocations": {
            "$ref": "#/components/schemas/privateLocations"
          },
          "checkType": { "type": "string", "enum": ["API"] },
          "alertChannels": {
            "$ref": "#/components/schemas/CheckAlertChannels"
          },
          "created_at": { "type": "string", "format": "date" },
          "updated_at": { "type": "string", "format": "date-time" }
        },
        "required": ["name", "activated"]
      },
      "Model17": {
        "type": "array",
        "description": "List of alert channel subscriptions.",
        "example": [],
        "items": { "$ref": "#/components/schemas/Model1" }
      },
      "Model18": {
        "type": "array",
        "default": [],
        "items": { "$ref": "#/components/schemas/KeyValue" }
      },
      "Model19": {
        "type": "array",
        "default": [],
        "items": { "$ref": "#/components/schemas/KeyValue" }
      },
      "Model20": {
        "type": "object",
        "description": "Determines the request that the check is going to run.",
        "properties": {
          "method": {
            "type": "string",
            "default": "GET",
            "enum": ["GET", "POST", "PUT", "HEAD", "DELETE", "PATCH"]
          },
          "url": {
            "type": "string",
            "default": "https://api.checklyhq.com",
            "maxLength": 2048
          },
          "followRedirects": { "type": "boolean" },
          "skipSSL": { "type": "boolean", "default": false },
          "body": { "type": "string", "default": "" },
          "bodyType": {
            "type": "string",
            "default": "NONE",
            "enum": ["JSON", "FORM", "RAW", "GRAPHQL", "NONE"]
          },
          "headers": { "$ref": "#/components/schemas/Model18" },
          "queryParameters": { "$ref": "#/components/schemas/Model19" },
          "assertions": { "$ref": "#/components/schemas/AssertionList" },
          "basicAuth": { "$ref": "#/components/schemas/BasicAuth" }
        },
        "required": ["method", "url"]
      },
      "CheckAPIUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the check.",
            "example": "Check"
          },
          "activated": {
            "type": "boolean",
            "description": "Determines if the check is running or not.",
            "default": true
          },
          "muted": {
            "type": "boolean",
            "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
            "default": false
          },
          "doubleCheck": {
            "type": "boolean",
            "description": "Setting this to \"true\" will trigger a retry when a check fails from the failing region and another, randomly selected region before marking the check as failed.",
            "default": true
          },
          "shouldFail": {
            "type": "boolean",
            "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
            "default": false
          },
          "locations": { "$ref": "#/components/schemas/CheckLocationList" },
          "tags": { "$ref": "#/components/schemas/CheckTagList" },
          "alertSettings": {
            "$ref": "#/components/schemas/CheckAlertSettings"
          },
          "useGlobalAlertSettings": {
            "type": "boolean",
            "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
            "default": true
          },
          "groupId": {
            "type": "number",
            "description": "The id of the check group this check is part of.",
            "example": "null"
          },
          "groupOrder": {
            "type": "number",
            "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
            "example": "null",
            "minimum": 0
          },
          "runtimeId": {
            "type": "string",
            "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
            "enum": ["2022.02", "2021.10", "2021.06", "2020.01"]
          },
          "alertChannelSubscriptions": {
            "$ref": "#/components/schemas/Model17"
          },
          "request": { "$ref": "#/components/schemas/Model20" },
          "frequency": {
            "type": "integer",
            "description": "How often the check should run in minutes.",
            "default": 10,
            "enum": [0, 1, 5, 10, 15, 30, 60, 720, 1440, 180, 360, 720, 1440]
          },
          "tearDownSnippetId": {
            "type": "number",
            "description": "An ID reference to a snippet to use in the teardown phase of an API check.",
            "example": "null"
          },
          "setupSnippetId": {
            "type": "number",
            "description": "An ID reference to a snippet to use in the setup phase of an API check.",
            "example": "null"
          },
          "frequencyOffset": {
            "type": "integer",
            "description": "Used for setting seconds for check frequencies under 1 minutes and spreading checks over a time range for frequencies over 1 minute. This works as follows: Checks with a frequency of 0 can have a frequencyOffset of 10, 20 or 30 meaning they will run every 10, 20 or 30 seconds. Checks with a frequency lower than and equal to 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.floor(frequency * 10)\", i.e. for a check that runs every 5 minutes the max frequencyOffset is 50. Checks with a frequency higher than 60 can have a frequencyOffset between 1 and a max value based on the formula \"Math.ceil(frequency / 60)\", i.e. for a check that runs every 720 minutes, the max frequencyOffset is 12. ",
            "minimum": 1
          },
          "localSetupScript": {
            "type": "string",
            "description": "A valid piece of Node.js code to run in the setup phase.",
            "example": ""
          },
          "localTearDownScript": {
            "type": "string",
            "description": "A valid piece of Node.js code to run in the teardown phase.",
            "example": ""
          },
          "degradedResponseTime": {
            "type": "number",
            "description": "The response time in milliseconds where a check should be considered degraded.",
            "default": 10000,
            "minimum": 0,
            "maximum": 300000
          },
          "maxResponseTime": {
            "type": "number",
            "description": "The response time in milliseconds where a check should be considered failing.",
            "default": 20000,
            "minimum": 0,
            "maximum": 300000
          },
          "privateLocations": {
            "$ref": "#/components/schemas/privateLocations"
          }
        }
      },
      "Model21": {
        "type": "array",
        "description": "List of alert channel subscriptions.",
        "example": [],
        "items": { "$ref": "#/components/schemas/Model1" }
      },
      "CheckBrowserCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the check.",
            "example": "Check"
          },
          "activated": {
            "type": "boolean",
            "description": "Determines if the check is running or not.",
            "default": true
          },
          "muted": {
            "type": "boolean",
            "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
            "default": false
          },
          "doubleCheck": {
            "type": "boolean",
            "description": "Setting this to \"true\" will trigger a retry when a check fails from the failing region and another, randomly selected region before marking the check as failed.",
            "default": true
          },
          "shouldFail": {
            "type": "boolean",
            "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
            "default": false
          },
          "locations": { "$ref": "#/components/schemas/CheckLocationList" },
          "tags": { "$ref": "#/components/schemas/CheckTagList" },
          "alertSettings": {
            "$ref": "#/components/schemas/CheckAlertSettings"
          },
          "useGlobalAlertSettings": {
            "type": "boolean",
            "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
            "default": true
          },
          "groupId": {
            "type": "number",
            "description": "The id of the check group this check is part of.",
            "example": "null"
          },
          "groupOrder": {
            "type": "number",
            "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
            "example": "null",
            "minimum": 0
          },
          "runtimeId": {
            "type": "string",
            "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
            "enum": ["2022.02", "2021.10", "2021.06", "2020.01"]
          },
          "alertChannelSubscriptions": {
            "$ref": "#/components/schemas/Model21"
          },
          "environmentVariables": {
            "$ref": "#/components/schemas/environmentVariables"
          },
          "frequency": {
            "type": "integer",
            "description": "How often the check should run in minutes.",
            "default": 10,
            "enum": [1, 5, 10, 15, 30, 60, 720, 1440, 180, 360, 720, 1440]
          },
          "script": {
            "type": "string",
            "description": "A valid piece of Node.js javascript code describing a browser interaction with the Puppeteer or Playwright frameworks.",
            "example": "const { chromium } = require(\"playwright\");\n(async () => {\n\n  // launch the browser and open a new page\n  const browser = await chromium.launch();\n  const page = await browser.newPage();\n\n  // navigate to our target web page\n  await page.goto(\"https://danube-webshop.herokuapp.com/\");\n\n  // click on the login button and go through the login procedure\n  await page.click(\"#login\");\n  await page.type(\"#n-email\", \"user@email.com\");\n  await page.type(\"#n-password2\", \"supersecure1\");\n  await page.click(\"#goto-signin-btn\");\n\n  // wait until the login confirmation message is shown\n  await page.waitForSelector(\"#login-message\", { visible: true });\n\n  // close the browser and terminate the session\n  await browser.close();\n})();"
          },
          "privateLocations": {
            "$ref": "#/components/schemas/privateLocations"
          }
        },
        "required": ["name", "activated", "script"]
      },
      "CheckBrowser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "f66ee8a2-9d7e-4edd-bf8f-dd44625c2145"
          },
          "name": {
            "type": "string",
            "description": "The name of the check.",
            "example": "Check"
          },
          "activated": {
            "type": "boolean",
            "description": "Determines if the check is running or not.",
            "default": true
          },
          "muted": {
            "type": "boolean",
            "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
            "default": false
          },
          "doubleCheck": {
            "type": "boolean",
            "description": "Setting this to \"true\" will trigger a retry when a check fails from the failing region and another, randomly selected region before marking the check as failed.",
            "default": true
          },
          "shouldFail": {
            "type": "boolean",
            "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
            "default": false
          },
          "locations": { "$ref": "#/components/schemas/CheckLocationList" },
          "tags": { "$ref": "#/components/schemas/CheckTagList" },
          "alertSettings": {
            "$ref": "#/components/schemas/CheckAlertSettings"
          },
          "useGlobalAlertSettings": {
            "type": "boolean",
            "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
            "default": true
          },
          "groupId": {
            "type": "number",
            "description": "The id of the check group this check is part of.",
            "example": "null"
          },
          "groupOrder": {
            "type": "number",
            "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
            "example": "null",
            "minimum": 0
          },
          "runtimeId": {
            "type": "string",
            "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
            "enum": ["2022.02", "2021.10", "2021.06", "2020.01"]
          },
          "alertChannelSubscriptions": {
            "$ref": "#/components/schemas/CheckAlertChannelSubscriptionList"
          },
          "checkType": { "type": "string", "enum": ["BROWSER"] },
          "frequency": {
            "type": "integer",
            "description": "How often the check should run in minutes.",
            "default": 10,
            "enum": [1, 5, 10, 15, 30, 60, 720, 1440, 180, 360, 720, 1440]
          },
          "script": {
            "type": "string",
            "description": "A valid piece of Node.js javascript code describing a browser interaction with the Puppeteer or Playwright frameworks."
          },
          "privateLocations": {
            "$ref": "#/components/schemas/privateLocations"
          },
          "alertChannels": {
            "$ref": "#/components/schemas/CheckAlertChannels"
          },
          "created_at": { "type": "string", "format": "date" },
          "updated_at": { "type": "string", "format": "date-time" }
        },
        "required": ["name", "activated", "script"]
      },
      "Model22": {
        "type": "array",
        "description": "List of alert channel subscriptions.",
        "example": [],
        "items": { "$ref": "#/components/schemas/Model1" }
      },
      "CheckBrowserUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the check.",
            "example": "Check"
          },
          "activated": {
            "type": "boolean",
            "description": "Determines if the check is running or not.",
            "default": true
          },
          "muted": {
            "type": "boolean",
            "description": "Determines if any notifications will be send out when a check fails and/or recovers.",
            "default": false
          },
          "doubleCheck": {
            "type": "boolean",
            "description": "Setting this to \"true\" will trigger a retry when a check fails from the failing region and another, randomly selected region before marking the check as failed.",
            "default": true
          },
          "shouldFail": {
            "type": "boolean",
            "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.",
            "default": false
          },
          "locations": { "$ref": "#/components/schemas/CheckLocationList" },
          "tags": { "$ref": "#/components/schemas/CheckTagList" },
          "alertSettings": {
            "$ref": "#/components/schemas/CheckAlertSettings"
          },
          "useGlobalAlertSettings": {
            "type": "boolean",
            "description": "When true, the account level alert setting will be used, not the alert setting defined on this check.",
            "default": true
          },
          "groupId": {
            "type": "number",
            "description": "The id of the check group this check is part of.",
            "example": "null"
          },
          "groupOrder": {
            "type": "number",
            "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.",
            "example": "null",
            "minimum": 0
          },
          "runtimeId": {
            "type": "string",
            "description": "The runtime version, i.e. fixed set of runtime dependencies, used to execute this check.",
            "enum": ["2022.02", "2021.10", "2021.06", "2020.01"]
          },
          "alertChannelSubscriptions": {
            "$ref": "#/components/schemas/Model22"
          },
          "environmentVariables": {
            "$ref": "#/components/schemas/environmentVariables"
          },
          "frequency": {
            "type": "integer",
            "description": "How often the check should run in minutes.",
            "default": 10,
            "enum": [1, 5, 10, 15, 30, 60, 720, 1440, 180, 360, 720, 1440]
          },
          "script": {
            "type": "string",
            "description": "A valid piece of Node.js javascript code describing a browser interaction with the Puppeteer or Playwright frameworks.",
            "example": "const { chromium } = require(\"playwright\");\n(async () => {\n\n  // launch the browser and open a new page\n  const browser = await chromium.launch();\n  const page = await browser.newPage();\n\n  // navigate to our target web page\n  await page.goto(\"https://danube-webshop.herokuapp.com/\");\n\n  // click on the login button and go through the login procedure\n  await page.click(\"#login\");\n  await page.type(\"#n-email\", \"user@email.com\");\n  await page.type(\"#n-password2\", \"supersecure1\");\n  await page.click(\"#goto-signin-btn\");\n\n  // wait until the login confirmation message is shown\n  await page.waitForSelector(\"#login-message\", { visible: true });\n\n  // close the browser and terminate the session\n  await browser.close();\n})();"
          },
          "privateLocations": {
            "$ref": "#/components/schemas/privateLocations"
          }
        }
      },
      "DashboardTagList": {
        "type": "array",
        "description": "A list of one or more tags that filter which checks to display on the dashboard.",
        "example": ["production"],
        "default": [],
        "items": { "type": "string" }
      },
      "Dashboard": {
        "type": "object",
        "properties": {
          "customUrl": {
            "type": "string",
            "description": "A subdomain name under \"checklyhq.com\". Needs to be unique across all users.",
            "example": "status"
          },
          "customDomain": {
            "type": "string",
            "description": "A custom user domain, e.g. \"status.example.com\". See the docs on updating your DNS and SSL usage.",
            "example": "https://status.mycompany.com/"
          },
          "logo": {
            "type": "string",
            "description": "A URL pointing to an image file.",
            "example": "https://static.mycompany.com/static/images/logo.svg"
          },
          "header": {
            "type": "string",
            "description": "A piece of text displayed at the top of your dashboard.",
            "example": "My company status"
          },
          "width": {
            "type": "string",
            "description": "Determines whether to use the full screen or focus in the center.",
            "default": "FULL",
            "enum": ["FULL", "960PX"]
          },
          "refreshRate": {
            "type": "number",
            "description": "How often to refresh the dashboard in seconds.",
            "default": 60,
            "enum": [60, 300, 600]
          },
          "paginate": {
            "type": "boolean",
            "description": "Determines of pagination is on or off.",
            "default": true
          },
          "paginationRate": {
            "type": "number",
            "description": "How often to trigger pagination in seconds.",
            "default": 60,
            "enum": [30, 60, 300]
          },
          "hideTags": {
            "type": "boolean",
            "description": "Show or hide the tags on the dashboard.",
            "default": false
          },
          "tags": { "$ref": "#/components/schemas/DashboardTagList" },
          "dashboardId": { "type": "string", "example": "1" },
          "favicon": {
            "type": "string",
            "description": "A URL pointing to an image file used as dashboard favicon.",
            "example": "https://static.mycompany.com/static/images/icon.svg"
          },
          "link": {
            "type": "string",
            "description": "A URL link to redirect when dashboard logo is clicked on.",
            "example": "https://www.mycompany.com/"
          },
          "description": {
            "type": "string",
            "description": "A piece of text displayed below the header or title of your dashboard.",
            "example": "My dashboard description"
          }
        },
        "required": ["customUrl", "dashboardId"]
      },
      "DashboardCreate": {
        "type": "object",
        "properties": {
          "customUrl": {
            "type": "string",
            "description": "A subdomain name under \"checklyhq.com\". Needs to be unique across all users.",
            "example": "status"
          },
          "customDomain": {
            "type": "string",
            "description": "A custom user domain, e.g. \"status.example.com\". See the docs on updating your DNS and SSL usage.",
            "example": "https://status.mycompany.com/"
          },
          "logo": {
            "type": "string",
            "description": "A URL pointing to an image file.",
            "example": "https://static.mycompany.com/static/images/logo.svg"
          },
          "header": {
            "type": "string",
            "description": "A piece of text displayed at the top of your dashboard.",
            "example": "My company status"
          },
          "width": {
            "type": "string",
            "description": "Determines whether to use the full screen or focus in the center.",
            "default": "FULL",
            "enum": ["FULL", "960PX"]
          },
          "refreshRate": {
            "type": "number",
            "description": "How often to refresh the dashboard in seconds.",
            "default": 60,
            "enum": [60, 300, 600]
          },
          "paginate": {
            "type": "boolean",
            "description": "Determines of pagination is on or off.",
            "default": true
          },
          "paginationRate": {
            "type": "number",
            "description": "How often to trigger pagination in seconds.",
            "default": 60,
            "enum": [30, 60, 300]
          },
          "hideTags": {
            "type": "boolean",
            "description": "Show or hide the tags on the dashboard.",
            "default": false
          },
          "tags": { "$ref": "#/components/schemas/DashboardTagList" },
          "favicon": {
            "type": "string",
            "description": "A URL pointing to an image file used as dashboard favicon.",
            "example": "https://static.mycompany.com/static/images/icon.svg"
          },
          "link": {
            "type": "string",
            "description": "A URL link to redirect when dashboard logo is clicked on.",
            "example": "https://www.mycompany.com/"
          },
          "description": {
            "type": "string",
            "description": "A piece of text displayed below the header or title of your dashboard.",
            "example": "My dashboard description"
          }
        },
        "required": ["customUrl"]
      },
      "Location": {
        "type": "object",
        "properties": {
          "region": {
            "type": "string",
            "description": "The unique identifier of this location.",
            "example": "us-east-1"
          },
          "name": {
            "type": "string",
            "description": "Friendly name of this location.",
            "example": "N. Virginia"
          }
        },
        "required": ["region", "name"]
      },
      "LocationList": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Location" }
      },
      "CheckAssignment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "8629046c-2f39-46bd-8286-10747a6a1ed1"
          },
          "checkId": {
            "type": "string",
            "description": "The ID of the check.",
            "example": "07204816-d700-48e7-a0dd-bbaffebef914"
          },
          "privateLocationId": {
            "type": "string",
            "description": "The ID of the assigned private location.",
            "example": "4c462638-d83f-4412-9300-2d5a68eb324f"
          }
        },
        "required": ["id", "checkId", "privateLocationId"]
      },
      "checkAssignments": {
        "type": "array",
        "description": "The check this private location has assigned.",
        "items": { "$ref": "#/components/schemas/CheckAssignment" }
      },
      "GroupAssignment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "ead9bd94-eb3a-4e88-a918-5fd5b0249792"
          },
          "groupId": {
            "type": "number",
            "description": "The ID of the group.",
            "example": 10
          },
          "privateLocationId": {
            "type": "string",
            "description": "The ID of the assigned private location.",
            "example": "32c7df1e-ae3b-4e83-95e2-2c758385eabd"
          }
        },
        "required": ["id", "groupId", "privateLocationId"]
      },
      "groupAssignments": {
        "type": "array",
        "description": "The group this private location has assigned.",
        "items": { "$ref": "#/components/schemas/GroupAssignment" }
      },
      "privateLocationKeys": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "1bb9d6f1-f1f4-43f4-bbde-a1c2b2232fb2"
          },
          "rawKey": {
            "type": "string",
            "example": "pl_a89026d28a0c45cf9e11b4c3637f3912"
          },
          "maskedKey": {
            "type": "string",
            "description": "The masked key value.",
            "example": "...6a1e"
          },
          "created_at": { "type": "string", "format": "date" },
          "updated_at": { "type": "string", "format": "date" }
        },
        "required": ["id", "rawKey", "maskedKey", "created_at"]
      },
      "keys": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/privateLocationKeys" }
      },
      "privateLocationsSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "09d4f6d4-bfea-49cd-8824-dbeb71195ff0"
          },
          "name": {
            "type": "string",
            "description": "The name assigned to the private location.",
            "example": "New Private Location"
          },
          "slugName": {
            "type": "string",
            "description": "Valid slug name.",
            "example": "new-private-location"
          },
          "icon": {
            "type": "string",
            "description": "The private location icon.",
            "example": "location"
          },
          "created_at": { "type": "string", "format": "date" },
          "updated_at": { "type": "string", "format": "date" },
          "checkAssignments": {
            "$ref": "#/components/schemas/checkAssignments"
          },
          "groupAssignments": {
            "$ref": "#/components/schemas/groupAssignments"
          },
          "keys": { "$ref": "#/components/schemas/keys" },
          "lastSeen": { "type": "string", "format": "date" },
          "agentCount": { "type": "number" }
        },
        "required": ["id", "name", "slugName", "created_at"]
      },
      "privateLocationsListSchema": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/privateLocationsSchema" }
      },
      "privateLocationCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name assigned to the private location.",
            "example": "New Private Location"
          },
          "slugName": {
            "type": "string",
            "description": "Valid slug name.",
            "example": "new-private-location",
            "pattern": "^((?!((us(-gov)?|ap|ca|cn|eu|sa|af|me)-(central|(north|south)?(east|west)?)-\\d+))[a-zA-Z0-9-]{1,30})$"
          },
          "icon": {
            "type": "string",
            "example": "location",
            "default": "location"
          }
        },
        "required": ["name", "slugName"]
      },
      "commonPrivateLocationSchemaResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "09d4f6d4-bfea-49cd-8824-dbeb71195ff0"
          },
          "name": {
            "type": "string",
            "description": "The name assigned to the private location.",
            "example": "New Private Location"
          },
          "slugName": {
            "type": "string",
            "description": "Valid slug name.",
            "example": "new-private-location"
          },
          "icon": {
            "type": "string",
            "description": "The private location icon.",
            "example": "location"
          },
          "created_at": { "type": "string", "format": "date" },
          "updated_at": { "type": "string", "format": "date" },
          "checkAssignments": {
            "$ref": "#/components/schemas/checkAssignments"
          },
          "groupAssignments": {
            "$ref": "#/components/schemas/groupAssignments"
          },
          "keys": { "$ref": "#/components/schemas/keys" }
        },
        "required": ["id", "name", "slugName", "created_at"]
      },
      "privateLocationUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name assigned to the private location.",
            "example": "New Private Location"
          },
          "icon": { "type": "string", "example": "location" }
        },
        "required": ["name"]
      },
      "timestamps": {
        "type": "array",
        "items": { "type": "string", "format": "date-time" }
      },
      "queueSize": { "type": "array", "items": { "type": "number" } },
      "oldestScheduledCheckRun": {
        "type": "array",
        "items": { "type": "number" }
      },
      "privateLocationsMetricsHistoryResponseSchema": {
        "type": "object",
        "properties": {
          "timestamps": { "$ref": "#/components/schemas/timestamps" },
          "queueSize": { "$ref": "#/components/schemas/queueSize" },
          "oldestScheduledCheckRun": {
            "$ref": "#/components/schemas/oldestScheduledCheckRun"
          }
        }
      },
      "ReportingTagList": {
        "type": "array",
        "description": "Check tags.",
        "example": ["production"],
        "items": { "type": "string" }
      },
      "ReportingAggregate": {
        "type": "object",
        "properties": {
          "successRatio": {
            "type": "number",
            "description": "Success ratio of the check over selected date range. Percentage is in decimal form.",
            "example": 50,
            "minimum": 0
          },
          "avg": {
            "type": "number",
            "description": "Average response time of the check over selected date range in milliseconds.",
            "example": 100,
            "minimum": 0
          },
          "p95": {
            "type": "number",
            "description": "P95 response time of the check over selected date range in milliseconds.",
            "example": 200,
            "minimum": 0
          },
          "p99": {
            "type": "number",
            "description": "P99 response time of the check over selected date range in milliseconds.",
            "example": 100,
            "minimum": 0
          }
        },
        "required": ["successRatio", "avg", "p95", "p99"]
      },
      "Reporting": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Check name.",
            "example": "API Check"
          },
          "checkId": {
            "type": "string",
            "description": "Check ID.",
            "example": "c637d407-4769-4a17-bfdc-fd3da902d61d"
          },
          "checkType": {
            "type": "string",
            "description": "Check type.",
            "example": "API"
          },
          "deactivated": {
            "type": "boolean",
            "description": "Check deactivated.",
            "default": false
          },
          "tags": { "$ref": "#/components/schemas/ReportingTagList" },
          "aggregate": { "$ref": "#/components/schemas/ReportingAggregate" }
        },
        "required": ["name", "checkId", "checkType", "deactivated", "tags"]
      },
      "ReportingList": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Reporting" }
      },
      "Runtime": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The unique name of this runtime.",
            "example": "2021.10"
          },
          "stage": {
            "type": "string",
            "description": "Current life stage of a runtime.",
            "example": "STABLE",
            "enum": ["BETA", "CURRENT", "DEPRECATED", "REMOVED", "STABLE"]
          },
          "runtimeEndOfLife": {
            "type": "string",
            "description": "Date which a runtime will be removed from our platform.",
            "example": "12/31/2022"
          },
          "default": {
            "type": "boolean",
            "description": "Indicates if this is the current default runtime provided by Checkly."
          },
          "description": {
            "type": "string",
            "description": "A short, human readable description of the main updates in this runtime.",
            "example": "Main updates are Playwright 1.15.2 and Puppeteer 10.4.0"
          },
          "dependencies": {
            "type": "object",
            "description": "An object with all dependency package names and versions as in a standard package.json.",
            "example": {
              "playwright": "1.20.1",
              "puppeteer": "13.5.1",
              "aws4": "1.11.0",
              "axios": "0.26.0",
              "btoa": "1.2.1",
              "chai": "4.3.4",
              "chai-string": "1.5.0",
              "crypto-js": "4.1.1",
              "expect": "27.5.1",
              "@faker-js/faker": "5.5.3",
              "form-data": "4.0.0",
              "jsonwebtoken": "8.5.1",
              "lodash": "4.17.21",
              "mocha": "9.2.3",
              "moment": "2.29.1",
              "node": "14.x",
              "request": "2.88.2",
              "request-promise": "4.2.2",
              "uuid": "8.3.2",
              "@opentelemetry/api": "^1.0.4",
              "@opentelemetry/sdk-trace-base": "^1.0.1"
            },
            "properties": { "string": { "type": "string" } }
          }
        },
        "required": ["name", "default", "dependencies"]
      },
      "RuntimeList": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Runtime" }
      },
      "CheckGroupTrigger": {
        "type": "object",
        "properties": {
          "id": { "type": "number", "example": 1 },
          "token": { "type": "string", "example": "h7QMmh8c0hYw" },
          "created_at": { "type": "string", "format": "date" },
          "called_at": { "type": "string", "format": "date" },
          "updated_at": { "type": "string", "format": "date" },
          "groupId": { "type": "number", "example": 1 }
        },
        "required": ["id", "token", "created_at", "groupId"]
      },
      "CheckTrigger": {
        "type": "object",
        "properties": {
          "id": { "type": "number", "example": 1 },
          "token": { "type": "string", "example": "h7QMmh8c0hYw" },
          "created_at": { "type": "string", "format": "date" },
          "called_at": { "type": "string", "format": "date" },
          "updated_at": { "type": "string", "format": "date" },
          "checkId": {
            "type": "string",
            "example": "ceb6ffac-7657-4749-a937-f89c10b1e122"
          }
        },
        "required": ["id", "token", "created_at", "checkId"]
      },
      "EnvironmentVariableUpdate": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The key of the environment variable (this value cannot be changed).",
            "example": "API_KEY"
          },
          "value": {
            "type": "string",
            "description": "The value of the environment variable.",
            "example": "bAxD7biGCZL6K60Q"
          },
          "locked": {
            "type": "boolean",
            "description": "Used only in the UI to hide the value like a password.",
            "default": false
          }
        },
        "required": ["value"]
      }
    }
  }
}
