{
  "openapi": "3.0.0",
  "info": {
    "version": "2019-12-02",
    "x-release": "v4",
    "title": "Amazon EventBridge Schema Registry",
    "description": "Amazon EventBridge Schema Registry",
    "x-logo": {
      "url": "/logos/aws/Arch_Amazon-EventBridge_64.svg"
    },
    "termsOfService": "https://aws.amazon.com/service-terms/",
    "contact": {
      "name": "Mike Ralphson",
      "email": "mike.ralphson@gmail.com",
      "url": "https://github.com/mermade/aws2openapi",
      "x-twitter": "PermittedSoc"
    },
    "license": {
      "name": "Apache 2.0 License",
      "url": "http://www.apache.org/licenses/"
    },
    "x-providerName": "amazonaws.com",
    "x-serviceName": "schemas",
    "x-origin": [
      {
        "contentType": "application/json",
        "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/schemas-2019-12-02.normal.json",
        "converter": {
          "url": "https://github.com/mermade/aws2openapi",
          "version": "1.0.0"
        },
        "x-apisguru-driver": "external"
      }
    ],
    "x-apiClientRegistration": {
      "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
    },
    "x-apisguru-categories": ["cloud"],
    "x-preferred": true
  },
  "externalDocs": {
    "description": "Amazon Web Services documentation",
    "url": "https://docs.aws.amazon.com/schemas/"
  },
  "servers": [
    {
      "url": "http://schemas.{region}.amazonaws.com",
      "variables": {
        "region": {
          "description": "The AWS region",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "us-gov-west-1",
            "us-gov-east-1",
            "ca-central-1",
            "eu-north-1",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "eu-south-1",
            "af-south-1",
            "ap-northeast-1",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-east-1",
            "ap-south-1",
            "sa-east-1",
            "me-south-1"
          ],
          "default": "us-east-1"
        }
      },
      "description": "The Schemas multi-region endpoint"
    },
    {
      "url": "https://schemas.{region}.amazonaws.com",
      "variables": {
        "region": {
          "description": "The AWS region",
          "enum": [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "us-gov-west-1",
            "us-gov-east-1",
            "ca-central-1",
            "eu-north-1",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "eu-south-1",
            "af-south-1",
            "ap-northeast-1",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-east-1",
            "ap-south-1",
            "sa-east-1",
            "me-south-1"
          ],
          "default": "us-east-1"
        }
      },
      "description": "The Schemas multi-region endpoint"
    },
    {
      "url": "http://schemas.{region}.amazonaws.com.cn",
      "variables": {
        "region": {
          "description": "The AWS region",
          "enum": ["cn-north-1", "cn-northwest-1"],
          "default": "cn-north-1"
        }
      },
      "description": "The Schemas endpoint for China (Beijing) and China (Ningxia)"
    },
    {
      "url": "https://schemas.{region}.amazonaws.com.cn",
      "variables": {
        "region": {
          "description": "The AWS region",
          "enum": ["cn-north-1", "cn-northwest-1"],
          "default": "cn-north-1"
        }
      },
      "description": "The Schemas endpoint for China (Beijing) and China (Ningxia)"
    }
  ],
  "x-hasEquivalentPaths": true,
  "paths": {
    "/v1/discoverers": {
      "post": {
        "operationId": "CreateDiscoverer",
        "description": "Creates a discoverer.",
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateDiscovererResponse"
                }
              }
            }
          },
          "480": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedException"
                }
              }
            }
          },
          "483": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableException"
                }
              }
            }
          },
          "485": {
            "description": "ConflictException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictException"
                }
              }
            }
          }
        },
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["SourceArn"],
                "properties": {
                  "Description": {
                    "description": "A description for the discoverer.",
                    "type": "string",
                    "minLength": 0,
                    "maxLength": 256
                  },
                  "SourceArn": {
                    "description": "The ARN of the event bus.",
                    "type": "string",
                    "minLength": 20,
                    "maxLength": 1600
                  },
                  "tags": {
                    "description": "Key-value pairs associated with a resource.",
                    "type": "object",
                    "additionalProperties": {
                      "$ref": "#/components/schemas/__string"
                    }
                  },
                  "CrossAccount": {
                    "description": "Support discovery of schemas in events sent to the bus from another account. (default: true).",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "summary": "Create Discoverer"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ],
      "get": {
        "operationId": "ListDiscoverers",
        "description": "List the discoverers.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListDiscoverersResponse"
                }
              }
            }
          },
          "480": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableException"
                }
              }
            }
          },
          "481": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedException"
                }
              }
            }
          },
          "483": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          },
          "484": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "discovererIdPrefix",
            "in": "query",
            "required": false,
            "description": "Specifying this limits the results to only those discoverer IDs that start with the specified prefix.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "nextToken",
            "in": "query",
            "required": false,
            "description": "The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sourceArnPrefix",
            "in": "query",
            "required": false,
            "description": "Specifying this limits the results to only those ARNs that start with the specified prefix.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Pagination limit",
            "required": false
          },
          {
            "name": "NextToken",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Pagination token",
            "required": false
          }
        ],
        "summary": "List Discoverers"
      }
    },
    "/v1/registries/name/{registryName}": {
      "post": {
        "operationId": "CreateRegistry",
        "description": "Creates a registry.",
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateRegistryResponse"
                }
              }
            }
          },
          "480": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedException"
                }
              }
            }
          },
          "483": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableException"
                }
              }
            }
          },
          "485": {
            "description": "ConflictException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "registryName",
            "in": "path",
            "required": true,
            "description": "The name of the registry.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Description": {
                    "description": "A description of the registry to be created.",
                    "type": "string",
                    "minLength": 0,
                    "maxLength": 256
                  },
                  "tags": {
                    "description": "Key-value pairs associated with a resource.",
                    "type": "object",
                    "additionalProperties": {
                      "$ref": "#/components/schemas/__string"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Create Registry"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ],
      "delete": {
        "operationId": "DeleteRegistry",
        "description": "Deletes a Registry.",
        "responses": {
          "204": {
            "description": "Success"
          },
          "480": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "481": {
            "description": "UnauthorizedException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedException"
                }
              }
            }
          },
          "482": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          },
          "483": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "484": {
            "description": "NotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundException"
                }
              }
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "registryName",
            "in": "path",
            "required": true,
            "description": "The name of the registry.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Delete Registry"
      },
      "get": {
        "operationId": "DescribeRegistry",
        "description": "Describes the registry.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeRegistryResponse"
                }
              }
            }
          },
          "480": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "481": {
            "description": "UnauthorizedException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedException"
                }
              }
            }
          },
          "482": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          },
          "483": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "484": {
            "description": "NotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundException"
                }
              }
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "registryName",
            "in": "path",
            "required": true,
            "description": "The name of the registry.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Describe Registry"
      },
      "put": {
        "operationId": "UpdateRegistry",
        "description": "Updates a registry.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateRegistryResponse"
                }
              }
            }
          },
          "480": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "481": {
            "description": "UnauthorizedException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedException"
                }
              }
            }
          },
          "482": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          },
          "483": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "484": {
            "description": "NotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundException"
                }
              }
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "registryName",
            "in": "path",
            "required": true,
            "description": "The name of the registry.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Description": {
                    "description": "The description of the registry to update.",
                    "type": "string",
                    "minLength": 0,
                    "maxLength": 256
                  }
                }
              }
            }
          }
        },
        "summary": "Update Registry"
      }
    },
    "/v1/registries/name/{registryName}/schemas/name/{schemaName}": {
      "post": {
        "operationId": "CreateSchema",
        "description": "<p>Creates a schema definition.</p> <note><p>Inactive schemas will be deleted after two years.</p></note>",
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSchemaResponse"
                }
              }
            }
          },
          "480": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableException"
                }
              }
            }
          },
          "481": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "482": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          },
          "483": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "registryName",
            "in": "path",
            "required": true,
            "description": "The name of the registry.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaName",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["Content", "Type"],
                "properties": {
                  "Content": {
                    "description": "The source of the schema definition.",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 100000
                  },
                  "Description": {
                    "description": "A description of the schema.",
                    "type": "string",
                    "minLength": 0,
                    "maxLength": 256
                  },
                  "tags": {
                    "description": "Key-value pairs associated with a resource.",
                    "type": "object",
                    "additionalProperties": {
                      "$ref": "#/components/schemas/__string"
                    }
                  },
                  "Type": {
                    "description": "The type of schema.",
                    "type": "string",
                    "enum": ["OpenApi3", "JSONSchemaDraft4"]
                  }
                }
              }
            }
          }
        },
        "summary": "Create Schema"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ],
      "delete": {
        "operationId": "DeleteSchema",
        "description": "Delete a schema definition.",
        "responses": {
          "204": {
            "description": "Success"
          },
          "480": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "481": {
            "description": "UnauthorizedException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedException"
                }
              }
            }
          },
          "482": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          },
          "483": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "484": {
            "description": "NotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundException"
                }
              }
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "registryName",
            "in": "path",
            "required": true,
            "description": "The name of the registry.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaName",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Delete Schema"
      },
      "get": {
        "operationId": "DescribeSchema",
        "description": "Retrieve the schema definition.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeSchemaResponse"
                }
              }
            }
          },
          "480": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "481": {
            "description": "UnauthorizedException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedException"
                }
              }
            }
          },
          "482": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          },
          "483": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "484": {
            "description": "NotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundException"
                }
              }
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "registryName",
            "in": "path",
            "required": true,
            "description": "The name of the registry.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaName",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaVersion",
            "in": "query",
            "required": false,
            "description": "Specifying this limits the results to only this schema version.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Describe Schema"
      },
      "put": {
        "operationId": "UpdateSchema",
        "description": "<p>Updates the schema definition</p> <note><p>Inactive schemas will be deleted after two years.</p></note>",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateSchemaResponse"
                }
              }
            }
          },
          "480": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "481": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          },
          "482": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "483": {
            "description": "NotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundException"
                }
              }
            }
          },
          "484": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "registryName",
            "in": "path",
            "required": true,
            "description": "The name of the registry.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaName",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ClientTokenId": {
                    "description": "The ID of the client token.",
                    "type": "string",
                    "minLength": 0,
                    "maxLength": 36
                  },
                  "Content": {
                    "description": "The source of the schema definition.",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 100000
                  },
                  "Description": {
                    "description": "The description of the schema.",
                    "type": "string",
                    "minLength": 0,
                    "maxLength": 256
                  },
                  "Type": {
                    "description": "The schema type for the events schema.",
                    "type": "string",
                    "enum": ["OpenApi3", "JSONSchemaDraft4"]
                  }
                }
              }
            }
          }
        },
        "summary": "Update Schema"
      }
    },
    "/v1/discoverers/id/{discovererId}": {
      "delete": {
        "operationId": "DeleteDiscoverer",
        "description": "Deletes a discoverer.",
        "responses": {
          "204": {
            "description": "Success"
          },
          "480": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "481": {
            "description": "UnauthorizedException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedException"
                }
              }
            }
          },
          "482": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          },
          "483": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "484": {
            "description": "NotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundException"
                }
              }
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "discovererId",
            "in": "path",
            "required": true,
            "description": "The ID of the discoverer.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Delete Discoverer"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ],
      "get": {
        "operationId": "DescribeDiscoverer",
        "description": "Describes the discoverer.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeDiscovererResponse"
                }
              }
            }
          },
          "480": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "481": {
            "description": "UnauthorizedException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedException"
                }
              }
            }
          },
          "482": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          },
          "483": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "484": {
            "description": "NotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundException"
                }
              }
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "discovererId",
            "in": "path",
            "required": true,
            "description": "The ID of the discoverer.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Describe Discoverer"
      },
      "put": {
        "operationId": "UpdateDiscoverer",
        "description": "Updates the discoverer",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateDiscovererResponse"
                }
              }
            }
          },
          "480": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "481": {
            "description": "UnauthorizedException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedException"
                }
              }
            }
          },
          "482": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          },
          "483": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "484": {
            "description": "NotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundException"
                }
              }
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "discovererId",
            "in": "path",
            "required": true,
            "description": "The ID of the discoverer.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Description": {
                    "description": "The description of the discoverer to update.",
                    "type": "string",
                    "minLength": 0,
                    "maxLength": 256
                  },
                  "CrossAccount": {
                    "description": "Support discovery of schemas in events sent to the bus from another account. (default: true)",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "summary": "Update Discoverer"
      }
    },
    "/v1/policy": {
      "delete": {
        "operationId": "DeleteResourcePolicy",
        "description": "Delete the resource-based policy attached to the specified registry.",
        "responses": {
          "204": {
            "description": "Success"
          },
          "480": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "481": {
            "description": "UnauthorizedException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedException"
                }
              }
            }
          },
          "482": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          },
          "483": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "484": {
            "description": "NotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundException"
                }
              }
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "registryName",
            "in": "query",
            "required": false,
            "description": "The name of the registry.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Delete Resource Policy"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ],
      "get": {
        "operationId": "GetResourcePolicy",
        "description": "Retrieves the resource-based policy attached to a given registry.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetResourcePolicyResponse"
                }
              }
            }
          },
          "480": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "481": {
            "description": "UnauthorizedException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedException"
                }
              }
            }
          },
          "482": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          },
          "483": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "484": {
            "description": "NotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundException"
                }
              }
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "registryName",
            "in": "query",
            "required": false,
            "description": "The name of the registry.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Get Resource Policy"
      },
      "put": {
        "operationId": "PutResourcePolicy",
        "description": "The name of the policy.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PutResourcePolicyResponse"
                }
              }
            }
          },
          "480": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "481": {
            "description": "UnauthorizedException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedException"
                }
              }
            }
          },
          "482": {
            "description": "PreconditionFailedException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreconditionFailedException"
                }
              }
            }
          },
          "483": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          },
          "484": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "485": {
            "description": "NotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundException"
                }
              }
            }
          },
          "486": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "registryName",
            "in": "query",
            "required": false,
            "description": "The name of the registry.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["Policy"],
                "properties": {
                  "Policy": {
                    "description": "The resource-based policy.",
                    "type": "string"
                  },
                  "RevisionId": {
                    "description": "The revision ID of the policy.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "summary": "Put Resource Policy"
      }
    },
    "/v1/registries/name/{registryName}/schemas/name/{schemaName}/version/{schemaVersion}": {
      "delete": {
        "operationId": "DeleteSchemaVersion",
        "description": "Delete the schema version definition",
        "responses": {
          "204": {
            "description": "Success"
          },
          "480": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "481": {
            "description": "UnauthorizedException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedException"
                }
              }
            }
          },
          "482": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          },
          "483": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "484": {
            "description": "NotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundException"
                }
              }
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "registryName",
            "in": "path",
            "required": true,
            "description": "The name of the registry.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaName",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaVersion",
            "in": "path",
            "required": true,
            "description": "The version number of the schema",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Delete Schema Version"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/v1/registries/name/{registryName}/schemas/name/{schemaName}/language/{language}": {
      "get": {
        "operationId": "DescribeCodeBinding",
        "description": "Describe the code binding URI.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeCodeBindingResponse"
                }
              }
            }
          },
          "480": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "481": {
            "description": "UnauthorizedException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedException"
                }
              }
            }
          },
          "482": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          },
          "483": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "484": {
            "description": "NotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundException"
                }
              }
            }
          },
          "485": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "description": "The language of the code binding.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "registryName",
            "in": "path",
            "required": true,
            "description": "The name of the registry.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaName",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaVersion",
            "in": "query",
            "required": false,
            "description": "Specifying this limits the results to only this schema version.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Describe Code Binding"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "operationId": "PutCodeBinding",
        "description": "Put code binding URI",
        "responses": {
          "202": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PutCodeBindingResponse"
                }
              }
            }
          },
          "480": {
            "description": "GoneException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GoneException"
                }
              }
            }
          },
          "481": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedException"
                }
              }
            }
          },
          "483": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          },
          "484": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "485": {
            "description": "NotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundException"
                }
              }
            }
          },
          "486": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "description": "The language of the code binding.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "registryName",
            "in": "path",
            "required": true,
            "description": "The name of the registry.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaName",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaVersion",
            "in": "query",
            "required": false,
            "description": "Specifying this limits the results to only this schema version.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Put Code Binding"
      }
    },
    "/v1/registries/name/{registryName}/schemas/name/{schemaName}/language/{language}/source": {
      "get": {
        "operationId": "GetCodeBindingSource",
        "description": "Get the code binding source URI.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCodeBindingSourceResponse"
                }
              }
            }
          },
          "480": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "481": {
            "description": "UnauthorizedException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedException"
                }
              }
            }
          },
          "482": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          },
          "483": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "484": {
            "description": "NotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundException"
                }
              }
            }
          },
          "485": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "description": "The language of the code binding.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "registryName",
            "in": "path",
            "required": true,
            "description": "The name of the registry.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaName",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaVersion",
            "in": "query",
            "required": false,
            "description": "Specifying this limits the results to only this schema version.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Get Code Binding Source"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/v1/discover": {
      "post": {
        "operationId": "GetDiscoveredSchema",
        "description": "Get the discovered schema that was generated based on sampled events.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDiscoveredSchemaResponse"
                }
              }
            }
          },
          "480": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableException"
                }
              }
            }
          },
          "481": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedException"
                }
              }
            }
          },
          "483": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          },
          "484": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          }
        },
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["Events", "Type"],
                "properties": {
                  "Events": {
                    "description": "An array of strings where each string is a JSON event. These are the events that were used to generate the schema. The array includes a single type of event and has a maximum size of 10 events.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/GetDiscoveredSchemaVersionItemInput"
                    },
                    "minItems": 1,
                    "maxItems": 10
                  },
                  "Type": {
                    "description": "The type of event.",
                    "type": "string",
                    "enum": ["OpenApi3", "JSONSchemaDraft4"]
                  }
                }
              }
            }
          }
        },
        "summary": "Get Discovered Schema"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/v1/registries": {
      "get": {
        "operationId": "ListRegistries",
        "description": "List the registries.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListRegistriesResponse"
                }
              }
            }
          },
          "480": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableException"
                }
              }
            }
          },
          "481": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedException"
                }
              }
            }
          },
          "483": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          },
          "484": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "nextToken",
            "in": "query",
            "required": false,
            "description": "The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "registryNamePrefix",
            "in": "query",
            "required": false,
            "description": "Specifying this limits the results to only those registry names that start with the specified prefix.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "description": "Can be set to Local or AWS to limit responses to your custom registries, or the ones provided by AWS.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Pagination limit",
            "required": false
          },
          {
            "name": "NextToken",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Pagination token",
            "required": false
          }
        ],
        "summary": "List Registries"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/v1/registries/name/{registryName}/schemas/name/{schemaName}/versions": {
      "get": {
        "operationId": "ListSchemaVersions",
        "description": "Provides a list of the schema versions and related information.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListSchemaVersionsResponse"
                }
              }
            }
          },
          "480": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "481": {
            "description": "UnauthorizedException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedException"
                }
              }
            }
          },
          "482": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          },
          "483": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "484": {
            "description": "NotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundException"
                }
              }
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "nextToken",
            "in": "query",
            "required": false,
            "description": "The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "registryName",
            "in": "path",
            "required": true,
            "description": "The name of the registry.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaName",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Pagination limit",
            "required": false
          },
          {
            "name": "NextToken",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Pagination token",
            "required": false
          }
        ],
        "summary": "List Schema Versions"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/v1/registries/name/{registryName}/schemas": {
      "get": {
        "operationId": "ListSchemas",
        "description": "List the schemas.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListSchemasResponse"
                }
              }
            }
          },
          "480": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableException"
                }
              }
            }
          },
          "481": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedException"
                }
              }
            }
          },
          "483": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          },
          "484": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "nextToken",
            "in": "query",
            "required": false,
            "description": "The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "registryName",
            "in": "path",
            "required": true,
            "description": "The name of the registry.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaNamePrefix",
            "in": "query",
            "required": false,
            "description": "Specifying this limits the results to only those schema names that start with the specified prefix.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Pagination limit",
            "required": false
          },
          {
            "name": "NextToken",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Pagination token",
            "required": false
          }
        ],
        "summary": "List Schemas"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/tags/{resource-arn}": {
      "get": {
        "operationId": "ListTagsForResource",
        "description": "Get tags for resource.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListTagsForResourceResponse"
                }
              }
            }
          },
          "480": {
            "description": "NotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundException"
                }
              }
            }
          },
          "481": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "482": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          },
          "483": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "resource-arn",
            "in": "path",
            "required": true,
            "description": "The ARN of the resource.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "List Tags For Resource"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ],
      "post": {
        "operationId": "TagResource",
        "description": "Add tags to a resource.",
        "responses": {
          "204": {
            "description": "Success"
          },
          "480": {
            "description": "NotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundException"
                }
              }
            }
          },
          "481": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "482": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          },
          "483": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "resource-arn",
            "in": "path",
            "required": true,
            "description": "The ARN of the resource.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["tags"],
                "properties": {
                  "tags": {
                    "description": "Key-value pairs associated with a resource.",
                    "type": "object",
                    "additionalProperties": {
                      "$ref": "#/components/schemas/__string"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Tag Resource"
      }
    },
    "/v1/registries/name/{registryName}/schemas/search#keywords": {
      "get": {
        "operationId": "SearchSchemas",
        "description": "Search the schemas",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchSchemasResponse"
                }
              }
            }
          },
          "480": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableException"
                }
              }
            }
          },
          "481": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "482": {
            "description": "UnauthorizedException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedException"
                }
              }
            }
          },
          "483": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          },
          "484": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "keywords",
            "in": "query",
            "required": true,
            "description": "Specifying this limits the results to only schemas that include the provided keywords.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "nextToken",
            "in": "query",
            "required": false,
            "description": "The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "registryName",
            "in": "path",
            "required": true,
            "description": "The name of the registry.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Pagination limit",
            "required": false
          },
          {
            "name": "NextToken",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Pagination token",
            "required": false
          }
        ],
        "summary": "Search Schemas"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/v1/discoverers/id/{discovererId}/start": {
      "post": {
        "operationId": "StartDiscoverer",
        "description": "Starts the discoverer",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StartDiscovererResponse"
                }
              }
            }
          },
          "480": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "481": {
            "description": "UnauthorizedException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedException"
                }
              }
            }
          },
          "482": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          },
          "483": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "484": {
            "description": "NotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundException"
                }
              }
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "discovererId",
            "in": "path",
            "required": true,
            "description": "The ID of the discoverer.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Start Discoverer"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/v1/discoverers/id/{discovererId}/stop": {
      "post": {
        "operationId": "StopDiscoverer",
        "description": "Stops the discoverer",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StopDiscovererResponse"
                }
              }
            }
          },
          "480": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "481": {
            "description": "UnauthorizedException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedException"
                }
              }
            }
          },
          "482": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          },
          "483": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "484": {
            "description": "NotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundException"
                }
              }
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "discovererId",
            "in": "path",
            "required": true,
            "description": "The ID of the discoverer.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Stop Discoverer"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/tags/{resource-arn}#tagKeys": {
      "delete": {
        "operationId": "UntagResource",
        "description": "Removes tags from a resource.",
        "responses": {
          "204": {
            "description": "Success"
          },
          "480": {
            "description": "NotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundException"
                }
              }
            }
          },
          "481": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "482": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          },
          "483": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "resource-arn",
            "in": "path",
            "required": true,
            "description": "The ARN of the resource.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tagKeys",
            "in": "query",
            "required": true,
            "description": "Keys of key-value pairs.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/__string"
              }
            }
          }
        ],
        "summary": "Untag Resource"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ]
    },
    "/v1/registries/name/{registryName}/schemas/name/{schemaName}/export#type": {
      "get": {
        "operationId": "ExportSchema",
        "description": "",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportSchemaResponse"
                }
              }
            }
          },
          "480": {
            "description": "BadRequestException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestException"
                }
              }
            }
          },
          "481": {
            "description": "UnauthorizedException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedException"
                }
              }
            }
          },
          "482": {
            "description": "InternalServerErrorException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorException"
                }
              }
            }
          },
          "483": {
            "description": "ForbiddenException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenException"
                }
              }
            }
          },
          "484": {
            "description": "NotFoundException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundException"
                }
              }
            }
          },
          "485": {
            "description": "ServiceUnavailableException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUnavailableException"
                }
              }
            }
          },
          "486": {
            "description": "TooManyRequestsException",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "registryName",
            "in": "path",
            "required": true,
            "description": "The name of the registry.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaName",
            "in": "path",
            "required": true,
            "description": "The name of the schema.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaVersion",
            "in": "query",
            "required": false,
            "description": "Specifying this limits the results to only this schema version.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": true,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Export Schema"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/X-Amz-Content-Sha256"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Date"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Algorithm"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Credential"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Security-Token"
        },
        {
          "$ref": "#/components/parameters/X-Amz-Signature"
        },
        {
          "$ref": "#/components/parameters/X-Amz-SignedHeaders"
        }
      ]
    }
  },
  "components": {
    "parameters": {
      "X-Amz-Content-Sha256": {
        "name": "X-Amz-Content-Sha256",
        "in": "header",
        "schema": {
          "type": "string"
        },
        "required": false,
        "x-ignore": true
      },
      "X-Amz-Date": {
        "name": "X-Amz-Date",
        "in": "header",
        "schema": {
          "type": "string"
        },
        "required": false,
        "x-ignore": true
      },
      "X-Amz-Algorithm": {
        "name": "X-Amz-Algorithm",
        "in": "header",
        "schema": {
          "type": "string"
        },
        "required": false,
        "x-ignore": true
      },
      "X-Amz-Credential": {
        "name": "X-Amz-Credential",
        "in": "header",
        "schema": {
          "type": "string"
        },
        "required": false,
        "x-ignore": true
      },
      "X-Amz-Security-Token": {
        "name": "X-Amz-Security-Token",
        "in": "header",
        "schema": {
          "type": "string"
        },
        "required": false,
        "x-ignore": true
      },
      "X-Amz-Signature": {
        "name": "X-Amz-Signature",
        "in": "header",
        "schema": {
          "type": "string"
        },
        "required": false,
        "x-ignore": true
      },
      "X-Amz-SignedHeaders": {
        "name": "X-Amz-SignedHeaders",
        "in": "header",
        "schema": {
          "type": "string"
        },
        "required": false,
        "x-ignore": true
      }
    },
    "securitySchemes": {
      "hmac": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header",
        "description": "Amazon Signature authorization v4",
        "x-amazon-apigateway-authtype": "awsSigv4"
      }
    },
    "schemas": {
      "CreateDiscovererResponse": {
        "type": "object",
        "properties": {
          "Description": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The description of the discoverer."
              }
            ]
          },
          "DiscovererArn": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The ARN of the discoverer."
              }
            ]
          },
          "DiscovererId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The ID of the discoverer."
              }
            ]
          },
          "SourceArn": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The ARN of the event bus."
              }
            ]
          },
          "State": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DiscovererState"
              },
              {
                "description": "The state of the discoverer."
              }
            ]
          },
          "Tags": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Tags"
              },
              {
                "xml": {
                  "name": "tags"
                },
                "description": "Tags associated with the resource."
              }
            ]
          },
          "CrossAccount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__boolean"
              },
              {
                "description": "The Status if the discoverer will discover schemas from events sent from another account."
              }
            ]
          }
        }
      },
      "__string": {
        "type": "string"
      },
      "BadRequestException": {},
      "InternalServerErrorException": {},
      "UnauthorizedException": {},
      "ForbiddenException": {},
      "ServiceUnavailableException": {},
      "ConflictException": {},
      "CreateRegistryResponse": {
        "type": "object",
        "properties": {
          "Description": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The description of the registry."
              }
            ]
          },
          "RegistryArn": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The ARN of the registry."
              }
            ]
          },
          "RegistryName": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The name of the registry."
              }
            ]
          },
          "Tags": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Tags"
              },
              {
                "xml": {
                  "name": "tags"
                },
                "description": "Tags associated with the registry."
              }
            ]
          }
        }
      },
      "CreateSchemaResponse": {
        "type": "object",
        "properties": {
          "Description": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The description of the schema."
              }
            ]
          },
          "LastModified": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__timestampIso8601"
              },
              {
                "description": "The date and time that schema was modified."
              }
            ]
          },
          "SchemaArn": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The ARN of the schema."
              }
            ]
          },
          "SchemaName": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The name of the schema."
              }
            ]
          },
          "SchemaVersion": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The version number of the schema"
              }
            ]
          },
          "Tags": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Tags"
              },
              {
                "xml": {
                  "name": "tags"
                }
              }
            ]
          },
          "Type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The type of the schema."
              }
            ]
          },
          "VersionCreatedDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__timestampIso8601"
              },
              {
                "description": "The date the schema version was created."
              }
            ]
          }
        }
      },
      "NotFoundException": {},
      "DescribeCodeBindingResponse": {
        "type": "object",
        "properties": {
          "CreationDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__timestampIso8601"
              },
              {
                "description": "The time and date that the code binding was created."
              }
            ]
          },
          "LastModified": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__timestampIso8601"
              },
              {
                "description": "The date and time that code bindings were modified."
              }
            ]
          },
          "SchemaVersion": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The version number of the schema."
              }
            ]
          },
          "Status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CodeGenerationStatus"
              },
              {
                "description": "The current status of code binding generation."
              }
            ]
          }
        }
      },
      "TooManyRequestsException": {},
      "DescribeDiscovererResponse": {
        "type": "object",
        "properties": {
          "Description": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The description of the discoverer."
              }
            ]
          },
          "DiscovererArn": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The ARN of the discoverer."
              }
            ]
          },
          "DiscovererId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The ID of the discoverer."
              }
            ]
          },
          "SourceArn": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The ARN of the event bus."
              }
            ]
          },
          "State": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DiscovererState"
              },
              {
                "description": "The state of the discoverer."
              }
            ]
          },
          "Tags": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Tags"
              },
              {
                "xml": {
                  "name": "tags"
                },
                "description": "Tags associated with the resource."
              }
            ]
          },
          "CrossAccount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__boolean"
              },
              {
                "description": "The Status if the discoverer will discover schemas from events sent from another account."
              }
            ]
          }
        }
      },
      "DescribeRegistryResponse": {
        "type": "object",
        "properties": {
          "Description": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The description of the registry."
              }
            ]
          },
          "RegistryArn": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The ARN of the registry."
              }
            ]
          },
          "RegistryName": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The name of the registry."
              }
            ]
          },
          "Tags": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Tags"
              },
              {
                "xml": {
                  "name": "tags"
                },
                "description": "Tags associated with the registry."
              }
            ]
          }
        }
      },
      "DescribeSchemaResponse": {
        "type": "object",
        "properties": {
          "Content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The source of the schema definition."
              }
            ]
          },
          "Description": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The description of the schema."
              }
            ]
          },
          "LastModified": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__timestampIso8601"
              },
              {
                "description": "The date and time that schema was modified."
              }
            ]
          },
          "SchemaArn": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The ARN of the schema."
              }
            ]
          },
          "SchemaName": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The name of the schema."
              }
            ]
          },
          "SchemaVersion": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The version number of the schema"
              }
            ]
          },
          "Tags": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Tags"
              },
              {
                "xml": {
                  "name": "tags"
                },
                "description": "Tags associated with the resource."
              }
            ]
          },
          "Type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The type of the schema."
              }
            ]
          },
          "VersionCreatedDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__timestampIso8601"
              },
              {
                "description": "The date the schema version was created."
              }
            ]
          }
        }
      },
      "GetCodeBindingSourceResponse": {
        "type": "object",
        "properties": {
          "Body": {
            "$ref": "#/components/schemas/Body"
          }
        }
      },
      "GetDiscoveredSchemaResponse": {
        "type": "object",
        "properties": {
          "Content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The source of the schema definition."
              }
            ]
          }
        }
      },
      "GetDiscoveredSchemaVersionItemInput": {
        "type": "string",
        "minLength": 1,
        "maxLength": 100000
      },
      "GetResourcePolicyResponse": {
        "type": "object",
        "properties": {
          "Policy": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The resource-based policy."
              }
            ]
          },
          "RevisionId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The revision ID."
              }
            ]
          }
        }
      },
      "ListDiscoverersResponse": {
        "type": "object",
        "properties": {
          "Discoverers": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__listOfDiscovererSummary"
              },
              {
                "description": "An array of DiscovererSummary information."
              }
            ]
          },
          "NextToken": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts."
              }
            ]
          }
        }
      },
      "ListRegistriesResponse": {
        "type": "object",
        "properties": {
          "NextToken": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts."
              }
            ]
          },
          "Registries": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__listOfRegistrySummary"
              },
              {
                "description": "An array of registry summaries."
              }
            ]
          }
        }
      },
      "ListSchemaVersionsResponse": {
        "type": "object",
        "properties": {
          "NextToken": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts."
              }
            ]
          },
          "SchemaVersions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__listOfSchemaVersionSummary"
              },
              {
                "description": "An array of schema version summaries."
              }
            ]
          }
        }
      },
      "ListSchemasResponse": {
        "type": "object",
        "properties": {
          "NextToken": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts."
              }
            ]
          },
          "Schemas": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__listOfSchemaSummary"
              },
              {
                "description": "An array of schema summaries."
              }
            ]
          }
        }
      },
      "ListTagsForResourceResponse": {
        "type": "object",
        "properties": {
          "Tags": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Tags"
              },
              {
                "xml": {
                  "name": "tags"
                }
              }
            ]
          }
        }
      },
      "PutCodeBindingResponse": {
        "type": "object",
        "properties": {
          "CreationDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__timestampIso8601"
              },
              {
                "description": "The time and date that the code binding was created."
              }
            ]
          },
          "LastModified": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__timestampIso8601"
              },
              {
                "description": "The date and time that code bindings were modified."
              }
            ]
          },
          "SchemaVersion": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The version number of the schema."
              }
            ]
          },
          "Status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CodeGenerationStatus"
              },
              {
                "description": "The current status of code binding generation."
              }
            ]
          }
        }
      },
      "GoneException": {},
      "PutResourcePolicyResponse": {
        "type": "object",
        "properties": {
          "Policy": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The resource-based policy."
              }
            ]
          },
          "RevisionId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The revision ID of the policy."
              }
            ]
          }
        }
      },
      "PreconditionFailedException": {},
      "SearchSchemasResponse": {
        "type": "object",
        "properties": {
          "NextToken": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts."
              }
            ]
          },
          "Schemas": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__listOfSearchSchemaSummary"
              },
              {
                "description": "An array of SearchSchemaSummary information."
              }
            ]
          }
        }
      },
      "StartDiscovererResponse": {
        "type": "object",
        "properties": {
          "DiscovererId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The ID of the discoverer."
              }
            ]
          },
          "State": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DiscovererState"
              },
              {
                "description": "The state of the discoverer."
              }
            ]
          }
        }
      },
      "StopDiscovererResponse": {
        "type": "object",
        "properties": {
          "DiscovererId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The ID of the discoverer."
              }
            ]
          },
          "State": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DiscovererState"
              },
              {
                "description": "The state of the discoverer."
              }
            ]
          }
        }
      },
      "UpdateDiscovererResponse": {
        "type": "object",
        "properties": {
          "Description": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The description of the discoverer."
              }
            ]
          },
          "DiscovererArn": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The ARN of the discoverer."
              }
            ]
          },
          "DiscovererId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The ID of the discoverer."
              }
            ]
          },
          "SourceArn": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The ARN of the event bus."
              }
            ]
          },
          "State": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DiscovererState"
              },
              {
                "description": "The state of the discoverer."
              }
            ]
          },
          "Tags": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Tags"
              },
              {
                "xml": {
                  "name": "tags"
                },
                "description": "Tags associated with the resource."
              }
            ]
          },
          "CrossAccount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__boolean"
              },
              {
                "description": "The Status if the discoverer will discover schemas from events sent from another account."
              }
            ]
          }
        }
      },
      "UpdateRegistryResponse": {
        "type": "object",
        "properties": {
          "Description": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The description of the registry."
              }
            ]
          },
          "RegistryArn": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The ARN of the registry."
              }
            ]
          },
          "RegistryName": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The name of the registry."
              }
            ]
          },
          "Tags": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Tags"
              },
              {
                "xml": {
                  "name": "tags"
                },
                "description": "Tags associated with the registry."
              }
            ]
          }
        }
      },
      "UpdateSchemaResponse": {
        "type": "object",
        "properties": {
          "Description": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The description of the schema."
              }
            ]
          },
          "LastModified": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__timestampIso8601"
              },
              {
                "description": "The date and time that schema was modified."
              }
            ]
          },
          "SchemaArn": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The ARN of the schema."
              }
            ]
          },
          "SchemaName": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The name of the schema."
              }
            ]
          },
          "SchemaVersion": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The version number of the schema"
              }
            ]
          },
          "Tags": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Tags"
              },
              {
                "xml": {
                  "name": "tags"
                }
              }
            ]
          },
          "Type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The type of the schema."
              }
            ]
          },
          "VersionCreatedDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__timestampIso8601"
              },
              {
                "description": "The date the schema version was created."
              }
            ]
          }
        }
      },
      "CodeGenerationStatus": {
        "type": "string",
        "enum": ["CREATE_IN_PROGRESS", "CREATE_COMPLETE", "CREATE_FAILED"]
      },
      "Tags": {
        "type": "object",
        "description": "Key-value pairs associated with a resource.",
        "additionalProperties": {
          "$ref": "#/components/schemas/__string"
        }
      },
      "DiscovererState": {
        "type": "string",
        "enum": ["STARTED", "STOPPED"]
      },
      "Type": {
        "type": "string",
        "enum": ["OpenApi3", "JSONSchemaDraft4"]
      },
      "__timestampIso8601": {
        "type": "string",
        "format": "date-time"
      },
      "DiscovererSummary": {
        "type": "object",
        "properties": {
          "DiscovererArn": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The ARN of the discoverer."
              }
            ]
          },
          "DiscovererId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The ID of the discoverer."
              }
            ]
          },
          "SourceArn": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The ARN of the event bus."
              }
            ]
          },
          "State": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DiscovererState"
              },
              {
                "description": "The state of the discoverer."
              }
            ]
          },
          "Tags": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Tags"
              },
              {
                "xml": {
                  "name": "tags"
                },
                "description": "Tags associated with the resource."
              }
            ]
          },
          "CrossAccount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__boolean"
              },
              {
                "description": "The Status if the discoverer will discover schemas from events sent from another account."
              }
            ]
          }
        }
      },
      "Body": {
        "type": "string"
      },
      "__listOfDiscovererSummary": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/DiscovererSummary"
        }
      },
      "__listOfRegistrySummary": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/RegistrySummary"
        }
      },
      "__listOfSchemaVersionSummary": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/SchemaVersionSummary"
        }
      },
      "__listOfSchemaSummary": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/SchemaSummary"
        }
      },
      "RegistrySummary": {
        "type": "object",
        "properties": {
          "RegistryArn": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The ARN of the registry."
              }
            ]
          },
          "RegistryName": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The name of the registry."
              }
            ]
          },
          "Tags": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Tags"
              },
              {
                "xml": {
                  "name": "tags"
                },
                "description": "Tags associated with the registry."
              }
            ]
          }
        }
      },
      "__long": {
        "type": "integer"
      },
      "SchemaSummary": {
        "type": "object",
        "properties": {
          "LastModified": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__timestampIso8601"
              },
              {
                "description": "The date and time that schema was modified."
              }
            ]
          },
          "SchemaArn": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The ARN of the schema."
              }
            ]
          },
          "SchemaName": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The name of the schema."
              }
            ]
          },
          "Tags": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Tags"
              },
              {
                "xml": {
                  "name": "tags"
                },
                "description": "Tags associated with the schema."
              }
            ]
          },
          "VersionCount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__long"
              },
              {
                "description": "The number of versions available for the schema."
              }
            ]
          }
        },
        "description": "A summary of schema details."
      },
      "SchemaVersionSummary": {
        "type": "object",
        "properties": {
          "SchemaArn": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The ARN of the schema version."
              }
            ]
          },
          "SchemaName": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The name of the schema."
              }
            ]
          },
          "SchemaVersion": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The version number of the schema."
              }
            ]
          },
          "Type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Type"
              },
              {
                "description": "The type of schema."
              }
            ]
          }
        }
      },
      "__listOfSearchSchemaVersionSummary": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/SearchSchemaVersionSummary"
        }
      },
      "SearchSchemaSummary": {
        "type": "object",
        "properties": {
          "RegistryName": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The name of the registry."
              }
            ]
          },
          "SchemaArn": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The ARN of the schema."
              }
            ]
          },
          "SchemaName": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The name of the schema."
              }
            ]
          },
          "SchemaVersions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__listOfSearchSchemaVersionSummary"
              },
              {
                "description": "An array of schema version summaries."
              }
            ]
          }
        }
      },
      "SearchSchemaVersionSummary": {
        "type": "object",
        "properties": {
          "CreatedDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__timestampIso8601"
              },
              {
                "description": "The date the schema version was created."
              }
            ]
          },
          "SchemaVersion": {
            "allOf": [
              {
                "$ref": "#/components/schemas/__string"
              },
              {
                "description": "The version number of the schema"
              }
            ]
          },
          "Type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Type"
              },
              {
                "description": "The type of schema."
              }
            ]
          }
        }
      },
      "__listOfSearchSchemaSummary": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/SearchSchemaSummary"
        }
      },
      "ExportSchemaResponse": {
        "type": "object",
        "properties": {
          "Content": {
            "$ref": "#/components/schemas/__string"
          },
          "SchemaArn": {
            "$ref": "#/components/schemas/__string"
          },
          "SchemaName": {
            "$ref": "#/components/schemas/__string"
          },
          "SchemaVersion": {
            "$ref": "#/components/schemas/__string"
          },
          "Type": {
            "$ref": "#/components/schemas/__string"
          }
        }
      },
      "__boolean": {
        "type": "boolean"
      }
    }
  },
  "security": [
    {
      "hmac": []
    }
  ],
  "x-metadata": {
    "apiVersion": "2019-12-02",
    "endpointPrefix": "schemas",
    "signingName": "schemas",
    "serviceFullName": "Schemas",
    "serviceId": "schemas",
    "protocol": "rest-json",
    "jsonVersion": "1.1",
    "uid": "schemas-2019-12-02",
    "signatureVersion": "v4",
    "targetPrefix": "schemas"
  }
}
